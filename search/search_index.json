{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"index","text":""},{"location":"#types","title":"Types","text":"<ul> <li>alias _ck_constraint_info</li> <li>alias _ck_constraint_tuple</li> <li>alias _collation_info</li> <li>alias _collation_tuple</li> <li>alias _index_info</li> <li>alias _index_tuple</li> <li>alias _priv_info</li> <li>alias _priv_tuple</li> <li>alias _schema_info</li> <li>alias _schema_tuple</li> <li>alias _sequence_data_info</li> <li>alias _sequence_data_tuple</li> <li>alias _sequence_info</li> <li>alias _sequence_tuple</li> <li>alias _session_settings_info</li> <li>alias _session_settings_tuple</li> <li>alias _space_info</li> <li>alias _space_sequence_info</li> <li>alias _space_sequence_tuple</li> <li>alias _space_tuple</li> <li>alias _user_info</li> <li>alias _user_tuple</li> <li>alias _vcollation_info</li> <li>alias _vcollation_tuple</li> <li>alias _vindex_info</li> <li>alias _vindex_tuple</li> <li>alias _vpriv_info</li> <li>alias _vpriv_tuple</li> <li>alias _vspace_info</li> <li>alias _vspace_sequence_info</li> <li>alias _vspace_sequence_tuple</li> <li>alias _vspace_tuple</li> <li>alias _vuser_info</li> <li>alias _vuser_tuple</li> <li>alias adjust</li> <li>alias array</li> <li>alias byte_order</li> <li>alias collation</li> <li>alias comparator</li> <li>alias compound</li> <li>alias decimal_like</li> <li>alias election_mode</li> <li>alias feature</li> <li>alias field_format</li> <li>alias field_format</li> <li>alias flags</li> <li>alias float64</li> <li>alias foreign_key</li> <li>alias format</li> <li>alias index_part_def</li> <li>alias index_type</li> <li>alias integer64</li> <li>alias iterator</li> <li>alias iterator</li> <li>alias log</li> <li>alias log_format</li> <li>alias log_level</li> <li>alias map</li> <li>alias mode</li> <li>alias nullable_action</li> <li>alias object_type</li> <li>alias on_commit_iterator</li> <li>alias on_commit_trigger_func</li> <li>alias permissions</li> <li>alias predicate</li> <li>alias privileges</li> <li>alias recovery_state</li> <li>alias replace_trigger</li> <li>alias scalar</li> <li>alias seek</li> <li>alias status</li> <li>alias tuple_type</li> <li>alias tuple_type_name</li> <li>alias txn_isolation</li> <li>alias type</li> <li>alias units</li> <li>alias units</li> <li>alias update_operation</li> <li>alias uri_like</li> <li>alias wal_mode</li> <li>class alert</li> <li>class alter_options</li> <li>class begin_options</li> <li>class buffer</li> <li>class call_options</li> <li>class cfg</li> <li>class cfg</li> <li>class cfg</li> <li>class channel</li> <li>class checkpoint</li> <li>class cluster</li> <li>class cond</li> <li>class conn</li> <li>class connect_options</li> <li>class create_options</li> <li>class create_options</li> <li>class create_space_options</li> <li>class datetime</li> <li>class decimal</li> <li>class default</li> <li>class default_with_current</li> <li>class downstream</li> <li>class election</li> <li>class encoding_opt</li> <li>class errno</li> <li>class error</li> <li>class fiber</li> <li>class file</li> <li>class format</li> <li>class gc</li> <li>class iconv</li> <li>class index</li> <li>class index_options</li> <li>class index_part</li> <li>class info</li> <li>class info</li> <li>class info</li> <li>class info</li> <li>class info</li> <li>class int64_t</li> <li>class interval</li> <li>class iterator</li> <li>class log</li> <li>class memory</li> <li>class meta</li> <li>class net</li> <li>class options</li> <li>class options</li> <li>class options</li> <li>class queue</li> <li>class replica</li> <li>class request_options</li> <li>class response</li> <li>class savepoint</li> <li>class select_options</li> <li>class sequence</li> <li>class slice</li> <li>class socket</li> <li>class socket_module</li> <li>class space</li> <li>class spaces</li> <li>class stat</li> <li>class stat</li> <li>class stat</li> <li>class syncho</li> <li>class table</li> <li>class tcp_server_handler</li> <li>class top</li> <li>class trace</li> <li>class tuple</li> <li>class uint64_t</li> <li>class upstream</li> <li>class uri</li> <li>class uuid</li> <li>class v2</li> <li>class v2</li> <li>class watcher</li> <li>enum ballot_key</li> <li>enum flag</li> <li>enum iterator</li> <li>enum key</li> <li>enum metadata_key</li> <li>enum raft_key</li> <li>enum type</li> </ul>"},{"location":"#modules","title":"Modules","text":"<ul> <li>buffer</li> <li>clock</li> <li>config</li> <li>console</li> <li>csv</li> <li>datetime</li> <li>decimal</li> <li>errno</li> <li>fiber</li> <li>fio</li> <li>fun</li> <li>http.client</li> <li>iconv</li> <li>jit</li> <li>jit.bc</li> <li>jit.dis_x64</li> <li>jit.dis_x86</li> <li>jit.dump</li> <li>jit.v</li> <li>json</li> <li>log</li> <li>net.box</li> <li>socket</li> <li>strict</li> <li>uri</li> <li>uuid</li> <li>xlog</li> <li>yaml</li> </ul>"},{"location":"#globals","title":"Globals","text":"<ul> <li>_TARANTOOL</li> <li>box</li> <li>dostring</li> <li>tonumber64</li> </ul>"},{"location":"globals/_TARANTOOL/","title":"global _TARANTOOL","text":"<pre><code>_TARANTOOL : any\n</code></pre>"},{"location":"globals/box/","title":"global box","text":"<p>Builtin <code>box</code> module</p> <p>As well as executing Lua chunks or defining your own functions, you can exploit Tarantool's storage functionality with the <code>box</code> module and its submodules.</p> <p>Every submodule contains one or more Lua functions. A few submodules contain members as well as functions. The functions allow data definition (create alter drop), data manipulation (insert delete update upsert select replace), an introspection (inspecting contents of spaces, accessing server configuration).</p> <p>To catch errors that functions in <code>box</code> submodules may throw, use <code>pcall()</code>.</p>"},{"location":"globals/box/#methods","title":"methods","text":""},{"location":"globals/box/#boxerror","title":"box.error","text":"<pre><code>function box.error(err: { code: number?, reason: string }) -&gt;  box.error\n</code></pre> <p>@param <code>err</code> - reason is description of an error, defined by user; code is numeric code for this error, defined by user</p> <p>Throw an error. When called with a Lua-table argument, the code and reason have any user-desired values. The result will be those values.</p>"},{"location":"globals/box/#boxerror_1","title":"box.error","text":"<pre><code>function box.error(\n  code: number,\n  errtext: string,\n  ...: string\n)\n</code></pre> <p>@param <code>code</code> - number of a pre-defined error</p> <p>@param <code>errtext</code> - part of the message which will accompany the error</p> <p>@param <code>...</code> - part of the message which will accompany the error</p> <p>Throw an error. This method emulates a request error, with text based on one of the pre-defined Tarantool errors defined in the file errcode.h in the source tree.</p>"},{"location":"globals/box/#boxis_in_txn","title":"box.is_in_txn","text":"<pre><code>function box.is_in_txn() -&gt; is_in_txn boolean\n</code></pre> <p>If a transaction is in progress (for example the user has called <code>box.begin()</code> and has not yet called either <code>box.begin()</code> or <code>box.rollback()</code>, return <code>true</code>. Otherwise return <code>false</code>.</p>"},{"location":"globals/box/#boxbegin","title":"box.begin","text":"<pre><code>function box.begin(opts: box.begin_options?)\n</code></pre> <p>Begin the transaction.</p> <p>Disable implicit yields until the transaction ends. Signal that writes to the write-ahead log will be deferred until the transaction ends. In effect the fiber which executes <code>box.begin()</code> is starting an \"active multi-request transaction\", blocking all other fibers.</p> <p>Possible errors: * Error if this operation is not permitted because there is already an active transaction. * Error if for some reason memory cannot be allocated. * Error and abort the transaction if the timeout is exceeded.</p>"},{"location":"globals/box/#boxcommit","title":"box.commit","text":"<pre><code>function box.commit()\n</code></pre> <p>End the transaction, and make all its data-change operations permanent.</p> <p>Possible errors: * Error and abort the transaction in case of a conflict. * Error if the operation fails to write to disk. * Error if for some reason memory cannot be allocated.</p> <p>Example:</p> <pre><code> -- Insert test data --\n box.space.bands:insert { 1, 'Roxette', 1986 }\n box.space.bands:insert { 2, 'Scorpions', 1965 }\n box.space.bands:insert { 3, 'Ace of Base', 1987 }\n\n -- Begin and commit the transaction explicitly --\n box.begin()\n box.space.bands:insert { 4, 'The Beatles', 1960 }\n box.space.bands:replace { 1, 'Pink Floyd', 1965 }\n box.commit()\n\n -- Begin the transaction with the specified isolation level --\n box.begin({ txn_isolation = 'read-committed' })\n box.space.bands:insert { 5, 'The Rolling Stones', 1962 }\n box.space.bands:replace { 1, 'The Doors', 1965 }\n box.commit()\n</code></pre>"},{"location":"globals/box/#boxrollback","title":"box.rollback","text":"<pre><code>function box.rollback()\n</code></pre> <p>End the transaction, but cancel all its data-change operations.</p> <p>An explicit call to functions outside <code>box.space</code> that always yield, such as <code>fiber.sleep()</code> or <code>fiber.yield()</code>, will have the same effect.</p> <p>Example:</p> <pre><code> -- Insert test data --\n box.space.bands:insert { 1, 'Roxette', 1986 }\n box.space.bands:insert { 2, 'Scorpions', 1965 }\n box.space.bands:insert { 3, 'Ace of Base', 1987 }\n\n -- Rollback the transaction --\n box.begin()\n box.space.bands:insert { 4, 'The Beatles', 1960 }\n box.space.bands:replace { 1, 'Pink Floyd', 1965 }\n box.rollback()\n</code></pre>"},{"location":"globals/box/#boxsavepoint","title":"box.savepoint","text":"<pre><code>function box.savepoint() -&gt; savepoint (box.savepoint|box.error)\n</code></pre> <p>Return a descriptor of a savepoint, which can be used later by <code>box.rollback_to_savepoint(savepoint)</code>.</p> <p>Savepoints can only be created while a transaction is active, and they are destroyed when a transaction ends</p> <p>Possible errors: * Error if for some reason memory cannot be allocated.</p> <p>Example:</p> <pre><code> -- Insert test data --\n box.space.bands:insert { 1, 'Roxette', 1986 }\n box.space.bands:insert { 2, 'Scorpions', 1965 }\n box.space.bands:insert { 3, 'Ace of Base', 1987 }\n\n -- Rollback the transaction to a savepoint --\n box.begin()\n box.space.bands:insert { 4, 'The Beatles', 1960 }\n save1 = box.savepoint()\n box.space.bands:replace { 1, 'Pink Floyd', 1965 }\n box.rollback_to_savepoint(save1)\n box.commit()\n</code></pre>"},{"location":"globals/box/#boxrollback_to_savepoint","title":"box.rollback_to_savepoint","text":"<pre><code>function box.rollback_to_savepoint(savepoint: box.savepoint) -&gt; error box.error?\n</code></pre> <p>Do not end the transaction, but cancel all its data-change and <code>box.savepoint()</code> operations that were done after the specified savepoint.</p> <p>Possible errors: * Error if the savepoint does not exist.</p> <p>Example:</p> <pre><code> -- Insert test data --\n box.space.bands:insert { 1, 'Roxette', 1986 }\n box.space.bands:insert { 2, 'Scorpions', 1965 }\n box.space.bands:insert { 3, 'Ace of Base', 1987 }\n\n -- Rollback the transaction to a savepoint --\n box.begin()\n box.space.bands:insert { 4, 'The Beatles', 1960 }\n save1 = box.savepoint()\n box.space.bands:replace { 1, 'Pink Floyd', 1965 }\n box.rollback_to_savepoint(save1)\n box.commit()\n</code></pre>"},{"location":"globals/box/#boxatomic","title":"box.atomic","text":"<pre><code>function box.atomic(\n  opts: { txn_isolation: box.txn_isolation? },\n  tx_function: fun(...: T ...) -&gt; R ...?,\n  ...: T ...\n) -&gt; retvals R ...\n</code></pre> <p>@return <code>retvals</code> - The result of the function passed to <code>atomic()</code> as an argument.</p> <p>Execute a function, acting as if the function starts with an implicit <code>box.begin()</code> and ends with an implicit <code>box.commit()</code> if successful, or ends with an implicit <code>box.rollback()</code> if there is an error.</p> <p>Since 2.10.1</p> <p>Possible errors: * Error and abort the transaction in case of a conflict. * Error and abort the transaction if the timeout is exceeded. * Error if the operation fails to write to disk. * Error if for some reason memory cannot be allocated.</p> <p>Example:</p> <pre><code> -- Create an index with the specified sequence --\n box.schema.sequence.create('id_sequence', { min = 1 })\n box.space.bands:create_index('primary', { parts = { 'id' }, sequence = 'id_sequence' })\n\n -- Insert test data --\n box.space.bands:insert { 1, 'Roxette', 1986 }\n box.space.bands:insert { 2, 'Scorpions', 1965 }\n box.space.bands:insert { 3, 'Ace of Base', 1987 }\n\n -- Define a function --\n local function insert_band(band_name, year)\n     box.space.bands:insert { nil, band_name, year }\n end\n\n -- Begin and commit the transaction implicitly --\n box.atomic(insert_band, 'The Beatles', 1960)\n\n -- Begin the transaction with the specified isolation level --\n box.atomic({ txn_isolation = 'read-committed' },\n         insert_band, 'The Rolling Stones', 1962)\n</code></pre>"},{"location":"globals/box/#boxon_commit","title":"box.on_commit","text":"<pre><code>function box.on_commit(\n  trigger_func: box.on_commit_trigger_func,\n  old_trigger_func: box.on_commit_trigger_func?\n)\n</code></pre> <p>Define a trigger for execution when a transaction ends due to an event such as <code>box.commit()</code>.</p> <p>The trigger function may take an iterator parameter, as described in an example for this section.</p> <p>The trigger function should not access any database spaces.</p> <p>If the trigger execution fails and raises an error, the effect is severe and should be avoided -- use Lua's <code>pcall()</code> mechanism around code that might fail.</p> <p><code>box.on_commit()</code> must be invoked within a transaction, and the trigger ceases to exist when the transaction ends.</p> <p>If the parameters are <code>(nil, old-trigger-function)</code>, then the old trigger is deleted.</p> <p>Details about trigger characteristics are in the triggers section.</p> <p>Examples:</p> <pre><code> -- Insert test data --\n box.space.bands:insert { 1, 'Roxette', 1986 }\n box.space.bands:insert { 2, 'Scorpions', 1965 }\n box.space.bands:insert { 3, 'Ace of Base', 1987 }\n\n -- Define a function called on commit --\n function print_commit_result()\n     print('Commit happened')\n end\n\n -- Commit the transaction --\n box.begin()\n box.space.bands:insert { 4, 'The Beatles', 1960 }\n box.on_commit(print_commit_result)\n box.commit()\n</code></pre> <p>The function parameter can be an iterator.</p> <p>The iterator goes through the effects of every request that changed a space during the transaction.</p> <p>The iterator has: * An ordinal request number. * The old value of the tuple before the request (<code>nil</code> for an <code>insert</code> request). * The new value of the tuple after the request (<code>nil</code> for a <code>delete</code> request). * The ID of the space.</p> <p>The example below displays the effects of two <code>replace</code> requests:</p> <pre><code> -- Insert test data --\n box.space.bands:insert { 1, 'Roxette', 1986 }\n box.space.bands:insert { 2, 'Scorpions', 1965 }\n box.space.bands:insert { 3, 'Ace of Base', 1987 }\n\n -- Define a function called on commit --\n function print_replace_details(iterator)\n     for request_number, old_tuple, new_tuple, space_id in iterator() do\n         print('request_number: ' .. tostring(request_number))\n         print('old_tuple: ' .. tostring(old_tuple))\n         print('new_tuple: ' .. tostring(new_tuple))\n         print('space_id: ' .. tostring(space_id))\n     end\n end\n\n -- Commit the transaction --\n box.begin()\n box.space.bands:replace { 1, 'The Beatles', 1960 }\n box.space.bands:replace { 2, 'The Rolling Stones', 1965 }\n box.on_commit(print_replace_details)\n box.commit()\n</code></pre> <p>The output might look like this:</p> <pre><code> request_number: 1\n old_tuple: [1, 'Roxette', 1986]\n new_tuple: [1, 'The Beatles', 1960]\n space_id: 512\n request_number: 2\n old_tuple: [2, 'Scorpions', 1965]\n new_tuple: [2, 'The Rolling Stones', 1965]\n space_id: 512\n</code></pre>"},{"location":"globals/box/#boxon_commit_1","title":"box.on_commit","text":"<pre><code>function box.on_commit(\n  trigger_func: box.on_commit_trigger_func,\n  old_trigger_func: box.on_commit_trigger_func?\n)\n</code></pre> <p>Define a trigger for execution when a transaction ends due to an event such as <code>box.rollback()</code>.</p> <p>The parameters and warnings are exactly the same as for <code>box.on_commit</code>.</p> <p>@see box.on_commit</p>"},{"location":"globals/box/#boxonce","title":"box.once","text":"<pre><code>function box.once(\n  key: string,\n  fnc: fun(...: T ...) -&gt; R ...,\n  ...: T ...\n) -&gt;  R ...\n</code></pre> <p>@param <code>key</code> - a value that will be checked</p> <p>@param <code>fnc</code> - function to be executed</p> <p>@param <code>...</code> - arguments to the function</p> <p>Execute a function, provided it has not been executed before.</p> <p>A passed value is checked to see whether the function has already been executed. If it has been executed before, nothing happens. If it has not been executed before, the function is invoked.</p> <p>See an example of using <code>box.once()</code> vshard quick start storage code.</p> <p>Warning: If an error occurs inside <code>box.once()</code> when initializing a database, you can re-execute the failed <code>box.once()</code> block without stopping the database. The solution is to delete the <code>once</code> object from the system space `box.space._schema.</p> <p>Say <code>box.space._schema:select{}</code>, find your <code>once</code> object there and delete it.</p> <p>When <code>box.once()</code> is used for initialization, it may be useful to wait until the database is in an appropriate state (read-only or read-write). In that case, see the functions in the <code>box.ctl</code>.</p> <p>Note:</p> <p>The parameter <code>key</code> will be stored in the <code>_schema</code> system space after <code>box.once()</code> is called in order to prevent a double run.</p> <p>These keys are global per replica set. So a simultaneous call of <code>box.once()</code> with the same key on two instances of the same replica set may succeed on both of them, but it'll lead to a transaction conflict.</p> <p>Example:</p> <p>The example shows how to re-execute the <code>box.once()</code> block that contains the <code>hello</code> key.</p> <p>First, check the <code>_schema</code> system space. The <code>_schema</code> space in the example contains two <code>box.once</code> objects -- <code>oncebye</code> and <code>oncehello</code>:</p> <pre><code> app:instance001&gt; box.space._schema:select{}\n ---\n - - ['oncebye']\n - ['oncehello']\n - ['replicaset_name', 'replicaset001']\n - ['replicaset_uuid', '72d2d9bf-5d9f-48c4-ba80-9d657e128fee']\n - ['version', 3, 1, 0]\n</code></pre> <p>Delete the <code>oncehello</code> object:</p> <pre><code> app:instance001&gt; box.space._schema:delete('oncehello')\n ---\n - ['oncehello']\n ...\n</code></pre> <p>After that, check the <code>_schema</code> space again:</p> <pre><code> app:instance001&gt; box.space._schema:select{}\n ---\n - - ['oncebye']\n - ['replicaset_name', 'replicaset001']\n - ['replicaset_uuid', '72d2d9bf-5d9f-48c4-ba80-9d657e128fee']\n - ['version', 3, 1, 0]\n ...\n</code></pre> <p>To re-execute the function, call the <code>box.once()</code> method again:</p> <pre><code> app:instance001&gt; box.once('hello', function() end)\n ---\n ...\n\n app:instance001&gt; box.space._schema:select{}\n ---\n - - ['oncebye']\n - ['oncehello']\n - ['replicaset_name', 'replicaset001']\n - ['replicaset_uuid', '72d2d9bf-5d9f-48c4-ba80-9d657e128fee']\n - ['version', 3, 1, 0]\n ...\n</code></pre>"},{"location":"globals/box/#boxsnapshot","title":"box.snapshot","text":"<pre><code>async function box.snapshot()\n</code></pre> <p>Creates new snapshot of the data and executes checkpoint.gc process</p> <p>Take a snapshot of all data and store it in <code>snapshot.dir</code></p> <p>To take a snapshot, Tarantool first enters the delayed garbage collection mode for all data. In this mode, the Tarantool garbage collector will not remove files which were created before the snapshot started, it will not remove them until the snapshot has finished. To preserve consistency of the primary key, used to iterate over tuples, a copy-on-write technique is employed. If the master process changes part of a primary key, the corresponding process page is split, and the snapshot process obtains an old copy of the page.</p> <p>In effect, the snapshot process uses multi-version concurrency control in order to avoid copying changes which are superseded while it is running.</p> <p>Since a snapshot is written sequentially, you can expect a very high write performance (averaging to 80MB/second on modern disks), which means an average database instance gets saved in a matter of minutes.</p> <p>You may restrict the speed by changing <code>snapshot.snap_io_rate_limit</code>.</p> <p>Note:</p> <p>As long as there are any changes to the parent index memory through concurrent updates, there are going to be page splits, and therefore you need to have some extra free memory to run this command. 10% of <code>memtx_memory</code> is, on average, sufficient.</p> <p>This statement waits until a snapshot is taken and returns operation result.</p> <p>Note:</p> <p>Change notice: Prior to Tarantool version 1.6.6, the snapshot process caused a fork, which could cause occasional latency spikes. Starting with Tarantool version 1.6.6, the snapshot process creates a consistent read view and this view is written to the snapshot file by a separate thread (the \"Write Ahead Log\" thread).</p> <p>Although <code>box.snapshot()</code> does not cause a fork, there is a separate fiber which may produce snapshots at regular intervals -- see the discussion of the checkpoint daemon.</p> <p>Example:</p> <pre><code> tarantool&gt; box.info.version\n ---\n - 1.7.0-1216-g73f7154\n ...\n tarantool&gt; box.snapshot()\n ---\n - ok\n ...\n tarantool&gt; box.snapshot()\n ---\n - error: can't save snapshot, errno 17 (File exists)\n ...\n</code></pre> <p>Taking a snapshot does not cause the server to start a new write-ahead log.</p> <p>Once a snapshot is taken, old WALs can be deleted as long as all replicated data is up to date. But the WAL which was current at the time <code>box.snapshot()</code> started must be kept for recovery, since it still contains log records written after the start of <code>box.snapshot()</code>.</p> <p>An alternative way to save a snapshot is to send a SIGUSR1 signal to the instance.</p> <p>While this approach could be handy, it is not recommended for use in automation: a signal provides no way to find out whether the snapshot was taken successfully or not.</p> <p>Vinyl:</p> <p>In vinyl, inserted data is stacked in memory until the limit, set in the <code>vinyl_memory</code> parameter, is reached. Then vinyl automatically dumps it to the disc. <code>box.snapshot()</code> forces this dump in order to have the ability to recover from this checkpoint.</p> <p>The snapshot files are stored in <code>{space_id}/{index_id}/*.run</code>.</p> <p>Thus, strictly all the data that was written at the time of LSN of the checkpoint is in the <code>*.run</code> files on the disk, and all operations that happened after the checkpoint will be written in the <code>*.xlog</code>. All dump files created by <code>box.snapshot()</code> are consistent and have the same LSN as checkpoint.</p> <p>At the checkpoint vinyl also rotates the metadata log <code>*.vylog</code>, containing data manipulation operations like \"create file\" and \"delete file\". It goes through the log, removes duplicating operations from the memory and creates a new <code>*.vylog</code> file, giving it the name according to the vclock of the new checkpoint, with \"create\" operations only. This procedure cleans <code>*.vylog</code> and is useful for recovery because the name of the log is the same as the checkpoint signature.</p>"},{"location":"globals/box/#boxbroadcast","title":"box.broadcast","text":"<pre><code>function box.broadcast(\n  key: string,\n  value: any\n)\n</code></pre> <p>Update the value of a particular key and notify all key watchers of the update.</p> <p>Since 2.10.0</p> <p>Possible errors:</p> <ul> <li>The value can't be encoded as MsgPack.</li> <li>The key refers to a <code>box.</code> system event</li> </ul> <p>Example:</p> <pre><code> -- Broadcast value 42 for the 'foo' key.\n box.broadcast('foo', 42)\n</code></pre>"},{"location":"globals/box/#boxwatch","title":"box.watch","text":"<pre><code>function box.watch(\n  key: string,\n  func: fun(key: string, value: any)\n) -&gt;  box.watcher\n</code></pre> <p>Subscribe to events broadcast by a local host.</p> <p>Since 2.10.0</p> <p>To read more about watchers, see the Functions for watchers section.</p> <p>Note:</p> <p>Keep in mind that garbage collection of a watcher handle doesn't lead to the watcher's destruction. In this case, the watcher remains registered.</p> <p>It is okay to discard the result of <code>watch</code> function if the watcher will never be unregistered.</p> <p>Example:</p> <pre><code> -- Broadcast value 42 for the 'foo' key.\n box.broadcast('foo', 42)\n\n local log = require('log')\n -- Subscribe to updates of the 'foo' key.\n local w = box.watch('foo', function(key, value)\n     assert(key == 'foo')\n     log.info(\"The box.id value is '%d'\", value)\n end)\n</code></pre> <p>If you don't need the watcher anymore, you can unregister it using the command below:</p> <pre><code> w:unregister()\n</code></pre>"},{"location":"globals/box/#boxwatch_once","title":"box.watch_once","text":"<pre><code>function box.watch_once(\n  key: string,\n  func: fun(key: string, value: any)\n) -&gt;  box.watcher\n</code></pre> <p>Subscribe once to events broadcast by a local host.</p> <p>Since 2.10.0</p> <p>Returns the current value of a given notification key.</p> <p>The function can be used as an alternative to <code>box.watch()</code> when the caller only needs the current value without subscribing to future changes.</p> <p>To read more about watchers, see the box.watchers section.</p> <p>Example:</p> <pre><code>\n -- Broadcast value 42 for the 'foo' key.\n box.broadcast('foo', 42)\n\n -- Get the value of this key\n tarantool&gt; box.watch_once('foo')\n ---\n - 42\n ...\n\n -- Non-existent keys' values are empty\n tarantool&gt; box.watch_once('none')\n ---\n ...\n</code></pre>"},{"location":"globals/box/#boxexecute","title":"box.execute","text":"<pre><code>function box.execute(\n  sql_statement: string,\n  extra_parameters: table\n) -&gt; query_result any\n</code></pre> <p>@param <code>sql_statement</code> - statement, which should conform to</p> <p>@param <code>extra_parameters</code> - optional table for placeholders in the statement the rules for SQL grammar</p> <p>@return <code>query_result</code> - depends on statement</p> <p>Execute the SQL statement.</p> <p>There are two ways to pass extra parameters to <code>box.execute()</code>:</p> <ul> <li>The first way, which is the preferred way, is to put placeholders in the string, and pass a second argument, an <code>extra-parameters</code> table. A placeholder is either a question mark \"?\", or a colon \":\" followed by a name. An extra parameter is any Lua expression.</li> </ul> <p>If placeholders are question marks, then they are replaced by <code>extra-parameters</code> values in corresponding positions. That is, the first <code>?</code> is replaced by the first extra parameter, the second <code>?</code> is replaced by the second extra parameter, and so on.</p> <p>If placeholders are <code>:names</code>, then they are replaced by <code>extra-parameters</code> values with corresponding names.</p> <p>Examples:</p> <p>For example, this request that contains literal values <code>1</code> and <code>'x'</code>:</p> <pre><code> box.execute([[INSERT INTO tt VALUES (1, 'x');]]);\n</code></pre> <p>... is the same as the request below containing two question-mark placeholders (<code>?</code> and <code>?</code>) and a two-element <code>extra-parameters</code> table:</p> <pre><code> x = {1,'x'}\n box.execute([[INSERT INTO tt VALUES (?, ?);]], x);\n</code></pre> <p>... and is the same as this request containing two <code>:name</code> placeholders (<code>:a</code> and <code>:b</code>) and a two-element <code>extra-parameters</code> table with elements named \"a\" and \"b\":</p> <pre><code> box.execute([[INSERT INTO tt VALUES (:a, :b);]], {{[':a']=1},{[':b']='x'}})\n</code></pre> <ul> <li>The second way is to concatenate strings. For example, the Lua script below inserts 10 rows with different primary-key values into table <code>t</code>:</li> </ul> <pre><code> for i=1,10,1 do\n     box.execute(\"insert into t values (\" .. i .. \")\")\n end\n</code></pre> <p>When creating SQL statements based on user input, application developers should beware of <code>SQL injection &lt;https://en.wikipedia.org/wiki/SQL_injection&gt;</code>_.</p> <p>Since <code>box.execute()</code> is an invocation of a Lua function, it either causes an error message or returns a value.</p> <p>For some statements the returned value contains a field named <code>rowcount</code>, for example:</p> <pre><code> tarantool&gt; box.execute([[CREATE TABLE table1 (column1 INT PRIMARY key, column2 VARCHAR(10));]])\n ---\n - rowcount: 1\n ...\n tarantool&gt; box.execute([[INSERT INTO table1 VALUES (55,'Hello SQL world!');]])\n ---\n - rowcount: 1\n ...\n</code></pre> <p>For statements that cause generation of values for PRIMARY KEY AUTOINCREMENT columns, there is a field named <code>autoincrement_id</code>.</p> <p>For SELECT or PRAGMA statements, the returned value is a result set, containing a field named <code>metadata</code> (a table with column names and Tarantool/NoSQL type names) and a field named <code>rows</code> (a table with the contents of each row).</p> <p>For example, for a statement <code>SELECT \"x\" FROM t WHERE \"x\"=5;</code> where <code>\"x\"</code> is an INTEGER column and there is one row, a display on the Tarantool client might look like this:</p> <pre><code> tarantool&gt; box.execute([[SELECT \"x\" FROM t WHERE \"x\"=5;]])\n ---\n - metadata:\n   - name: x\n     type: integer\n   rows:\n   - [5]\n ...\n</code></pre> <p>For a look at raw format of SELECT results, see Binary protocol -- responses for SQL.</p> <p>The order of components within a map is not guaranteed.</p> <p>If <code>sql_full_metadata</code> in the _session_settings system table is TRUE, then result set metadata may include these things in addition to <code>name</code> and <code>type</code>:</p> <ul> <li><code>collation</code> (present only if COLLATE clause is specified for a STRING) =</li> <li><code>is_nullable</code> (present only if the select list specified a base table column and nothing else) = false if column was defined as NOT NULL, otherwise true.</li> <li><code>is_autoincrement</code> (present only if the select list specified a base table column and nothing else) = true if column was defined as PRIMARY KEY AUTOINCREMENT,</li> <li><code>span</code> (always present) = the original expression in a select list, which often is the same as <code>name</code> if the select list specifies a column name and nothing else, but otherwise differs, for example, after <code>SELECT x+55 AS x FROM t;</code> the <code>name</code> is X and the <code>span</code> is x+55. If <code>span</code> and <code>name</code> are the same then the content is MP_NIL.</li> </ul> <p>Alternative: if you are using the Tarantool server as a client, you can switch languages as follows:</p> <pre><code> \\set language sql\n \\set delimiter ;\n</code></pre> <p>Afterwards, you can enter any SQL statement directly without needing <code>box.execute()</code>.</p>"},{"location":"globals/box/#fields","title":"fields","text":""},{"location":"globals/box/#boxnull","title":"box.NULL","text":"<pre><code>box.NULL : ffi.cdata*\n</code></pre> <p>Constant <code>box.NULL</code></p> <p>There are some major problems with using Lua <code>nil</code> values in tables. For example: you can't correctly assess the length of a table that is not a sequence. (Learn more about data types in Lua and LuaJIT)</p> <pre><code> tarantool&gt; t = {0, nil, 1, 2, nil}\n ---\n ...\n\n tarantool&gt; t\n ---\n - - 0\n - null\n - 1\n - 2\n ...\n\n tarantool&gt; #t\n ---\n - 4\n ...\n\n</code></pre> <p>The console output of <code>t</code> processes <code>nil</code> values in the middle and at the end of the table differently. This is due to undefined behavior.</p> <p>Note: Trying to find the length for sparse arrays in LuaJIT leads to another scenario of undefined behavior. To avoid this problem, use Tarantool's <code>box.NULL</code> constant instead of <code>nil</code>. <code>box.NULL</code> is a placeholder for a <code>nil</code> value in tables to preserve a key without a value.</p> <p>Using <code>box.NULL</code>:</p> <p><code>box.NULL</code> is a value of the cdata type representing a NULL pointer. It is similar to <code>msgpack.NULL</code>, <code>json.NULL</code> and <code>yaml.NULL</code>. So it is some not <code>nil</code> value, even if it is a pointer to NULL.</p> <p>Use <code>box.NULL</code> only with capitalized NULL (<code>box.null</code> is incorrect).</p> <p>Note: Technically speaking, <code>box.NULL</code> equals to <code>ffi.cast('void *', 0)</code>.</p> <p>Example:</p> <pre><code> tarantool&gt; t = {0, box.NULL, 1, 2, box.NULL}\n ---\n ...\n\n tarantool&gt; t\n ---\n - - 0\n - null # cdata\n - 1\n - 2\n - null # cdata\n ...\n\n tarantool&gt; #t\n ---\n - 5\n ...\n\n</code></pre> <p>Note: Notice that <code>t[2]</code> shows the same <code>null</code> output in both examples. However in this example <code>t[2]</code> and <code>t[5]</code> are of the cdata type, while in the previous example their type was <code>nil</code>.</p> <p>Important:</p> <p>Avoid using implicit comparisons with nullable values when using <code>box.NULL</code>. Due to Lua behavior returning anything except <code>false</code> or <code>nil</code> from a condition expression is considered as <code>true</code>. And, as it was mentioned earlier, <code>box.NULL</code> is a pointer by design.</p> <p>That is why the expression <code>box.NULL</code> will always be considered <code>true</code> in case it is used as a condition in a comparison. This means that the code</p> <p><code>if box.NULL then func() end</code></p> <p>will always execute the function <code>func()</code> (because the condition <code>box.NULL</code> will always be neither <code>false</code> nor <code>nil</code>).</p> <p>Distinction of <code>nil</code> and <code>box.NULL</code>:</p> <p>Use the expression <code>if x == nil</code> to check if the <code>x</code> is either a <code>nil</code> or a <code>box.NULL</code>.</p> <p>To check whether <code>x</code> is a nil but not a <code>box.NULL</code>, use the following condition expression:</p> <pre><code> type(x) == 'nil'\n</code></pre> <p>If it's <code>true</code>, then <code>x</code> is a <code>nil</code>, but not a <code>box.NULL</code>.</p> <p>You can use the following for <code>box.NULL</code>:</p> <pre><code>\n x == nil and type(x) == 'cdata'\n\n</code></pre> <p>If the expression above is true, then <code>x</code> is a <code>box.NULL</code>.</p> <p>Note:</p> <p>By converting data to different formats (JSON, YAML, msgpack), you shall expect that it is possible that nil in sparse arrays will be converted to <code>box.NULL</code>. And it is worth mentioning that such conversion might be unexpected (for example: by sending data via :ref:<code>net.box &lt;net_box-module&gt; or by obtaining data from [</code>spaces`](box.space) etc.).</p> <pre><code> tarantool&gt; type(({1, nil, 2})[2])\n ---\n - nil\n ...\n\n tarantool&gt; type(json.decode(json.encode({1, nil, 2}))[2])\n ---\n - cdata\n ...\n</code></pre> <p>You must anticipate such behavior and use a proper condition expression. Use the explicit comparison <code>x == nil</code> for checking for NULL in nullable values. It will detect both nil and <code>box.NULL</code>.</p>"},{"location":"globals/box/#boxnull_1","title":"box.NULL","text":"<pre><code>box.NULL : unknown\n</code></pre>"},{"location":"globals/box/#boxschema","title":"box.schema","text":"<pre><code>box.schema: {\n    space: { create = fun&lt;T, U&gt;(space_name: string, options: box.schema.create_space_options?) -&gt; space&lt;T,U&gt;, ... },\n    create_space: fun&lt;T, U&gt;(space_name: string, options: box.schema.create_space_options?) -&gt; space&lt;T,U&gt;,\n    upgrade: fun(),\n    downgrade: fun(version: string),\n    downgrade_versions: fun(),\n    downgrade_issues: fun(version: string),\n    user: { create = fun(username: string, options: {...}?), drop = fun(username: string, options: {...}?), ... },\n    role: { create = fun(role_name: string, options: {...}?), drop = fun(role_name: string, options: {...}?), ... },\n    sequence: { create = fun(name: string, options: box.schema.sequence.create_options?) -&gt; box.sequence, ... },\n    func: { create = fun(func_name: string, options: box.schema.func.create_options?), ... },\n}\n</code></pre> <p>Builtin <code>box.schema</code> submodule</p> <p>The <code>box.schema</code> submodule has data-definition functions for spaces, users, roles, function tuples, and sequences.</p>"},{"location":"globals/box/#boxtuple","title":"box.tuple","text":"<pre><code>box.tuple: {\n    new: fun(value: tuple_type[], options: {...}?) -&gt; tuple&lt;any,any&gt;,\n    is: fun(object: any) -&gt; boolean,\n    format: { new = fun(tuple_format: box.tuple.field_format[]) -&gt; box.tuple.format, ... },\n}\n</code></pre> <p>Builtin <code>box.tuple</code> submodule</p> <p>The <code>box.tuple</code> submodule provides read-only access for the <code>tuple</code> userdata type. It allows, for a single tuple: selective retrieval of the field contents, retrieval of information about size, iteration over all the fields, and conversion to a Lua table.</p> <p>How to convert tuples to/from Lua tables:</p> <p>This function illustrates how to convert tuples to/from Lua tables and lists of scalars:</p> <pre><code> tuple = box.tuple.new({scalar1, scalar2, ... scalar_n}) -- scalars to tuple\n lua_table = {tuple:unpack()}                            -- tuple to Lua table\n lua_table = tuple:totable()                             -- tuple to Lua table\n scalar1, scalar2, ... scalar_n = tuple:unpack()         -- tuple to scalars\n tuple = box.tuple.new(lua_table)                        -- Lua table to tuple\n</code></pre> <p>Then it will find the field that contains 'b', remove that field from the tuple, and display how many bytes remain in the tuple. The function uses Tarantool <code>box.tuple</code> functions <code>new()</code>, <code>unpack()</code>, <code>find()</code>, <code>transform()</code>, <code>bsize()</code>.</p> <pre><code> function example()\n     local tuple1, tuple2, lua_table_1, scalar1, scalar2, scalar3, field_number\n     local luatable1 = {}\n     tuple1 = box.tuple.new({'a', 'b', 'c'})\n     luatable1 = tuple1:totable()\n     scalar1, scalar2, scalar3 = tuple1:unpack()\n     tuple2 = box.tuple.new(luatable1[1],luatable1[2],luatable1[3])\n     field_number = tuple2:find('b')\n     tuple2 = tuple2:transform(field_number, 1)\n     return 'tuple2 = ' , tuple2 , ' # of bytes = ' , tuple2:bsize()\n end\n</code></pre> <p>... And here is what happens when one invokes the function:</p> <pre><code> tarantool&gt; example()\n ---\n - tuple2 =\n - ['a', 'c']\n - ' # of bytes = '\n - 5\n ...\n</code></pre>"},{"location":"globals/box/#boxcfg","title":"box.cfg","text":"<pre><code>box.cfg : box.cfg {\n    background: boolean?,\n    checkpoint_count: integer?,\n    checkpoint_interval: number?,\n    checkpoint_wal_threshold: number?,\n    coredump: boolean?,\n    custom_proc_title: string?,\n    box.cfg.election_mode: box.cfg.election_mode?,\n    feedback_enabled: boolean?,\n    feedback_host: string?,\n    feedback_interval: number?,\n    force_recovery: boolean?,\n    hot_standby: boolean?,\n    ...(+53)\n}\n</code></pre> <p>Builtin <code>box.cfg</code> submodule</p> <p>The <code>box.cfg</code> submodule is used for specifying server configuration parameters.</p> <p>To view the current configuration, say <code>box.cfg</code> without braces.</p> <pre><code> tarantool&gt; box.cfg\n ---\n - checkpoint_count: 2\n   too_long_threshold: 0.5\n   slab_alloc_factor: 1.05\n   memtx_max_tuple_size: 1048576\n   background: false\n   &lt;...&gt;\n ...\n</code></pre> <p>To set particular parameters, use the following syntax: <code>box.cfg{key = value [, key = value ...]}</code> (further referred to as <code>box.cfg{...}</code> for short). For example:</p> <pre><code> tarantool&gt; box.cfg{listen = 3301}\n</code></pre> <p>Parameters that are not specified in the <code>box.cfg{...}</code> call explicitly will be set to the default values.</p> <p>The first call to <code>box.cfg{...}</code> (with or without parameters) initiates Tarantool's database module <code>box</code>.</p> <p><code>box.cfg{...}</code> is also the command that reloads persistent data files into RAM upon restart once we have data.</p>"},{"location":"globals/box/#boxspace","title":"box.space","text":"<pre><code>box.space : box.spaces {\n    _user: space&lt;box.space._user_tuple,box.space._user_info&gt;,\n    _cluster: unknown,\n    _func: unknown,\n    _space: space&lt;box.space._space_tuple,box.space._space_info&gt;,\n    _index: space&lt;box.space._index_tuple,box.space._index_info&gt;,\n    _vindex: space&lt;box.space._vindex_tuple,box.space._vindex_info&gt;,\n    _priv: space&lt;box.space._priv_tuple,box.space._priv_info&gt;,\n    _vpriv: space&lt;box.space._vpriv_tuple,box.space._vpriv_info&gt;,\n    _schema: space&lt;box.space._schema_tuple,box.space._schema_info&gt;,\n    _sequence: space&lt;box.space._sequence_tuple,box.space._sequence_info&gt;,\n    _sequence_data: space&lt;box.space._sequence_data_tuple,box.space._sequence_data_info&gt;,\n    _vspace: space&lt;box.space._vspace_tuple,box.space._vspace_info&gt;,\n    ...(+7)\n}\n</code></pre> <p>Builtin <code>box.space</code> submodule.</p> <p>CRUD operations in Tarantool are implemented by the <code>box.space</code> submodule.</p> <p>It has the data-manipulation functions <code>select</code>, <code>insert</code>, <code>replace</code>, <code>update</code>, <code>upsert</code>, <code>delete</code>, <code>get</code>, <code>put</code>. It also has members, such as id, and whether or not a space is enabled.</p>"},{"location":"globals/box/#boxbackup","title":"box.backup","text":"<pre><code>box.backup: {\n    start: fun(n: number?) -&gt; string[],\n    stop: fun(),\n}\n</code></pre> <p>Builtin <code>box.backup</code> submodule</p> <p>The <code>box.backup</code> submodule contains two functions that are helpful for backup in certain situations.</p>"},{"location":"globals/box/#boxslab","title":"box.slab","text":"<pre><code>box.slab: {\n    info: fun() -&gt; box.slab.info,\n}\n</code></pre> <p>Builtin <code>box.slab</code> submodule</p> <p>The <code>box.slab</code> submodule provides access to slab allocator statistics.</p> <p>The slab allocator is the main allocator used to store tuples.</p> <p>This can be used to monitor the total memory usage and memory fragmentation.</p>"},{"location":"globals/box/#boxsession","title":"box.session","text":"<pre><code>box.session: {\n    id: fun() -&gt; number,\n    exists: fun(id: number) -&gt; boolean,\n    peer: fun(id: number?) -&gt; string?,\n    sync: fun() -&gt; number,\n    user: fun() -&gt; string,\n    type: fun() -&gt; box.session.type,\n    su: fun(user: string, func: string?) -&gt; any ...,\n    uid: fun() -&gt; number,\n    euid: fun() -&gt; number,\n    storage: table&lt;(number|string),any&gt;,\n    on_connect: fun(trigger_func: fun(...) -&gt; ...?, old_trigger_func: fun(...) -&gt; ...?) -&gt; fun(...) -&gt; ...?,\n    on_disconnect: fun(trigger_func: fun(...) -&gt; ...?, old_trigger_func: fun(...) -&gt; ...?) -&gt; fun(...) -&gt; ...?,\n    ...\n}\n</code></pre> <p>Builtin <code>box.session</code> submodule</p> <p>The <code>box.session</code> submodule allows querying the session state, writing to a session-specific temporary Lua table, or sending out-of-band messages, or setting up triggers which will fire when a session starts or ends.</p> <p>A session is an object associated with each client connection.</p>"},{"location":"globals/box/#boxstat","title":"box.stat","text":"<pre><code>box.stat : box.stat {\n    reset: function,\n    net: function,\n}\n</code></pre>"},{"location":"globals/box/#boxerror_2","title":"box.error","text":"<pre><code>box.error: {\n    new: fun(err: { code: number?, reason: string, type: string? }) -&gt; box.error,\n    last: fun() -&gt; box.error,\n}\n</code></pre> <p>Builtin <code>box.error</code> submodule.</p> <p>The <code>box.error</code> submodule can be used to work with errors in your application.</p> <p>For example, you can get the information about the last error raised by Tarantool or raise custom errors manually.</p> <p>The difference between raising an error using <code>box.error</code> and a Lua's built-in error function is that when the error reaches the client, its error code is preserved.</p> <p>In contrast, a Lua error would always be presented to the client as <code>ER_PROC_LUA</code>.</p> <p>Note:</p> <p>To learn how to handle errors in your application, see the handling errors section.</p> <p>When called without arguments, box.error() re-throws whatever the last error was.</p>"},{"location":"globals/box/#boxinfo","title":"box.info","text":"<pre><code>box.info : box.info {\n    id: integer,\n    uuid: string,\n    pid: integer,\n    uptime: integer,\n    status: (\"unconfigured\"|\"running\"|\"loading\"|\"orphan\"|\"hot_standby\"),\n    lsn: integer,\n    version: string,\n    ro: boolean,\n    package: string,\n    vclock: integer[],\n    replication: table&lt;integer,box.info.replica&gt;,\n    election: box.info.election,\n    memory: function,\n    ...(+6)\n}\n</code></pre> <p>Builtin <code>box.info</code> submodule</p> <p>The <code>box.info</code> submodule provides access to information about a running Tarantool instance.</p>"},{"location":"globals/box/#boxiproto","title":"box.iproto","text":"<pre><code>box.iproto: {\n    send: fun(sid: number, header: (table|string), body: (table|string)?) -&gt; integer,\n    ballot_key: box.iproto.ballot_key,\n    feature: table&lt;box.iproto.feature,integer&gt;,\n    flag: box.iproto.flag,\n    key: box.iproto.key,\n    metadata_key: box.iproto.metadata_key,\n    override: fun(request_type: box.iproto.type, handler: fun(...) -&gt; ...?),\n    protocol_features: table&lt;box.iproto.feature,boolean&gt;,\n    protocol_version: integer,\n    raft_key: box.iproto.raft_key,\n    type: box.iproto.type,\n}\n</code></pre> <p>Builtin <code>box.iproto</code> submodule</p> <p>Since 2.11.0</p> <p>The <code>box.iproto</code> submodule provides the ability to work with the network subsystem of Tarantool. It allows you to extend the <code>IPROTO</code> functionality from Lua.</p> <p>With this submodule, you can:</p> <ul> <li>Parse unknown IPROTO request types</li> <li>Send arbitrary IPROTO packets</li> <li>Override the behavior of the existing and unknown request types in the binary protocol</li> </ul> <p>The submodule exports all IPROTO constants and doc://features to Lua.</p>"},{"location":"globals/box/#boxctl","title":"box.ctl","text":"<pre><code>box.ctl: {\n    promote: fun(),\n    demote: fun(),\n    wait_rw: fun(timeout: number?),\n    wait_ro: fun(timeout: number?),\n    on_shutdown: fun(trigger_function: fun(...) -&gt; ...?, old_trigger_function: fun(...) -&gt; ...?) -&gt; fun(...) -&gt; ...?,\n    on_election: fun(trigger: function),\n    is_recovery_finished: fun() -&gt; boolean,\n    make_bootstrap_leader: fun(),\n    on_recovery_state: fun(trigger_function: fun(state: box.ctl.recovery_state)) -&gt; function?,\n    on_schema_init: fun(trigger_function: fun(...) -&gt; ...?, old_trigger_function: fun(...) -&gt; ...?) -&gt; function?,\n}\n</code></pre> <p>Builtin <code>box.ctl</code> submodule</p> <p>The <code>wait_ro</code> (wait until read-only) and <code>wait_rw</code> (wait until read-write) functions are useful during server initialization.</p> <p>To see whether a function is already in read-only or read-write mode, check :ref:<code>box.info.ro &lt;box_introspection-box_info&gt;</code>.</p> <p>A particular use is for :doc:<code>box.once() &lt;/reference/reference_lua/box_once&gt;</code>.</p> <p>For example, when a replica is initializing, it may call a <code>box.once()</code> function while the server is still in read-only mode, and fail to make changes that are necessary only once before the replica is fully initialized.</p> <p>This could cause conflicts between a master and a replica if the master is in read-write mode and the replica is in read-only mode. Waiting until \"read only mode = false\" solves this problem.</p>"},{"location":"globals/box/#boxindex","title":"box.index","text":"<pre><code>box.index : box.index.iterator {\n    EQ: integer = 0,\n    REQ: integer = 1,\n    ALL: integer = 2,\n    LT: integer = 3,\n    LE: integer = 4,\n    GE: integer = 5,\n    GT: integer = 6,\n    BITS_ALL_SET: integer = 7,\n    BITS_ANY_SET: integer = 8,\n    BITS_ALL_NOT_SET: integer = 9,\n    OVERLAPS: integer = 10,\n    NEIGHBOR: integer = 11,\n    ...(+2)\n}\n</code></pre>"},{"location":"globals/dostring/","title":"global dostring","text":"<pre><code>function dostring(\n  lua_chunk_string: string,\n  ...: any\n) -&gt; whatever any ...\n</code></pre> <p>@param <code>lua_chunk_string</code> - Lua code</p> <p>@param <code>...</code> - zero or more scalar values which will be appended to</p> <p>@return <code>whatever</code> - is returned by the Lua code chunk.</p> <p>Parse and execute an arbitrary chunk of Lua code. This function is mainly useful to define and run Lua code without having to introduce changes to the global Lua environment.</p>"},{"location":"globals/tonumber64/","title":"global tonumber64","text":"<pre><code>function tonumber64(value: (string|number)) -&gt;  (ffi.cdata*|number)\n</code></pre> <p>Convert a string or a Lua number to a 64-bit integer.</p>"},{"location":"modules/buffer/","title":"global buffer","text":"<p>Builtin <code>buffer</code> module</p> <p>The buffer module returns a dynamically resizable buffer which is solely for optional use by methods of the net.box module or the msgpack module.</p>"},{"location":"modules/buffer/#methods","title":"methods","text":""},{"location":"modules/buffer/#mibuf","title":"M.ibuf","text":"<pre><code>function M.ibuf(size: integer?) -&gt;  buffer\n</code></pre> <p>Create a new buffer</p>"},{"location":"modules/clock/","title":"global clock","text":"<p>Builtin <code>clock</code> module</p> <p>The <code>clock</code> module returns time values derived from the Posix / C CLOCK_GETTIME_ function or equivalent. Most functions in the module return a number of seconds; functions whose names end in \"64\" return a 64-bit number of nanoseconds.</p>"},{"location":"modules/clock/#methods","title":"methods","text":""},{"location":"modules/clock/#mtime","title":"M.time","text":"<pre><code>function M.time() -&gt;  number\n</code></pre> <p>Get the wall clock time in seconds.</p> <p>The wall clock time. Derived from C function <code>clock_gettime(CLOCK_REALTIME)</code>.</p> <p>Example:</p> <pre><code> -- This will print an approximate number of years since 1970.\n clock = require('clock')\n print(clock.time() / (365*24*60*60))\n</code></pre>"},{"location":"modules/clock/#mrealtime","title":"M.realtime","text":"<pre><code>function M.realtime() -&gt;  number\n</code></pre> <p>Get the wall clock time in seconds.</p> <p>The wall clock time. Derived from C function <code>clock_gettime(CLOCK_REALTIME)</code>.</p> <p>Example:</p> <pre><code> -- This will print an approximate number of years since 1970.\n clock = require('clock')\n print(clock.realtime() / (365*24*60*60))\n</code></pre>"},{"location":"modules/clock/#mtime64","title":"M.time64","text":"<pre><code>function M.time64() -&gt;  uint64_t\n</code></pre> <p>Get the wall clock time in nanoseconds.</p> <p>The wall clock time. Derived from C function <code>clock_gettime(CLOCK_REALTIME)</code>.</p> <p>Example:</p> <pre><code> -- This will print an approximate number of years since 1970.\n clock = require('clock')\n print(clock.time() / (365*24*60*60))\n</code></pre>"},{"location":"modules/clock/#mrealtime64","title":"M.realtime64","text":"<pre><code>function M.realtime64() -&gt;  uint64_t\n</code></pre> <p>Get the wall clock time in nanoseconds.</p> <p>The wall clock time. Derived from C function <code>clock_gettime(CLOCK_REALTIME)</code>.</p> <p>Example:</p> <pre><code> -- This will print an approximate number of years since 1970.\n clock = require('clock')\n print(clock.realtime() / (365*24*60*60))\n</code></pre>"},{"location":"modules/clock/#mmonotonic","title":"M.monotonic","text":"<pre><code>function M.monotonic() -&gt;  number\n</code></pre> <p>Get the monotonic time in seconds.</p> <p>The monotonic time. Derived from C function <code>clock_gettime(CLOCK_MONOTONIC)</code>.</p> <p>Monotonic time is similar to wall clock time but is not affected by changes to or from daylight saving time, or by changes done by a user.</p> <p>This is the best function to use with benchmarks that need to calculate elapsed time.</p> <p>Example:</p> <pre><code> -- This will print seconds since the start.\n clock = require('clock')\n print(clock.monotonic())\n</code></pre> <p>@see clock.monotonic64</p>"},{"location":"modules/clock/#mmonotonic64","title":"M.monotonic64","text":"<pre><code>function M.monotonic64() -&gt;  uint64_t\n</code></pre> <p>Get the monotonic time in nanoseconds.</p> <p>The monotonic time. Derived from C function <code>clock_gettime(CLOCK_MONOTONIC)</code>.</p> <p>Monotonic time is similar to wall clock time but is not affected by changes to or from daylight saving time, or by changes done by a user.</p> <p>This is the best function to use with benchmarks that need to calculate elapsed time.</p> <p>Example:</p> <pre><code> -- This will print nanoseconds since the start.\n clock = require('clock')\n print(clock.monotonic64())\n</code></pre> <p>@see clock.monotonic</p>"},{"location":"modules/clock/#mproc","title":"M.proc","text":"<pre><code>function M.proc() -&gt;  number\n</code></pre> <p>Get the processor time in seconds.</p> <p>Derived from C function <code>clock_gettime(CLOCK_PROCESS_CPUTIME_ID)</code>.</p> <p>This is the best function to use with benchmarks that need to calculate how much time has been spent within a CPU.</p> <p>Example:</p> <pre><code> -- This will print seconds in the CPU since the start.\n clock = require('clock')\n print(clock.proc())\n</code></pre> <p>@see clock.proc64</p>"},{"location":"modules/clock/#mproc64","title":"M.proc64","text":"<pre><code>function M.proc64() -&gt;  uint64_t\n</code></pre> <p>Get the processor time in nanoseconds.</p> <p>Derived from C function <code>clock_gettime(CLOCK_PROCESS_CPUTIME_ID)</code>.</p> <p>This is the best function to use with benchmarks that need to calculate how much time has been spent within a CPU.</p> <p>Example:</p> <pre><code> -- This will print nanoseconds in the CPU since the start.\n clock = require('clock')\n print(clock.proc64())\n</code></pre> <p>@see clock.proc</p>"},{"location":"modules/clock/#mthread","title":"M.thread","text":"<pre><code>function M.thread() -&gt;  number\n</code></pre> <p>Get the thread time in seconds.</p> <p>The thread time. Derived from C function <code>clock_gettime(CLOCK_THREAD_CPUTIME_ID)</code>.</p> <p>This is the best function to use with benchmarks that need to calculate how much time has been spent within a thread within a CPU.</p> <p>Example:</p> <pre><code> -- This will print seconds in the thread since the start.\n clock = require('clock')\n print(clock.thread())\n</code></pre> <p>@see clock.thread64</p>"},{"location":"modules/clock/#mthread64","title":"M.thread64","text":"<pre><code>function M.thread64() -&gt;  uint64_t\n</code></pre> <p>Get the thread time in nanoseconds.</p> <p>The thread time. Derived from C function <code>clock_gettime(CLOCK_THREAD_CPUTIME_ID)</code>.</p> <p>This is the best function to use with benchmarks that need to calculate how much time has been spent within a thread within a CPU.</p> <p>Example:</p> <pre><code> -- This will print nanoseconds in the thread since the start.\n clock = require('clock')\n print(clock.thread64())\n</code></pre> <p>@see clock.thread</p>"},{"location":"modules/clock/#mbench","title":"M.bench","text":"<pre><code>function M.bench(\n  func: fun(...: T ...),\n  ...: T ...\n) -&gt;  table\n</code></pre> <p>Measure the time a function takes within a processor.</p> <p>The time that a function takes within a processor. This function uses <code>clock.proc()</code>, therefore it calculates elapsed CPU time. Therefore it is not useful for showing actual elapsed time.</p> <p>Example:</p> <pre><code> -- Benchmark a function which sleeps 10 seconds.\n -- NB: bench() will not calculate sleep time.\n -- So the returned value will be {a number less than 10, 88}.\n clock = require('clock')\n fiber = require('fiber')\n function f(param)\n   fiber.sleep(param)\n   return 88\n end\n clock.bench(f, 10)\n</code></pre> <p>@see clock.proc</p>"},{"location":"modules/config/","title":"global config","text":"<p>Builtin <code>config</code> module</p> <p>Since 3.0.0</p> <p>The <code>config</code> module provides the ability to work with an instance's configuration.</p> <p>For example, you can determine whether the current instance is up and running without errors after applying the cluster's configuration.</p> <p>By using the <code>config.storage</code> role, you can set up a Tarantool-based centralized configuration storage and interact with this storage using the <code>config</code> module API.</p>"},{"location":"modules/config/#methods","title":"methods","text":""},{"location":"modules/config/#mget","title":"M.get","text":"<pre><code>function M.get(\n  param: (string|string[]),\n  opts: { instance: string? }\n) -&gt;  any\n</code></pre> <p>Get a configuration applied to the current or remote instance.</p> <p>Note the following differences between getting a configuration for the current and remote instance: * For the current instance, <code>get()</code> returns its configuration considering environment variables. * For a remote instance, <code>get()</code> only considers a cluster configuration and ignores environment variables.</p> <p>Examples:</p> <p>The example below shows how to get the full instance configuration:</p> <pre><code> app:instance001&gt; require('config'):get()\n ---\n - fiber:\n   io_collect_interval: null\n   too_long_threshold: 0.5\n   top:\n   enabled: false\n   # Other configuration values\n   # ...\n</code></pre> <p>This example shows how to get an <code>iproto.listen</code> option value:</p> <pre><code> app:instance001&gt; require('config'):get('iproto.listen')\n ---\n - - uri: 127.0.0.1:3301\n ...\n</code></pre> <p><code>config.get()</code> can also be used in application code to get the value of a custom configuration option.</p>"},{"location":"modules/config/#minfo","title":"M.info","text":"<pre><code>function M.info(version: \"v1\"?) -&gt;  config.info\n</code></pre> <p>Get the current instance's state in regard to configuration.</p> <p>Below are a few examples demonstrating how the <code>info()</code> output might look.</p> <p>Example: no configuration warnings or errors</p> <p>In the example below, an instance's state is <code>ready</code> and no warnings are shown:</p> <pre><code> app:instance001&gt; require('config'):info('v2')\n ---\n - status: ready\n   meta:\n     last: &amp;0 []\n     active: *0\n   alerts: []\n ...\n</code></pre> <p>Example: configuration warnings</p> <p>In the example below, the instance's state is <code>check_warnings</code>. The <code>alerts</code> section informs that privileges to the <code>bands</code> space for <code>sampleuser</code> cannot be granted because the <code>bands</code> space has not been created yet:</p> <pre><code> app:instance001&gt; require('config'):info('v2')\n ---\n - status: check_warnings\n   meta:\n     last: &amp;0 []\n     active: *0\n   alerts:\n   - type: warn\n     message: box.schema.user.grant(\"sampleuser\", \"read,write\", \"space\", \"bands\") has\n     failed because either the object has not been created yet, a database schema\n     upgrade has not been performed, or the privilege write has failed (separate\n     alert reported)\n     timestamp: 2024-07-03T18:09:18.826138+0300\n ...\n</code></pre> <p>This warning is cleared when the <code>bands</code> space is created.</p> <p>Example: configuration errors</p> <p>In the example below, the instance's state is <code>check_errors</code>. The <code>alerts</code> section informs that the <code>log.level</code> configuration option has an incorrect value:</p> <pre><code> app:instance001&gt; require('config'):info('v2')\n ---\n - status: check_errors\n   meta:\n     last: []\n     active: []\n   alerts:\n   - type: error\n     message: '[cluster_config] log.level: Got 8, but only the following values are\n     allowed: 0, fatal, 1, syserror, 2, error, 3, crit, 4, warn, 5, info, 6, verbose,\n     7, debug'\n     timestamp: 2024-07-03T18:13:19.755454+0300\n ...\n</code></pre> <p>Example: configuration errors (centralized configuration storage)</p> <p>In this example, the <code>meta</code> field includes information about a centralized storage the instance takes a configuration from:</p> <pre><code> app:instance001&gt; require('config'):info('v2')\n ---\n - status: check_errors\n   meta:\n     last:\n       etcd:\n         mod_revision:\n           /myapp/config/all: 5\n         revision: 5\n     active:\n       etcd:\n         mod_revision:\n           /myapp/config/all: 2\n         revision: 4\n   alerts:\n   - type: error\n     message: 'etcd source: invalid config at key \"/myapp/config/all\": [cluster_config]\n     groups.group001.replicasets.replicaset001.instances.instance001.log.level: Got\n     8, but only the following values are allowed: 0, fatal, 1, syserror, 2, error,\n     3, crit, 4, warn, 5, info, 6, verbose, 7, debug'\n     timestamp: 2024-07-03T15:22:06.438275Z\n     ...\n</code></pre>"},{"location":"modules/config/#minstance_uri","title":"M.instance_uri","text":"<pre><code>function M.instance_uri(\n  uri_type: (\"peer\"|\"sharding\"),\n  opts: { instance: string? }\n) -&gt;  uri\n</code></pre> <p>Get a URI of the current or remote instance.</p> <p>Note: the resulting URI object can be passed to the connect() function.</p> <p>Example:</p> <p>The example below shows how to get a URI used to advertise <code>storage-b-003</code> to other cluster members:</p> <pre><code> local config = require('config')\n config:instance_uri('peer', { instance = 'storage-b-003' })\n</code></pre>"},{"location":"modules/console/","title":"global console","text":"<p>Builtin <code>console</code> module</p> <p>The console module allows one Tarantool instance to access another Tarantool instance, and allows one Tarantool instance to start listening on an <code>admin port</code>.</p>"},{"location":"modules/console/#methods","title":"methods","text":""},{"location":"modules/console/#mconnect","title":"M.connect","text":"<pre><code>function M.connect(uri: uri_like)\n</code></pre> <p>Connect to the instance at URI.</p> <p>Change the prompt from '<code>tarantool&gt;</code>' to ':samp:<code>{uri}&gt;</code>', and act henceforth as a client until the user ends the session or types <code>control-D</code>.</p> <p>The console.connect function allows one Tarantool instance, in interactive mode, to access another Tarantool instance. Subsequent requests will appear to be handled locally, but in reality the requests are being sent to the remote instance and the local instance is acting as a client. Once connection is successful, the prompt will change and subsequent requests are sent to, and executed on, the remote instance. Results are displayed on the local instance. To return to local mode, enter <code>control-D</code>.</p> <p>If the Tarantool instance at <code>uri</code> requires authentication, the connection might look something like: <code>console.connect('admin:secretpassword@distanthost.com:3301')</code>.</p> <p>There are no restrictions on the types of requests that can be entered, except those which are due to privilege restrictions -- by default the login to the remote instance is done with user name = 'guest'. The remote instance could allow for this by granting at least one privilege: <code>box.schema.user.grant('guest','execute','universe')</code>.</p> <p>Possible errors: the connection will fail if the target Tarantool instance was not initiated with <code>box.cfg{listen=...}</code>.</p> <p>Example:</p> <pre><code> tarantool&gt; console = require('console')\n ---\n ...\n tarantool&gt; console.connect('198.18.44.44:3301')\n ---\n ...\n 198.18.44.44:3301&gt; -- prompt is telling us that instance is remote\n</code></pre>"},{"location":"modules/console/#mlisten","title":"M.listen","text":"<pre><code>function M.listen(uri: uri_like)\n</code></pre> <p>Listen for incoming requests.</p> <p>The primary way of listening for incoming requests is via the connection-information string, or URI, specified in <code>box.cfg{listen=...}</code>.</p> <p>The alternative way of listening is via the URI specified in <code>console.listen(...)</code>. This alternative way is called \"administrative\" or simply :ref:<code>\"admin port\" &lt;admin-security&gt;</code>. The listening is usually over a local host with a Unix domain socket.</p> <p>:param string uri: the URI of the local instance</p> <p>The \"admin\" address is the URI to listen on. It has no default value, so it must be specified if connections will occur via an admin port. The parameter is expressed with URI = Universal Resource Identifier format, for example \"/tmpdir/unix_domain_socket.sock\", or a numeric TCP port. Connections are often made with telnet. A typical port value is 3313.</p> <p>Example:</p> <pre><code> tarantool&gt; console = require('console')\n ---\n ...\n tarantool&gt; console.listen('unix/:/tmp/X.sock')\n ... main/103/console/unix/:/tmp/X I&gt; started\n ---\n - fd: 6\n name:\n host: unix/\n family: AF_UNIX\n type: SOCK_STREAM\n protocol: 0\n port: /tmp/X.sock\n ...\n</code></pre>"},{"location":"modules/console/#mstart","title":"M.start","text":"<pre><code>function M.start()\n</code></pre> <p>Start the console on the current interactive terminal.</p> <p>Example:</p> <p>A special use of <code>console.start()</code> is with <code>initialization files</code>.</p> <p>Normally, if one starts the Tarantool instance with tarantool initialization file there is no console. This can be remedied by adding these lines at the end of the initialization file:</p> <pre><code> local console = require('console')\n console.start()\n</code></pre>"},{"location":"modules/console/#mac","title":"M.ac","text":"<pre><code>function M.ac(auto_completion_flag: boolean)\n</code></pre> <p>Set the auto-completion flag.</p> <p>If auto-completion is <code>true</code>, and the user is using Tarantool as a client or the user is using Tarantool via <code>console.connect()</code>, then hitting the TAB key may cause tarantool to complete a word automatically. The default auto-completion value is <code>true</code>.</p>"},{"location":"modules/console/#mdelimiter","title":"M.delimiter","text":"<pre><code>function M.delimiter(marker)\n</code></pre> <p>Set a custom end-of-request marker for Tarantool console.</p> <p>The default end-of-request marker is a newline (line feed).</p> <p>Custom markers are not necessary because Tarantool can tell when a multi-line request has not ended (for example, if it sees that a function declaration does not have an end keyword). Nonetheless for special needs, or for entering multi-line requests in older Tarantool versions, you can change the end-of-request marker. As a result, newline alone is not treated as end of request.</p>"},{"location":"modules/console/#mget_default_output","title":"M.get_default_output","text":"<pre><code>function M.get_default_output() -&gt; format { fmt: (\"yaml\"|\"lua\") }\n</code></pre> <p>Get default output format.</p> <p>Return the current default output format.</p>"},{"location":"modules/console/#mset_default_output","title":"M.set_default_output","text":"<pre><code>function M.set_default_output(format: { fmt: (\"yaml\"|\"lua\") })\n</code></pre> <p>Set default output format.</p>"},{"location":"modules/console/#meos","title":"M.eos","text":"<pre><code>function M.eos(str)\n</code></pre> <p>Set or access the end-of-output string if default output is 'lua'.</p> <p>This is the string that appears at the end of output in a response to any Lua request.</p> <p>The default value is <code>;</code> semicolon. Saying <code>eos()</code> will return the current value.</p> <p>For example, after <code>require('console').eos('!!')</code> responses will end with '!!'.</p>"},{"location":"modules/csv/","title":"global csv","text":"<p>Builtin <code>csv</code> module</p> <p>The <code>csv</code> module handles records formatted according to Comma-Separated-Values (CSV) rules.</p> <p>The default formatting rules are: * Lua escape sequences such as <code>\\\\n</code> or <code>\\\\10</code> are legal within strings but not within files. * Commas designate end-of-field. * Line feeds, or line feeds plus carriage returns, designate end-of-record. * Leading or trailing spaces are ignored. * Quote marks may enclose fields or parts of fields. * When enclosed by quote marks, commas and line feeds and spaces are treated as ordinary characters, and a pair of quote marks \"\" is treated as a single quote mark.</p>"},{"location":"modules/csv/#methods","title":"methods","text":""},{"location":"modules/csv/#mload","title":"M.load","text":"<pre><code>function M.load(\n  readable: (string|{ read: fun(...) -&gt; ... }),\n  options: csv.options?\n) -&gt; loaded_value table\n</code></pre> <p>Get CSV-formatted input from <code>readable</code> and return a table as output. </p> <p>Usually <code>readable</code> is either a string or a file opened for reading.</p> <p>Usually <code>options</code> are not specified.</p> <p>Example:</p> <p>Readable string has 3 fields, field#2 has comma and space so use quote marks:</p> <pre><code> tarantool&gt; csv = require('csv')\n ---\n ...\n tarantool&gt; csv.load('a,\"b,c \",d')\n ---\n - - - a\n     - 'b,c '\n     - d\n ...\n</code></pre> <p>Readable string contains 2-byte character = Cyrillic Letter Palochka: (This displays a palochka if and only if character set = UTF-8.)</p> <pre><code> tarantool&gt; csv.load('a\\\\211\\\\128b')\n ---\n - - - a\\211\\128b\n ...\n</code></pre> <p>Semicolon instead of comma for the delimiter:</p> <pre><code> tarantool&gt; csv.load('a,b;c,d', {delimiter = ';'})\n ---\n - - - a,b\n     - c,d\n ...\n</code></pre> <p>Readable file :file:<code>./file.csv</code> contains two CSV records. Explanation of <code>fio</code> is in section fio. Source CSV file and example respectively:</p> <pre><code>\n tarantool&gt; -- input in file.csv is:\n tarantool&gt; -- a,\"b,c \",d\n tarantool&gt; -- a\\\\211\\\\128b\n tarantool&gt; fio = require('fio')\n ---\n ...\n tarantool&gt; f = fio.open('./file.csv', {'O_RDONLY'})\n ---\n ...\n tarantool&gt; csv.load(f, {chunk_size = 4096})\n ---\n - - - a\n     - 'b,c '\n     - d\n   - - a\\\\211\\\\128b\n ...\n tarantool&gt; f:close()\n ---\n - true\n ...\n</code></pre>"},{"location":"modules/csv/#mdump","title":"M.dump","text":"<pre><code>function M.dump(\n  csv_table: table,\n  options: csv.options?,\n  writable: { write: fun(...) -&gt; ... }?\n) -&gt; dupmed_value string\n</code></pre> <p>@param <code>csv_table</code> - a table which can be formatted according to the CSV</p> <p>Get table input and return a CSV-formatted string as output. </p> <p>Or, get table input from <code>csv_table</code> and put the output in <code>writable</code>. </p> <p>Usually <code>options</code> are not specified.</p> <p>Usually <code>writable</code>, if specified, is a file opened for writing. <code>csv.dump()</code> is the reverse of <code>csv.load()</code>.</p> <p>Example:</p> <p>CSV-table has 3 fields, field#2 has \",\" so result has quote marks</p> <pre><code> tarantool&gt; csv = require('csv')\n ---\n ...\n tarantool&gt; csv.dump({'a','b,c ','d'})\n ---\n - 'a,\"b,c \",d\n\n '\n ...\n</code></pre> <p>Round Trip: from string to table and back to string</p> <pre><code> tarantool&gt; csv_table = csv.load('a,b,c')\n ---\n ...\n tarantool&gt; csv.dump(csv_table)\n ---\n - 'a,b,c\n\n '\n ...\n</code></pre>"},{"location":"modules/csv/#miterate","title":"M.iterate","text":"<pre><code>function M.iterate(\n  readable: (string|{ read: fun(...) -&gt; ... }),\n  options: csv.options?\n) -&gt; iter fun(k: integer) -&gt; any\n</code></pre> <p>Iterate through CSV records.</p> <p>Form a Lua iterator function for going through CSV records one field at a time.</p> <p>Use of an iterator is strongly recommended if the amount of data is large (ten or more megabytes).</p> <p>Example:</p> <p><code>csv.iterate()</code> is the low level of <code>csv.load()</code> and <code>csv.dump()</code>.</p> <p>To illustrate that, here is a function which is the same as the <code>csv.load()</code> function, as seen in the Tarantool source code.</p> <pre><code> tarantool&gt; load = function(readable, opts)\n          &gt;   opts = opts or {}\n          &gt;   local result = {}\n          &gt;   for i, tup in csv.iterate(readable, opts) do\n          &gt;     result[i] = tup\n          &gt;   end\n          &gt;   return result\n          &gt; end\n ---\n ...\n tarantool&gt; load('a,b,c')\n ---\n - - - a\n     - b\n     - c\n ...\n</code></pre>"},{"location":"modules/datetime/","title":"global datetime","text":"<p>Builtin <code>datetime</code> module</p> <p>The <code>datetime</code> module provides support for the datetime and interval data types.</p> <p>It allows creating the date and time values either via the object interface or via parsing string values conforming to the ISO-8601 standard.</p>"},{"location":"modules/datetime/#methods","title":"methods","text":""},{"location":"modules/datetime/#mnew","title":"M.new","text":"<pre><code>function M.new(units: datetime.units?) -&gt; datetime_obj datetime\n</code></pre> <p>Create a datetime object from a table of time units.</p> <p>Default values:</p> <ul> <li><code>nsec: 0</code></li> <li><code>sec: 0</code></li> <li><code>min: 0</code></li> <li><code>hour: 1</code></li> <li><code>day: 1</code></li> <li><code>year: 1970</code></li> <li><code>timestamp: 0</code></li> <li><code>tzoffset: 0</code></li> <li><code>tz: nil</code></li> </ul>"},{"location":"modules/datetime/#mparse","title":"M.parse","text":"<pre><code>function M.parse(\n  input_string: string,\n  opts: { format: (\"iso8601\"|\"rfc3339\"|string), tz: string, tzoffset: integer }\n)\n</code></pre> <p>@param <code>input_string</code> - string with the date and time information.</p> <p>Convert an input string with the date and time information into a <code>datetime</code> object.</p> <p>The input string should be formatted according to one of the following standards: * ISO 8601. * RFC 3339. * Extended <code>strftime</code> -- see description of the <code>format()</code> for details.</p> <p>By default fields that are not specified are equal to appropriate values in a Unix time.</p> <p>Leap second is supported, see a section leap second.</p> <p>Example:</p> <pre><code> tarantool&gt; datetime.parse('1970-01-01T00:00:00Z')\n ---\n - 1970-01-01T00:00:00Z\n - 20\n ...\n\n tarantool&gt; t = datetime.parse('1970-01-01T00:00:00', {format = 'iso8601', tzoffset = 180})\n\n tarantool&gt; t\n ---\n - 1970-01-01T00:00:00+0300\n ...\n\n tarantool&gt; t = datetime.parse('2017-12-27T18:45:32.999999-05:00', {format = 'rfc3339'})\n\n tarantool&gt; t\n ---\n - 2017-12-27T18:45:32.999999-0500\n ...\n\n tarantool&gt; T = datetime.parse('Thu Jan  1 03:00:00 1970', {format = '%c'})\n\n tarantool&gt; T\n ---\n - 1970-01-01T03:00:00Z\n ...\n\n tarantool&gt; T = datetime.parse('12/31/2020', {format = '%m/%d/%y'})\n\n tarantool&gt; T\n ---\n - 2020-12-31T00:00:00Z\n ...\n\n tarantool&gt; T = datetime.parse('1970-01-01T03:00:00.125000000+0300', {format = '%FT%T.%f%z'})\n\n tarantool&gt; T\n ---\n - 1970-01-01T03:00:00.125+0300\n ...\n\n tarantool&gt; dt = datetime.parse('01:01:01 MSK', {format ='%H:%M:%S %Z'})\n\n ---\n ...\n\n tarantool&gt; dt.year\n ---\n - 1970\n ...\n\n tarantool&gt; dt.month\n ---\n - 1\n ...\n\n tarantool&gt; dt.wday\n ---\n - 5\n ...\n\n tarantool&gt; dt.tz\n ---\n - MSK\n ...\n</code></pre>"},{"location":"modules/datetime/#fields","title":"fields","text":""},{"location":"modules/datetime/#minterval","title":"M.interval","text":"<pre><code>M.interval: {\n    new: fun(units: datetime.interval.units?) -&gt; datetime.interval,\n}\n</code></pre> <p>Builtin <code>datetime.interval</code> submodule</p> <p>The <code>datetime</code> module enables creating of objects of two types: <code>datetime</code> and <code>interval</code>.</p> <p>If you need to shift the <code>datetime</code> object values, you can use either the modifier methods, that is, the <code>datetime_object:add()</code> or <code>datetime_object:sub()</code> methods, or apply interval arithmetic using overloaded <code>+</code> (<code>__add</code>) or <code>-</code> (<code>__sub</code>) methods.</p> <p><code>datetime_object:add()</code>/<code>datetime_object:sub()</code> modify the current object, but <code>+</code>/<code>-</code> create copy of the object as the operation result.</p>"},{"location":"modules/decimal/","title":"global decimal","text":"<p>Builtin <code>decimal</code> module</p> <p>The <code>decimal</code> module has functions for working with exact numbers.</p> <p>This is important when numbers are large or even the slightest inaccuracy is unacceptable.</p> <p>Example: Lua calculates <code>0.16666666666667 * 6</code> with floating-point so the result is 1.</p> <p>But with the decimal module (using <code>decimal.new</code> to convert the number to decimal type) <code>decimal.new('0.16666666666667') * 6</code> is 1.00000000000002.</p>"},{"location":"modules/decimal/#methods","title":"methods","text":""},{"location":"modules/decimal/#mabs","title":"M.abs","text":"<pre><code>function M.abs(n: decimal_like) -&gt;  decimal\n</code></pre> <p>Returns absolute value of a decimal number.</p> <p>Example: if <code>a</code> is <code>-1</code> then <code>decimal.abs(a)</code> returns <code>1</code>.</p>"},{"location":"modules/decimal/#mexp","title":"M.exp","text":"<pre><code>function M.exp(n: decimal_like) -&gt;  decimal\n</code></pre> <p>Returns e raised to the power of a decimal number.</p> <p>Example: if <code>a</code> is <code>1</code> then <code>decimal.exp(a)</code> returns <code>2.7182818284590452353602874713526624978</code>.</p> <p>Compare <code>math.exp(1)</code> from the Lua math library, which returns <code>2.718281828459</code>.</p>"},{"location":"modules/decimal/#mis_decimal","title":"M.is_decimal","text":"<pre><code>function M.is_decimal(n: any) -&gt;  boolean\n</code></pre> <p>Check if the object is decimal.</p> <p>Returns <code>true</code> if the specified value is a decimal, and <code>false</code> otherwise.</p> <p>Example: if <code>a</code> is <code>123</code> then <code>decimal.is_decimal(a)</code> returns <code>false</code>.</p> <p>If <code>a</code> is <code>decimal.new(123)</code> then <code>decimal.is_decimal(a)</code> returns <code>true</code>.</p>"},{"location":"modules/decimal/#mln","title":"M.ln","text":"<pre><code>function M.ln(n: decimal_like) -&gt;  decimal\n</code></pre> <p>Get natural logarithm of a decimal number.</p> <p>Example: if <code>a</code> is <code>1</code> then <code>decimal.ln(a)</code> returns <code>0</code>.</p>"},{"location":"modules/decimal/#mnew","title":"M.new","text":"<pre><code>function M.new(n: decimal_like) -&gt;  decimal\n</code></pre> <p>Get the value of the input as a decimal number.</p> <p>Example: if <code>a</code> is <code>1E-1</code> then <code>decimal.new(a)</code> returns <code>0.1</code>.</p>"},{"location":"modules/decimal/#mprecision","title":"M.precision","text":"<pre><code>function M.precision(n: decimal_like) -&gt;  number\n</code></pre> <p>Get the number of digits of a decimal number.</p> <p>Example: if <code>a</code> is <code>123.4560</code> then <code>decimal.precision(a)</code> returns <code>7</code>.</p>"},{"location":"modules/decimal/#mrescale","title":"M.rescale","text":"<pre><code>function M.rescale(\n  n: decimal,\n  new_scale: number\n) -&gt;  decimal\n</code></pre> <p>Evaluate rounding or padding to a fixed amount of the post-decimal digits of a decimal number.</p> <p>If the number of post-decimal digits is greater than new-scale, then rounding occurs. The rounding rule is: round half away from zero.</p> <p>If the number of post-decimal digits is less than new-scale, then padding of zeros occurs.</p> <p>Example: if <code>a</code> is <code>-123.4550</code> then <code>decimal.rescale(a, 2)</code>  returns <code>-123.46</code>, and <code>decimal.rescale(a, 5)</code> returns <code>-123.45500</code>.</p>"},{"location":"modules/decimal/#mscale","title":"M.scale","text":"<pre><code>function M.scale(\n  n: decimal_like,\n  new_scale\n) -&gt; scale number\n</code></pre> <p>Get the number of post-decimal digits of a decimal number.</p> <p>Example: if <code>a</code> is <code>123.4560</code> then <code>decimal.scale(a)</code> returns <code>4</code>.</p>"},{"location":"modules/decimal/#mlog10","title":"M.log10","text":"<pre><code>function M.log10(n: decimal_like) -&gt;  decimal\n</code></pre> <p>Get the number of digits of a decimal number.</p> <p>Example: if <code>a</code> is <code>123.4560</code> then <code>decimal.precision(a)</code> returns <code>7</code>.</p>"},{"location":"modules/decimal/#msqrt","title":"M.sqrt","text":"<pre><code>function M.sqrt(n: decimal_like) -&gt;  decimal\n</code></pre> <p>Calculate the square root of a decimal number.</p> <p>Example: if <code>a</code> is <code>2</code> then <code>decimal.sqrt(a)</code> returns <code>1.4142135623730950488016887242096980786</code>.</p>"},{"location":"modules/decimal/#mtrim","title":"M.trim","text":"<pre><code>function M.trim(n: decimal) -&gt;  decimal\n</code></pre> <p>Remove trailing post-decimal zeros of a decimal number.</p> <p>Example: if <code>a</code> is <code>2.20200</code> then <code>decimal.trim(a)</code> returns <code>2.202</code>.</p>"},{"location":"modules/errno/","title":"global errno","text":"<p>Builtin <code>errno</code> module.</p> <p>The errno module is typically used within a function or within a Lua program, in association with a module whose functions can return operating-system errors, such as fio.</p>"},{"location":"modules/errno/#methods","title":"methods","text":""},{"location":"modules/errno/#errnostrerror","title":"errno.strerror","text":"<pre><code>function errno.strerror(code: integer?) -&gt;  string\n</code></pre> <p>Return a string, given an error number.</p>"},{"location":"modules/errno/#fields","title":"fields","text":""},{"location":"modules/errno/#errnoe2big","title":"errno.E2BIG","text":"<pre><code>errno.E2BIG : integer\n</code></pre> <p>Argument list too long (POSIX.1-2001).</p>"},{"location":"modules/errno/#errnoeacces","title":"errno.EACCES","text":"<pre><code>errno.EACCES : integer\n</code></pre> <p>Permission denied (POSIX.1-2001).</p>"},{"location":"modules/errno/#errnoeaddrinuse","title":"errno.EADDRINUSE","text":"<pre><code>errno.EADDRINUSE : integer\n</code></pre> <p>Address already in use (POSIX.1-2001).</p>"},{"location":"modules/errno/#errnoeaddrnotavail","title":"errno.EADDRNOTAVAIL","text":"<pre><code>errno.EADDRNOTAVAIL : integer\n</code></pre> <p>Address not available (POSIX.1-2001).</p>"},{"location":"modules/errno/#errnoeafnosupport","title":"errno.EAFNOSUPPORT","text":"<pre><code>errno.EAFNOSUPPORT : integer\n</code></pre> <p>Address family not supported (POSIX.1-2001).</p>"},{"location":"modules/errno/#errnoeagain","title":"errno.EAGAIN","text":"<pre><code>errno.EAGAIN : integer\n</code></pre> <p>Resource temporarily unavailable (may be the same value as EWOULDBLOCK) (POSIX.1-2001).</p>"},{"location":"modules/errno/#errnoealready","title":"errno.EALREADY","text":"<pre><code>errno.EALREADY : integer\n</code></pre> <p>Connection already in progress (POSIX.1-2001).</p>"},{"location":"modules/errno/#errnoebadf","title":"errno.EBADF","text":"<pre><code>errno.EBADF : integer\n</code></pre> <p>Bad file descriptor (POSIX.1-2001).</p>"},{"location":"modules/errno/#errnoebadmsg","title":"errno.EBADMSG","text":"<pre><code>errno.EBADMSG : integer\n</code></pre> <p>Bad message (POSIX.1-2001).</p>"},{"location":"modules/errno/#errnoebusy","title":"errno.EBUSY","text":"<pre><code>errno.EBUSY : integer\n</code></pre> <p>Device or resource busy (POSIX.1-2001).</p>"},{"location":"modules/errno/#errnoecanceled","title":"errno.ECANCELED","text":"<pre><code>errno.ECANCELED : integer\n</code></pre> <p>Operation canceled (POSIX.1-2001).</p>"},{"location":"modules/errno/#errnoechild","title":"errno.ECHILD","text":"<pre><code>errno.ECHILD : integer\n</code></pre> <p>No child processes (POSIX.1-2001).</p>"},{"location":"modules/errno/#errnoeconnaborted","title":"errno.ECONNABORTED","text":"<pre><code>errno.ECONNABORTED : integer\n</code></pre> <p>Connection aborted (POSIX.1-2001).</p>"},{"location":"modules/errno/#errnoeconnrefused","title":"errno.ECONNREFUSED","text":"<pre><code>errno.ECONNREFUSED : integer\n</code></pre> <p>Connection refused (POSIX.1-2001).</p>"},{"location":"modules/errno/#errnoeconnreset","title":"errno.ECONNRESET","text":"<pre><code>errno.ECONNRESET : integer\n</code></pre> <p>Connection reset (POSIX.1-2001).</p>"},{"location":"modules/errno/#errnoedeadlk","title":"errno.EDEADLK","text":"<pre><code>errno.EDEADLK : integer\n</code></pre> <p>Resource deadlock avoided (POSIX.1-2001).</p>"},{"location":"modules/errno/#errnoedestaddrreq","title":"errno.EDESTADDRREQ","text":"<pre><code>errno.EDESTADDRREQ : integer\n</code></pre> <p>Destination address required (POSIX.1-2001).</p>"},{"location":"modules/errno/#errnoedom","title":"errno.EDOM","text":"<pre><code>errno.EDOM : integer\n</code></pre> <p>Mathematics argument out of domain of function (POSIX.1, C99).</p>"},{"location":"modules/errno/#errnoedquot","title":"errno.EDQUOT","text":"<pre><code>errno.EDQUOT : integer\n</code></pre> <p>Disk quota exceeded (POSIX.1-2001).</p>"},{"location":"modules/errno/#errnoeexist","title":"errno.EEXIST","text":"<pre><code>errno.EEXIST : integer\n</code></pre> <p>File exists (POSIX.1-2001).</p>"},{"location":"modules/errno/#errnoefault","title":"errno.EFAULT","text":"<pre><code>errno.EFAULT : integer\n</code></pre> <p>Bad address (POSIX.1-2001).</p>"},{"location":"modules/errno/#errnoefbig","title":"errno.EFBIG","text":"<pre><code>errno.EFBIG : integer\n</code></pre> <p>File too large (POSIX.1-2001).</p>"},{"location":"modules/errno/#errnoehostunreach","title":"errno.EHOSTUNREACH","text":"<pre><code>errno.EHOSTUNREACH : integer\n</code></pre> <p>Host is unreachable (POSIX.1-2001).</p>"},{"location":"modules/errno/#errnoeidrm","title":"errno.EIDRM","text":"<pre><code>errno.EIDRM : integer\n</code></pre> <p>Identifier removed (POSIX.1-2001).</p>"},{"location":"modules/errno/#errnoeilseq","title":"errno.EILSEQ","text":"<pre><code>errno.EILSEQ : integer\n</code></pre> <p>Invalid or incomplete multibyte or wide character (POSIX.1, C99).</p>"},{"location":"modules/errno/#errnoeinprogress","title":"errno.EINPROGRESS","text":"<pre><code>errno.EINPROGRESS : integer\n</code></pre> <p>Operation in progress (POSIX.1-2001).</p>"},{"location":"modules/errno/#errnoeintr","title":"errno.EINTR","text":"<pre><code>errno.EINTR : integer\n</code></pre> <p>Interrupted function call (POSIX.1-2001); see signal(7).</p>"},{"location":"modules/errno/#errnoeinval","title":"errno.EINVAL","text":"<pre><code>errno.EINVAL : integer\n</code></pre> <p>Invalid argument (POSIX.1-2001).</p>"},{"location":"modules/errno/#errnoeio","title":"errno.EIO","text":"<pre><code>errno.EIO : integer\n</code></pre> <p>Input/output error (POSIX.1-2001).</p>"},{"location":"modules/errno/#errnoeisconn","title":"errno.EISCONN","text":"<pre><code>errno.EISCONN : integer\n</code></pre> <p>Socket is connected (POSIX.1-2001).</p>"},{"location":"modules/errno/#errnoeisdir","title":"errno.EISDIR","text":"<pre><code>errno.EISDIR : integer\n</code></pre> <p>Is a directory (POSIX.1-2001).</p>"},{"location":"modules/errno/#errnoeloop","title":"errno.ELOOP","text":"<pre><code>errno.ELOOP : integer\n</code></pre> <p>Too many levels of symbolic links (POSIX.1-2001).</p>"},{"location":"modules/errno/#errnoemfile","title":"errno.EMFILE","text":"<pre><code>errno.EMFILE : integer\n</code></pre> <p>Too many open files (POSIX.1-2001).  Commonly caused by exceeding the RLIMIT_NOFILE resource limit described in getrlimit(2).  Can also be caused by exceeding the limit specified in /proc/sys/fs/nr_open.</p>"},{"location":"modules/errno/#errnoemlink","title":"errno.EMLINK","text":"<pre><code>errno.EMLINK : integer\n</code></pre> <p>Too many links (POSIX.1-2001).</p>"},{"location":"modules/errno/#errnoemsgsize","title":"errno.EMSGSIZE","text":"<pre><code>errno.EMSGSIZE : integer\n</code></pre> <p>Message too long (POSIX.1-2001).</p>"},{"location":"modules/errno/#errnoemultihop","title":"errno.EMULTIHOP","text":"<pre><code>errno.EMULTIHOP : integer\n</code></pre> <p>Multihop attempted (POSIX.1-2001).</p>"},{"location":"modules/errno/#errnoenametoolong","title":"errno.ENAMETOOLONG","text":"<pre><code>errno.ENAMETOOLONG : integer\n</code></pre> <p>Filename too long (POSIX.1-2001).</p>"},{"location":"modules/errno/#errnoenetdown","title":"errno.ENETDOWN","text":"<pre><code>errno.ENETDOWN : integer\n</code></pre> <p>Network is down (POSIX.1-2001).</p>"},{"location":"modules/errno/#errnoenetreset","title":"errno.ENETRESET","text":"<pre><code>errno.ENETRESET : integer\n</code></pre> <p>Connection aborted by network (POSIX.1-2001).</p>"},{"location":"modules/errno/#errnoenetunreach","title":"errno.ENETUNREACH","text":"<pre><code>errno.ENETUNREACH : integer\n</code></pre> <p>Network unreachable (POSIX.1-2001).</p>"},{"location":"modules/errno/#errnoenfile","title":"errno.ENFILE","text":"<pre><code>errno.ENFILE : integer\n</code></pre> <p>Too many open files in system (POSIX.1-2001).  On Linux, this is probably a result of encountering the /proc/sys/fs/file-max limit (see proc(5)).</p>"},{"location":"modules/errno/#errnoenobufs","title":"errno.ENOBUFS","text":"<pre><code>errno.ENOBUFS : integer\n</code></pre> <p>No buffer space available (POSIX.1 (XSI STREAMS option)).</p>"},{"location":"modules/errno/#errnoenodata","title":"errno.ENODATA","text":"<pre><code>errno.ENODATA : integer\n</code></pre> <p>The named attribute does not exist, or the process has no access to this attribute; see xattr(7).</p>"},{"location":"modules/errno/#errnoenodev","title":"errno.ENODEV","text":"<pre><code>errno.ENODEV : integer\n</code></pre> <p>No such device (POSIX.1-2001).</p>"},{"location":"modules/errno/#errnoenoent","title":"errno.ENOENT","text":"<pre><code>errno.ENOENT : integer\n</code></pre> <p>No such file or directory (POSIX.1-2001).</p>"},{"location":"modules/errno/#errnoenoexec","title":"errno.ENOEXEC","text":"<pre><code>errno.ENOEXEC : integer\n</code></pre> <p>Exec format error (POSIX.1-2001).</p>"},{"location":"modules/errno/#errnoenolck","title":"errno.ENOLCK","text":"<pre><code>errno.ENOLCK : integer\n</code></pre> <p>No locks available (POSIX.1-2001).</p>"},{"location":"modules/errno/#errnoenolink","title":"errno.ENOLINK","text":"<pre><code>errno.ENOLINK : integer\n</code></pre> <p>Link has been severed (POSIX.1-2001).</p>"},{"location":"modules/errno/#errnoenomem","title":"errno.ENOMEM","text":"<pre><code>errno.ENOMEM : integer\n</code></pre> <p>Not enough space/cannot allocate memory (POSIX.1-2001).</p>"},{"location":"modules/errno/#errnoenomsg","title":"errno.ENOMSG","text":"<pre><code>errno.ENOMSG : integer\n</code></pre> <p>No message of the desired type (POSIX.1-2001).</p>"},{"location":"modules/errno/#errnoenoprotoopt","title":"errno.ENOPROTOOPT","text":"<pre><code>errno.ENOPROTOOPT : integer\n</code></pre> <p>Protocol not available (POSIX.1-2001).</p>"},{"location":"modules/errno/#errnoenospc","title":"errno.ENOSPC","text":"<pre><code>errno.ENOSPC : integer\n</code></pre> <p>No space left on device (POSIX.1-2001).</p>"},{"location":"modules/errno/#errnoenosr","title":"errno.ENOSR","text":"<pre><code>errno.ENOSR : integer\n</code></pre> <p>No STREAM resources (POSIX.1 (XSI STREAMS option)).</p>"},{"location":"modules/errno/#errnoenostr","title":"errno.ENOSTR","text":"<pre><code>errno.ENOSTR : integer\n</code></pre> <p>Not a STREAM (POSIX.1 (XSI STREAMS option)).</p>"},{"location":"modules/errno/#errnoenosys","title":"errno.ENOSYS","text":"<pre><code>errno.ENOSYS : integer\n</code></pre> <p>Function not implemented (POSIX.1-2001).</p>"},{"location":"modules/errno/#errnoenotconn","title":"errno.ENOTCONN","text":"<pre><code>errno.ENOTCONN : integer\n</code></pre> <p>The socket is not connected (POSIX.1-2001).</p>"},{"location":"modules/errno/#errnoenotdir","title":"errno.ENOTDIR","text":"<pre><code>errno.ENOTDIR : integer\n</code></pre> <p>Not a directory (POSIX.1-2001).</p>"},{"location":"modules/errno/#errnoenotempty","title":"errno.ENOTEMPTY","text":"<pre><code>errno.ENOTEMPTY : integer\n</code></pre> <p>Directory not empty (POSIX.1-2001).</p>"},{"location":"modules/errno/#errnoenotsock","title":"errno.ENOTSOCK","text":"<pre><code>errno.ENOTSOCK : integer\n</code></pre> <p>Not a socket (POSIX.1-2001).</p>"},{"location":"modules/errno/#errnoenotsup","title":"errno.ENOTSUP","text":"<pre><code>errno.ENOTSUP : integer\n</code></pre> <p>Operation not supported (POSIX.1-2001).</p>"},{"location":"modules/errno/#errnoenotty","title":"errno.ENOTTY","text":"<pre><code>errno.ENOTTY : integer\n</code></pre> <p>Inappropriate I/O control operation (POSIX.1-2001).</p>"},{"location":"modules/errno/#errnoenxio","title":"errno.ENXIO","text":"<pre><code>errno.ENXIO : integer\n</code></pre> <p>No such device or address (POSIX.1-2001).</p>"},{"location":"modules/errno/#errnoeopnotsupp","title":"errno.EOPNOTSUPP","text":"<pre><code>errno.EOPNOTSUPP : integer\n</code></pre> <p>Operation not supported on socket (POSIX.1-2001).</p>"},{"location":"modules/errno/#errnoeoverflow","title":"errno.EOVERFLOW","text":"<pre><code>errno.EOVERFLOW : integer\n</code></pre> <p>Value too large to be stored in data type (POSIX.1-2001).</p>"},{"location":"modules/errno/#errnoeperm","title":"errno.EPERM","text":"<pre><code>errno.EPERM : integer\n</code></pre> <p>Operation not permitted (POSIX.1-2001).</p>"},{"location":"modules/errno/#errnoepipe","title":"errno.EPIPE","text":"<pre><code>errno.EPIPE : integer\n</code></pre> <p>Broken pipe (POSIX.1-2001).</p>"},{"location":"modules/errno/#errnoeproto","title":"errno.EPROTO","text":"<pre><code>errno.EPROTO : integer\n</code></pre> <p>Protocol error (POSIX.1-2001).</p>"},{"location":"modules/errno/#errnoeprotonosupport","title":"errno.EPROTONOSUPPORT","text":"<pre><code>errno.EPROTONOSUPPORT : integer\n</code></pre> <p>Protocol not supported (POSIX.1-2001).</p>"},{"location":"modules/errno/#errnoeprototype","title":"errno.EPROTOTYPE","text":"<pre><code>errno.EPROTOTYPE : integer\n</code></pre> <p>Protocol wrong type for socket (POSIX.1-2001).</p>"},{"location":"modules/errno/#errnoerange","title":"errno.ERANGE","text":"<pre><code>errno.ERANGE : integer\n</code></pre> <p>Result too large (POSIX.1, C99).</p>"},{"location":"modules/errno/#errnoerofs","title":"errno.EROFS","text":"<pre><code>errno.EROFS : integer\n</code></pre> <p>Read-only filesystem (POSIX.1-2001).</p>"},{"location":"modules/errno/#errnoespipe","title":"errno.ESPIPE","text":"<pre><code>errno.ESPIPE : integer\n</code></pre> <p>Invalid seek (POSIX.1-2001).</p>"},{"location":"modules/errno/#errnoesrch","title":"errno.ESRCH","text":"<pre><code>errno.ESRCH : integer\n</code></pre> <p>No such process (POSIX.1-2001).</p>"},{"location":"modules/errno/#errnoestale","title":"errno.ESTALE","text":"<pre><code>errno.ESTALE : integer\n</code></pre> <p>Stale file handle (POSIX.1-2001).</p>"},{"location":"modules/errno/#errnoetime","title":"errno.ETIME","text":"<pre><code>errno.ETIME : integer\n</code></pre> <p>Timer expired (POSIX.1 (XSI STREAMS option)).</p>"},{"location":"modules/errno/#errnoetimedout","title":"errno.ETIMEDOUT","text":"<pre><code>errno.ETIMEDOUT : integer\n</code></pre> <p>Connection timed out (POSIX.1-2001).</p>"},{"location":"modules/errno/#errnoetxtbsy","title":"errno.ETXTBSY","text":"<pre><code>errno.ETXTBSY : integer\n</code></pre> <p>Text file busy (POSIX.1-2001).</p>"},{"location":"modules/errno/#errnoewouldblock","title":"errno.EWOULDBLOCK","text":"<pre><code>errno.EWOULDBLOCK : integer\n</code></pre> <p>Operation would block (may be same value as EAGAIN) (POSIX.1-2001).</p>"},{"location":"modules/errno/#errnoexdev","title":"errno.EXDEV","text":"<pre><code>errno.EXDEV : integer\n</code></pre> <p>Improper link (POSIX.1-2001).</p>"},{"location":"modules/fiber/","title":"global fiber","text":"<p>Builtin <code>fiber</code> module</p> <p>With the fiber module, you can:</p> <ul> <li>Create, run, and manage fibers.</li> <li>Send and receive messages between different processes (i.e. different connections, sessions, or fibers) via channels.</li> <li>Use a synchronization mechanism for fibers, similar to \"condition variables\" and similar to operating-system functions, such as <code>pthread_cond_wait()</code> plus <code>pthread_cond_signal()</code>.</li> </ul>"},{"location":"modules/fiber/#methods","title":"methods","text":""},{"location":"modules/fiber/#mcreate","title":"M.create","text":"<pre><code>async function M.create(\n  func: fun(...: T ...),\n  ...: T ...\n) -&gt;  fiber\n</code></pre> <p>@param <code>func</code> - the function to be associated with the fiber</p> <p>@param <code>...</code> - what will be passed to function</p> <p>Create and start a fiber.</p> <p>The fiber is created and begins to run immediately.</p> <p>Example:</p> <p>The script below shows how to create a fiber using <code>fiber.create</code>.</p> <pre><code> -- app.lua --\n fiber = require('fiber')\n\n function greet(name)\n print('Hello, '..name)\n end\n\n greet_fiber = fiber.create(greet, 'John')\n print('Fiber already started')\n</code></pre>"},{"location":"modules/fiber/#mnew","title":"M.new","text":"<pre><code>function M.new(\n  func: fun(...: T ...),\n  ...: T ...\n) -&gt;  fiber\n</code></pre> <p>@param <code>func</code> - the function to be associated with the fiber</p> <p>@param <code>...</code> - what will be passed to function</p> <p>Create a fiber but do not start it.</p> <p>The created fiber starts after the fiber creator (that is, the job that is calling <code>fiber.new()</code>) yields. The initial fiber state is ready.</p> <p>Note: <code>fiber.status()</code> returns the suspended state for ready fibers because the ready state is not observable using the fiber module API.</p> <p>You can join fibers created using <code>fiber.new()</code> by calling the <code>fiber_object:join()</code> function and get the result returned by the fiber's function.</p> <p>To join the fiber, you need to make it joinable using <code>fiber_object:set_joinable()</code>.</p>"},{"location":"modules/fiber/#mself","title":"M.self","text":"<pre><code>function M.self() -&gt;  fiber\n</code></pre> <p>Get the currently scheduled fiber.</p>"},{"location":"modules/fiber/#mfind","title":"M.find","text":"<pre><code>function M.find(id: integer) -&gt;  fiber\n</code></pre> <p>@param <code>id</code> - numeric identifier of the fiber.</p> <p>Get a fiber object by ID.</p> <p>Example:</p> <pre><code> tarantool&gt; fiber.find(101)\n ---\n - status: running\n name: interactive\n id: 101\n ...\n</code></pre>"},{"location":"modules/fiber/#msleep","title":"M.sleep","text":"<pre><code>async function M.sleep(timeout: number)\n</code></pre> <p>@param <code>timeout</code> - number of seconds to sleep.</p> <p>Yield control to the scheduler and sleep for the specified number of seconds.</p> <p>Only the current fiber can be made to sleep.</p> <p>Example:</p> <p>The <code>increment</code> function below contains an infinite loop that adds 1 to the <code>counter</code> global variable. Then, the current fiber goes to sleep for <code>period</code> seconds. <code>sleep</code> causes an implicit <code>fiber.yield()</code>.</p> <pre><code> -- app.lua --\n fiber = require('fiber')\n\n counter = 0\n function increment(period)\n     while true do\n         counter = counter + 1\n         fiber.sleep(period)\n     end\n end\n\n increment_fiber = fiber.create(increment, 2)\n require('console').start()\n</code></pre>"},{"location":"modules/fiber/#myield","title":"M.yield","text":"<pre><code>async function M.yield()\n</code></pre> <p>Yield control to the scheduler.</p> <p>Equivalent to <code>fiber.sleep(0)</code>.</p> <p>Example:</p> <p>In the example below, two fibers are associated with the same function. Each fiber yields control after printing a greeting.</p> <pre><code> -- app.lua --\n fiber = require('fiber')\n\n function greet()\n     while true do\n         print('Enter a name:')\n         name = io.read()\n         print('Hello, '..name..'. I am fiber '..fiber.id())\n         fiber.yield()\n     end\n end\n\n for i = 1, 2 do\n     fiber_object = fiber.create(greet)\n     fiber_object:cancel()\n end\n</code></pre>"},{"location":"modules/fiber/#mstatus","title":"M.status","text":"<pre><code>function M.status(fiber_object: fiber?) -&gt;  (\"running\"|\"dead\"|\"suspected\")\n</code></pre> <p>Return the status of the current fiber.</p> <p>Or, if optional fiber_object is passed, return the status of the specified fiber.</p> <pre><code> tarantool&gt; fiber.status()\n ---\n - running\n ...\n</code></pre>"},{"location":"modules/fiber/#minfo","title":"M.info","text":"<pre><code>function M.info(opts: { backtrace: boolean?, bt: boolean? }?) -&gt;  table&lt;integer,fiber.info&gt;\n</code></pre> <p>Return information about all fibers.</p> <p>Example:</p> <pre><code> tarantool&gt; fiber.info({ bt = true })\n ---\n - 101:\n csw: 1\n backtrace:\n - C: '#0  0x5dd130 in lbox_fiber_id+96'\n - C: '#1  0x5dd13d in lbox_fiber_stall+13'\n - L: stall in =[C] at line -1\n - L: (unnamed) in @builtin/fiber.lua at line 59\n - C: '#2  0x66371b in lj_BC_FUNCC+52'\n - C: '#3  0x628f28 in lua_pcall+120'\n - C: '#4  0x5e22a8 in luaT_call+24'\n - C: '#5  0x5dd1a9 in lua_fiber_run_f+89'\n - C: '#6  0x45b011 in fiber_cxx_invoke(int (*)(__va_list_tag*), __va_list_tag*)+17'\n - C: '#7  0x5ff3c0 in fiber_loop+48'\n - C: '#8  0x81ecf4 in coro_init+68'\n memory:\n total: 516472\n used: 0\n time: 0\n name: lua\n fid: 101\n 102:\n csw: 0\n backtrace:\n - C: '#0  (nil) in +63'\n - C: '#1  (nil) in +63'\n memory:\n total: 516472\n used: 0\n time: 0\n name: on_shutdown\n fid: 102\n\n ...\n</code></pre>"},{"location":"modules/fiber/#mid","title":"M.id","text":"<pre><code>function M.id() -&gt; fiber_id integer\n</code></pre> <p>@return <code>fiber_id</code> - returns current fiber id</p>"},{"location":"modules/fiber/#mtop","title":"M.top","text":"<pre><code>function M.top() -&gt;  { cpu: table&lt;string,fiber.top&gt;, cpu_misses: number }\n</code></pre> <p>Show all alive fibers and their CPU consumption.</p> <p>Note: Since 2.11.0 <code>cpu_misses</code> is deprecated and always returns <code>0</code>.</p> <p>Example:</p> <pre><code> tarantool&gt; fiber.top()\n ---\n - cpu:\n 107/lua:\n instant: 30.967324490456\n time: 0.351821993\n average: 25.582738345233\n 104/lua:\n instant: 9.6473633128437\n time: 0.110869897\n average: 7.9693406131877\n 101/on_shutdown:\n instant: 0\n time: 0\n average: 0\n 103/lua:\n instant: 9.8026528631511\n time: 0.112641118\n average: 18.138387232255\n 106/lua:\n instant: 20.071174377224\n time: 0.226901357\n average: 17.077908441831\n 102/interactive:\n instant: 0\n time: 9.6858e-05\n average: 0\n 105/lua:\n instant: 9.2461986412164\n time: 0.10657528\n average: 7.7068458630827\n 1/sched:\n instant: 20.265286315108\n time: 0.237095335\n average: 23.141537169257\n cpu_misses: 0\n ...\n</code></pre>"},{"location":"modules/fiber/#mkill","title":"M.kill","text":"<pre><code>function M.kill(fiber_object: fiber)\n</code></pre> <p>Cancel a fiber.</p> <p>Locate a fiber by its numeric ID and cancel it. In other words, <code>fiber.kill()</code> combines <code>fiber.find()</code> and <code>fiber_object:cancel()</code>.</p> <p>Example:</p> <pre><code> tarantool&gt; fiber.kill(fiber.id()) -- kill self, may make program end\n ---\n - error: fiber is cancelled\n ...\n</code></pre>"},{"location":"modules/fiber/#mtime","title":"M.time","text":"<pre><code>function M.time() -&gt;  number\n</code></pre> <p>Get the current system time (in seconds since the epoch) as a Lua number.</p> <p>The time is taken from the event loop clock, which makes this call very cheap, but still useful for constructing artificial tuple keys.</p> <p>Example:</p> <pre><code> tarantool&gt; fiber.time(), fiber.time()\n - 1448466279.2415\n - 1448466279.2415\n</code></pre> <p>@see fiber.time64</p>"},{"location":"modules/fiber/#mtime64","title":"M.time64","text":"<pre><code>function M.time64() -&gt;  int64_t\n</code></pre> <p>Get the current system time (in microseconds since the epoch) as a 64-bit integer.</p> <p>The time is taken from the event loop clock.</p> <p>Example:</p> <pre><code> tarantool&gt; fiber.time(), fiber.time64()\n ---\n - 1448466351.2708\n - 1448466351270762\n ...\n</code></pre> <p>@see fiber.time</p>"},{"location":"modules/fiber/#mclock","title":"M.clock","text":"<pre><code>function M.clock() -&gt;  number\n</code></pre> <p>Get the monotonic time in seconds.</p> <p>It is better to use <code>fiber.clock()</code> for calculating timeouts instead of <code>fiber.time()</code> because <code>fiber.time()</code> reports real time so it is affected by system time changes.</p> <p>Example:</p> <pre><code> tarantool&gt; start = fiber.clock()\n ---\n ...\n tarantool&gt; print(start)\n 248700.58805\n ---\n ...\n tarantool&gt; print(fiber.time(), fiber.time()-start)\n 1600785979.8291 1600537279.241\n ---\n ...\n</code></pre> <p>@see fiber.clock64</p>"},{"location":"modules/fiber/#mclock64","title":"M.clock64","text":"<pre><code>function M.clock64() -&gt;  ffi.cdata*\n</code></pre> <p>Get the monotonic time in seconds.</p> <p>Same as <code>fiber.clock()</code> but in microseconds.</p> <p>@see fiber.clock</p>"},{"location":"modules/fiber/#mtop_enable","title":"M.top_enable","text":"<pre><code>function M.top_enable()\n</code></pre> <p>Enable <code>fiber.top</code>.</p> <p>Note: Enabling <code>fiber.top()</code> slows down fiber switching by about 15%, so it is disabled by default.</p> <p>@see fiber.top</p>"},{"location":"modules/fiber/#mtop_disable","title":"M.top_disable","text":"<pre><code>function M.top_disable()\n</code></pre> <p>Disable <code>fiber.top</code>.</p> <p>Note: Enabling <code>fiber.top()</code> slows down fiber switching by about 15%, so it is disabled by default.</p> <p>@see fiber.top</p>"},{"location":"modules/fiber/#mcheck_slice","title":"M.check_slice","text":"<pre><code>function M.check_slice()\n</code></pre> <p>Check whether a slice for the current fiber is over.</p> <p>A fiber slice limits the time period of executing a fiber without yielding control.</p> <p>Example:</p> <p>The example below shows how to use <code>set_max_slice</code> to limit the slice for all fibers. <code>fiber.check_slice()</code> is called inside a long-running operation to determine whether a slice for the current fiber is over.</p> <pre><code> -- app.lua --\n fiber = require('fiber')\n clock = require('clock')\n\n fiber.set_max_slice({warn = 1.5, err = 3})\n time = clock.monotonic()\n function long_operation()\n     while clock.monotonic() - time &lt; 5 do\n         fiber.check_slice()\n         -- Long-running operation \u231b\u231b\u231b --\n     end\n end\n\n long_operation_fiber = fiber.create(long_operation)\n</code></pre> <p>The output should look as follows:</p> <pre><code> $ tarantool app.lua\n fiber has not yielded for more than 1.500 seconds\n FiberSliceIsExceeded: fiber slice is exceeded\n</code></pre>"},{"location":"modules/fiber/#mset_slice","title":"M.set_slice","text":"<pre><code>function M.set_slice(slice: (fiber.slice|number))\n</code></pre> <p>@param <code>slice</code> - a time period (in seconds) that specifies the error slice</p> <p>Set a slice for the current fiber execution.</p> <p>A fiber slice limits the time period of executing a fiber without yielding control.</p>"},{"location":"modules/fiber/#mset_max_slice","title":"M.set_max_slice","text":"<pre><code>function M.set_max_slice(slice: (fiber.slice|number))\n</code></pre> <p>@param <code>slice</code> - a time period (in seconds) that specifies the error slice</p> <p>Set the default maximum slice for all fibers.</p> <p>A fiber slice limits the time period of executing a fiber without yielding control.</p>"},{"location":"modules/fiber/#mextend_slice","title":"M.extend_slice","text":"<pre><code>function M.extend_slice(slice: (fiber.slice|number))\n</code></pre> <p>@param <code>slice</code> - a time period (in seconds) that specifies the error slice</p> <p>Extend a slice for the current fiber execution.</p> <p>For example, if the default error slice is set using <code>fiber.set_max_slice()</code> to 3 seconds, <code>extend_slice(1)</code> extends the error slice to 4 seconds.</p>"},{"location":"modules/fiber/#mchannel","title":"M.channel","text":"<pre><code>function M.channel(capacity: number?) -&gt;  fiber.channel\n</code></pre> <p>@param <code>capacity</code> - the maximum number of slots (spaces for channel:put messages) that can be in use at once. The default is 0.</p> <p>Create a communication channel.</p>"},{"location":"modules/fiber/#mcond","title":"M.cond","text":"<pre><code>function M.cond() -&gt;  fiber.cond\n</code></pre> <p>Create a new conditional variable.</p>"},{"location":"modules/fio/","title":"global fio","text":""},{"location":"modules/fio/#methods","title":"methods","text":""},{"location":"modules/fio/#mpathjoin","title":"M.pathjoin","text":"<pre><code>function M.pathjoin(...) -&gt;  string\n</code></pre> <p>Concatenate partial string, separated by '/' to form a path name.</p> <p>Example: <code>fio.pathjoin('/etc', 'default', 'myfile')</code> =&gt; <code>'/etc/default/myfile'</code></p> <p>@vararg string ...</p>"},{"location":"modules/fio/#mbasename","title":"M.basename","text":"<pre><code>function M.basename(\n  path_name: string,\n  suffix: string?\n) -&gt; file_name string\n</code></pre> <p>@param <code>path_name</code> - path name</p> <p>@param <code>suffix</code> - suffix</p> <p>Get a file name.</p> <p>Given a full path name, remove all but the final part (the file name). Also remove the suffix, if it is passed.</p> <p>Note that the basename of a path with a trailing slash is an empty string. It is different from how the Unix basename program interprets such a path.</p> <p>Example:</p> <p><code>fio.basename('/path/to/my.lua', '.lua')</code> =&gt; <code>'my'</code></p>"},{"location":"modules/fio/#mdirname","title":"M.dirname","text":"<pre><code>function M.dirname(path_name: string) -&gt;  string\n</code></pre> <p>@param <code>path_name</code> - path-name</p> <p>Get a directory name.</p> <p>Example:</p> <p><code>fio.dirname('/path/to/my.lua')</code> =&gt; <code>'/path/to/'</code></p>"},{"location":"modules/fio/#mabspath","title":"M.abspath","text":"<pre><code>function M.abspath(file_name: string) -&gt; directory_name string\n</code></pre> <p>@return <code>directory_name</code> - that is, path name including file name.</p> <p>Get a directory and file name.</p> <p>Given a full path name, remove the final part (the file name).</p> <p>Example:</p> <p><code>fio.abspath('my.lua')</code> =&gt; <code>'/path/to/my.lua'</code></p>"},{"location":"modules/fio/#mumask","title":"M.umask","text":"<pre><code>function M.umask(mask_bits: number) -&gt;  number\n</code></pre> <p>@return  - previous mask bits</p> <p>Set the mask bits used when creating files or directories.</p> <p>For a detailed description type <code>man 2 umask</code>.</p>"},{"location":"modules/fio/#mlstat","title":"M.lstat","text":"<pre><code>function M.lstat(path: string) -&gt;  fio.stat\n</code></pre> <p>@param <code>path</code> - path name of file.</p> <p>Get information about a file object.</p> <p>Returns information about a file object. For details type <code>man 2 lstat</code> or <code>man 2 stat</code>.</p> <p>Example:</p> <p><code>fio.lstat('/etc')</code></p> <pre><code>   inode: 1048577\n   rdev: 0\n   size: 12288\n   atime: 1421340698\n   mode: 16877\n   mtime: 1424615337\n   nlink: 160\n   uid: 0\n   blksize: 4096\n   gid: 0\n   ctime: 1424615337\n   dev: 2049\n   blocks: 24\n</code></pre>"},{"location":"modules/fio/#mstat","title":"M.stat","text":"<pre><code>function M.stat(path: string) -&gt;  fio.stat\n</code></pre> <p>@param <code>path</code> - path name of file.</p> <p>Get information about a file object.</p> <p>Returns information about a file object. For details type <code>man 2 lstat</code> or <code>man 2 stat</code>.</p>"},{"location":"modules/fio/#mmkdir","title":"M.mkdir","text":"<pre><code>function M.mkdir(\n  path_name: string,\n  mode: number?\n)\n -&gt; success boolean\n -&gt; error_message string\n\n</code></pre> <p>@param <code>path_name</code> - path of directory.</p> <p>@param <code>mode</code> - Mode bits can be passed as a number or as string constants, for example S_IWUSR. Mode bits can be combined by enclosing them in braces.</p> <p>@return <code>success</code> - ?</p> <p>@return <code>error_message</code> - ?</p> <p>Create directory.</p> <p>Example:</p> <p><code>fio.mkdir('/etc')</code> =&gt; <code>false</code></p>"},{"location":"modules/fio/#mrmdir","title":"M.rmdir","text":"<pre><code>function M.rmdir(path_name: string)\n -&gt; success boolean\n -&gt; message string\n\n</code></pre> <p>@return <code>success</code> - ?</p> <p>@return <code>message</code> - ?</p> <p>Delete a directory</p>"},{"location":"modules/fio/#mchdir","title":"M.chdir","text":"<pre><code>function M.chdir(path_name: string) -&gt; success boolean\n</code></pre> <p>@param <code>path_name</code> - path of directory.</p> <p>Change working directory.</p> <p>Example:</p> <p><code>fio.chdir('/etc')</code> =&gt; <code>true</code></p>"},{"location":"modules/fio/#mlistdir","title":"M.listdir","text":"<pre><code>function M.listdir(path_name: string)\n -&gt;  string[]?\n -&gt; error_message string?\n\n</code></pre> <p>@param <code>path_name</code> - path of directory.</p> <p>@return  - </p> <p>@return <code>error_message</code> - </p> <p>List files in a directory.</p> <p>The result is similar to the ls shell command.</p>"},{"location":"modules/fio/#mglob","title":"M.glob","text":"<pre><code>function M.glob(path_name) -&gt; list string[]\n</code></pre> <p>@return <code>list</code> - list of files whose names match the input string</p> <p>Get files whose names match a given string.</p> <p>Return a list of files that match an input string.</p> <p>The list is constructed with a single flag that controls the behavior of the function: GLOB_NOESCAPE.</p> <p>For details type <code>man 3 glob</code>.</p> <p>Example:</p> <p><code>fio.glob('/etc/x*')</code></p> <pre><code> - - /etc/xdg\n   - /etc/xml\n   - /etc/xul-ext\n</code></pre>"},{"location":"modules/fio/#mtempdir","title":"M.tempdir","text":"<pre><code>function M.tempdir() -&gt;  string\n</code></pre> <p>Return the name of a directory that can be used to store temporary files.</p> <p><code>fio.tempdir()</code> stores the created temporary directory into <code>/tmp</code> by default.</p> <p>Since 2.4.1, this can be changed by setting the <code>TMPDIR</code> environment variable.</p> <p>Before starting Tarantool, or at runtime by <code>os.setenv()</code>.</p> <p>Example:</p> <pre><code> tarantool&gt; fio.tempdir()\n ---\n - /tmp/lG31e7\n ...\n tarantool&gt; fio.mkdir('./mytmp')\n ---\n - true\n ...\n\n tarantool&gt; os.setenv('TMPDIR', './mytmp')\n ---\n ...\n\n tarantool&gt; fio.tempdir()\n ---\n - ./mytmp/506Z0b\n</code></pre>"},{"location":"modules/fio/#mcwd","title":"M.cwd","text":"<pre><code>function M.cwd() -&gt;  string\n</code></pre> <p>Get the name of the current working directory.</p> <p>Example:</p> <p><code>fio.cwd()</code> =&gt; <code>'/home/username/tarantool_sandbox'</code></p>"},{"location":"modules/fio/#mcopytree","title":"M.copytree","text":"<pre><code>function M.copytree(\n  from_path: string,\n  to_path: string\n)\n -&gt; success boolean\n -&gt; error_message string?\n\n</code></pre> <p>Copy everything in the <code>from-path</code>, including subdirectory contents, to the <code>to-path</code>.</p> <p>The result is similar to the <code>cp -r</code> shell command.</p> <p>The <code>to-path</code> should not be empty.</p>"},{"location":"modules/fio/#mmktree","title":"M.mktree","text":"<pre><code>function M.mktree(path_name: string)\n -&gt; success boolean\n -&gt; error_message string?\n\n</code></pre> <p>Create the path, including parent directories, but without file contents.</p> <p>The result is similar to the <code>mkdir -p</code> shell command.</p> <p>Example:</p> <p><code>fio.mktree('/home/archives')</code> =&gt; <code>true</code></p>"},{"location":"modules/fio/#mrmtree","title":"M.rmtree","text":"<pre><code>function M.rmtree(path_name: string)\n -&gt; success boolean\n -&gt; error_message string?\n\n</code></pre> <p>Delete directories.</p> <p>Example:</p> <p><code>fio.rmtree('/home/archives')</code> =&gt; <code>true</code></p>"},{"location":"modules/fio/#mlink","title":"M.link","text":"<pre><code>function M.link(\n  src: string,\n  dst: string\n)\n -&gt; success boolean\n -&gt; error_message string?\n\n</code></pre> <p>@param <code>src</code> - existing file name.</p> <p>@param <code>dst</code> - linked name.</p> <p>Creates link</p>"},{"location":"modules/fio/#msymlink","title":"M.symlink","text":"<pre><code>function M.symlink(\n  src: string,\n  dst: string\n)\n -&gt; success boolean\n -&gt; error_message string?\n\n</code></pre> <p>@param <code>src</code> - existing file name.</p> <p>@param <code>dst</code> - linked name.</p> <p>Creates link.</p>"},{"location":"modules/fio/#mreadlink","title":"M.readlink","text":"<pre><code>function M.readlink(src: string) -&gt; link_source string\n</code></pre> <p>@param <code>src</code> - path to the link</p> <p>Reads link.</p>"},{"location":"modules/fio/#munlink","title":"M.unlink","text":"<pre><code>function M.unlink(path_name: string)\n -&gt; success boolean\n -&gt; error_message string?\n\n</code></pre> <p>Deletes link or file.</p>"},{"location":"modules/fio/#mrename","title":"M.rename","text":"<pre><code>function M.rename(\n  path_name: string,\n  new_path_name: string\n)\n -&gt; success boolean\n -&gt; error_message string?\n\n</code></pre> <p>@param <code>path_name</code> - original name.</p> <p>@param <code>new_path_name</code> - new name.</p> <p>Rename a file or directory.</p>"},{"location":"modules/fio/#mutime","title":"M.utime","text":"<pre><code>function M.utime(\n  file_name: string,\n  accesstime: number?,\n  updatetime: number?\n)\n -&gt; success boolean\n -&gt; error_message string?\n\n</code></pre> <p>@param <code>file_name</code> - name.</p> <p>@param <code>accesstime</code> - time of last access. default current time.</p> <p>@param <code>updatetime</code> - time of last update. default = access time.</p> <p>Change the access time and possibly also change the update time of a file.</p> <p>For details type man 2 utime.</p> <p>Times should be expressed as number of seconds since the epoch.</p>"},{"location":"modules/fio/#mcopyfile","title":"M.copyfile","text":"<pre><code>function M.copyfile(\n  path_name: string,\n  new_path_name: string\n)\n -&gt; success boolean\n -&gt; error_message string?\n\n</code></pre> <p>@param <code>path_name</code> - path to original file.</p> <p>@param <code>new_path_name</code> - path to new file.</p> <p>Copy a file. The result is similar to the cp shell command.</p>"},{"location":"modules/fio/#mchown","title":"M.chown","text":"<pre><code>function M.chown(\n  path_name,\n  owner_user: string,\n  owner_group: string\n)\n -&gt; success boolean\n -&gt; error_message string?\n\n</code></pre> <p>@param <code>owner_user</code> - new username.</p> <p>@param <code>owner_group</code> - new groupname.</p> <p>Manage rights to and ownership of file objects.</p> <p>Example:</p> <pre><code> tarantool&gt; fio.chown('/home/username/tmp.txt', 'username', 'username')\n - true\n</code></pre>"},{"location":"modules/fio/#mchmod","title":"M.chmod","text":"<pre><code>function M.chmod(\n  path_name: string,\n  new_rights: number\n)\n -&gt; success boolean\n -&gt; error_message string?\n\n</code></pre> <p>@param <code>new_rights</code> - new permissions</p> <p>Manage rights to and ownership of file objects.</p> <p>Example:</p> <pre><code> tarantool&gt; fio.chmod('/home/username/tmp.txt', tonumber('0755', 8))\n - true\n</code></pre>"},{"location":"modules/fio/#mtruncate","title":"M.truncate","text":"<pre><code>function M.truncate(\n  path_name: string,\n  new_size: number\n)\n -&gt; success boolean\n -&gt; error_message string?\n\n</code></pre> <p>Reduce the file size.</p>"},{"location":"modules/fio/#msync","title":"M.sync","text":"<pre><code>function M.sync() -&gt; success boolean\n</code></pre> <p>Ensure that changes are written to disk.</p>"},{"location":"modules/fio/#mopen","title":"M.open","text":"<pre><code>function M.open(\n  path_name: string,\n  flags: (number|flags|flags[])?,\n  mode: number?\n)\n -&gt;  fio.file\n -&gt; err box.error\n\n</code></pre> <p>@return  - ?</p> <p>@return <code>err</code> - ?</p> <p>Open a file.</p>"},{"location":"modules/fio/#fields","title":"fields","text":""},{"location":"modules/fio/#mc","title":"M.c","text":"<pre><code>M.c: {\n    seek: { SEEK_SET = 0, SEEK_DATA = 4, SEEK_HOLE = 3, SEEK_END = 2, ... },\n    mode: { S_IWGRP = 16, S_IXGRP = 8, S_IROTH = 4, S_IXOTH = 1, S_IRUSR = 256, ... },\n    flag: { O_EXCL = 2048, O_NONBLOCK = 4, O_RDONLY = 0, O_CLOEXEC = 16777216, ... },\n}\n</code></pre>"},{"location":"modules/fun/","title":"global fun","text":"<p>Builtin <code>fun</code> module.</p> <p>Luafun, also known as the Lua Functional Library, takes advantage of the features of LuaJIT to help users create complex functions.</p> <p>Inside the module are \"sequence processors\" such as <code>map</code>, <code>filter</code>, <code>reduce</code>, <code>zip</code> -- they take a user-written function as an argument and run it against every element in a sequence, which can be faster or more convenient than a user-written loop.</p> <p>Inside the module are \"generators\" such as <code>range</code>, <code>tabulate</code>, and <code>rands</code> -- they return a bounded or boundless series of values. Within the module are \"reducers\", \"filters\", \"composers\" ... or, in short, all the important features found in languages like Standard ML, Haskell, or Erlang.</p> <p>The full documentation is on the luafun section of github.</p> <p>However, the first chapter can be skipped because installation is already done, it's inside Tarantool. All that is needed is the usual <code>require</code> request. After that, all the operations described in the Lua fun manual will work, provided they are preceded by the name returned by the <code>require</code> request. For example:</p> <pre><code> tarantool&gt; fun = require('fun')\n ---\n ...\n\n tarantool&gt; for _k, a in fun.range(3) do\n &gt;   print(a)\n &gt; end\n 1\n 2\n 3\n ---\n ...\n</code></pre>"},{"location":"modules/fun/#methods","title":"methods","text":""},{"location":"modules/fun/#mwrap","title":"M.wrap","text":"<pre><code>function M.wrap(\n  gen,\n  param,\n  state\n)\n</code></pre> <p>Documentation is not provided yet.</p>"},{"location":"modules/fun/#miter","title":"M.iter","text":"<pre><code>function M.iter(g: (table&lt;A,B&gt;|{ [A]: B }|iterator&lt;A,B&gt;)) -&gt;  iterator&lt;A,B&gt;\n</code></pre>"},{"location":"modules/fun/#meach","title":"M.each","text":"<pre><code>function M.each(\n  f: fun(a: A, b: B),\n  g: (table&lt;A,B&gt;|{ [A]: B }|iterator&lt;A,B&gt;)\n) -&gt;  iterator&lt;A,B&gt;\n</code></pre>"},{"location":"modules/fun/#mfor_each","title":"M.for_each","text":"<pre><code>function M.for_each(\n  f: fun(a: A, b: B),\n  g: (table&lt;A,B&gt;|{ [A]: B }|iterator&lt;A,B&gt;)\n) -&gt;  iterator&lt;A,B&gt;\n</code></pre>"},{"location":"modules/fun/#mforeach","title":"M.foreach","text":"<pre><code>function M.foreach(\n  f: fun(a: A, b: B),\n  g: (table&lt;A,B&gt;|{ [A]: B }|iterator&lt;A,B&gt;)\n) -&gt;  iterator&lt;A,B&gt;\n</code></pre>"},{"location":"modules/fun/#mrange","title":"M.range","text":"<pre><code>function M.range(\n  start: number,\n  stop: number?,\n  step: number?\n) -&gt;  iterator&lt;number,nil&gt;\n</code></pre> <p>@param <code>stop</code> - (default: start)</p> <p>@param <code>step</code> - (default: 1)</p> <p>The iterator to create arithmetic progressions.</p> <p>Iteration values are generated within closed interval [start, stop] (i.e. stop is included).</p>"},{"location":"modules/fun/#mduplicate","title":"M.duplicate","text":"<pre><code>function M.duplicate(\n  a: A?,\n  b: B?\n) -&gt;  iterator&lt;A,B&gt;\n</code></pre> <p>The iterator returns values over and over again indefinitely.</p> <p>All values that passed to the iterator are returned as-is during the iteration.</p>"},{"location":"modules/fun/#mreplicate","title":"M.replicate","text":"<pre><code>function M.replicate(\n  a: A?,\n  b: B?\n) -&gt;  iterator&lt;A,B&gt;\n</code></pre>"},{"location":"modules/fun/#mxrepeat","title":"M.xrepeat","text":"<pre><code>function M.xrepeat(\n  a: A?,\n  b: B?\n) -&gt;  iterator&lt;A,B&gt;\n</code></pre>"},{"location":"modules/fun/#mtabulate","title":"M.tabulate","text":"<pre><code>function M.tabulate(f: fun(n: integer) -&gt; (A,B)) -&gt;  iterator&lt;A,B&gt;\n</code></pre> <p>The iterator that returns fun(0), fun(1), fun(2), ... values indefinitely.</p>"},{"location":"modules/fun/#mzeros","title":"M.zeros","text":"<pre><code>function M.zeros() -&gt;  iterator&lt;0,nil&gt;\n</code></pre> <p>The iterator returns 0 indefinitely.</p>"},{"location":"modules/fun/#mones","title":"M.ones","text":"<pre><code>function M.ones() -&gt;  iterator&lt;1,nil&gt;\n</code></pre> <p>The iterator that returns 1 indefinitely.</p>"},{"location":"modules/fun/#mrands","title":"M.rands","text":"<pre><code>function M.rands(\n  n: integer,\n  m: integer?\n) -&gt;  iterator&lt;integer,nil&gt;\n</code></pre> <p>The iterator returns random values using math.random().</p> <p>If the n and m are set then the iterator returns pseudo-random integers in the [n, m) interval (i.e. m is not included)</p> <p>If the m is not set then the iterator generates pseudo-random integers in the [0, n) interval.</p>"},{"location":"modules/fun/#mnth","title":"M.nth","text":"<pre><code>function M.nth(\n  n: integer,\n  g: (table&lt;A,B&gt;|{ [A]: B }|iterator&lt;A,B&gt;)\n)\n -&gt;  A?\n -&gt;  B?\n\n</code></pre> <p>This function returns the n-th element of gen, param, state iterator.</p> <p>If the iterator does not have n items then nil is returned.</p>"},{"location":"modules/fun/#mhead","title":"M.head","text":"<pre><code>function M.head(g: (table&lt;A,B&gt;|{ [A]: B }|iterator&lt;A,B&gt;))\n -&gt;  A\n -&gt;  B\n\n</code></pre> <p>Extract the first element of gen, param, state iterator. If the iterator is empty then an error is raised.</p>"},{"location":"modules/fun/#mcar","title":"M.car","text":"<pre><code>function M.car(g: (table&lt;A,B&gt;|{ [A]: B }|iterator&lt;A,B&gt;))\n -&gt;  A\n -&gt;  B\n\n</code></pre>"},{"location":"modules/fun/#mtail","title":"M.tail","text":"<pre><code>function M.tail(g: (table&lt;A,B&gt;|{ [A]: B }|iterator&lt;A,B&gt;)) -&gt;  iterator&lt;A,B&gt;\n</code></pre> <p>Return a copy of gen, param, state iterator without its first element.</p> <p>If the iterator is empty then an empty iterator is returned.</p>"},{"location":"modules/fun/#mcdr","title":"M.cdr","text":"<pre><code>function M.cdr(g: (table&lt;A,B&gt;|{ [A]: B }|iterator&lt;A,B&gt;)) -&gt;  iterator&lt;A,B&gt;\n</code></pre>"},{"location":"modules/fun/#mtake_n","title":"M.take_n","text":"<pre><code>function M.take_n(\n  n: integer,\n  g: (table&lt;A,B&gt;|{ [A]: B }|iterator&lt;A,B&gt;)\n) -&gt;  iterator&lt;A,B&gt;\n</code></pre>"},{"location":"modules/fun/#mtake_while","title":"M.take_while","text":"<pre><code>function M.take_while(\n  predicate: predicate&lt;A,B&gt;,\n  g: (table&lt;A,B&gt;|{ [A]: B }|iterator&lt;A,B&gt;)\n) -&gt;  iterator&lt;A,B&gt;\n</code></pre> <p>Returns an iterator on the longest prefix of gen, param, state elements that satisfy predicate.</p>"},{"location":"modules/fun/#mtake","title":"M.take","text":"<pre><code>function M.take(\n  n_or_predicate: (fun(...) -&gt; ...|integer),\n  g: (table&lt;A,B&gt;|{ [A]: B }|iterator&lt;A,B&gt;)\n) -&gt;  iterator&lt;A,B&gt;\n</code></pre> <p>Alias for <code>fun.take_while</code> and <code>fun.take_n</code>.</p>"},{"location":"modules/fun/#mdrop_n","title":"M.drop_n","text":"<pre><code>function M.drop_n(\n  n: integer,\n  g: (table&lt;A,B&gt;|{ [A]: B }|iterator&lt;A,B&gt;)\n) -&gt;  iterator&lt;A,B&gt;\n</code></pre>"},{"location":"modules/fun/#mdrop_while","title":"M.drop_while","text":"<pre><code>function M.drop_while(\n  predicate: predicate&lt;A,B&gt;,\n  g: (table&lt;A,B&gt;|{ [A]: B }|iterator&lt;A,B&gt;)\n) -&gt;  iterator&lt;A,B&gt;\n</code></pre> <p>Returns an iterator of gen, param, state after skipping the longest prefix of elements that satisfy predicate.</p>"},{"location":"modules/fun/#mdrop","title":"M.drop","text":"<pre><code>function M.drop(\n  n_or_predicate: (fun(...) -&gt; ...|integer),\n  g: (table&lt;A,B&gt;|{ [A]: B }|iterator&lt;A,B&gt;)\n) -&gt;  iterator&lt;A,B&gt;\n</code></pre> <p>Alias for <code>fun.drop_while</code> and <code>fun.drop_n</code></p>"},{"location":"modules/fun/#msplit","title":"M.split","text":"<pre><code>function M.split(\n  n_or_fun: (fun(...) -&gt; ...|integer),\n  g: (table&lt;A,B&gt;|{ [A]: B }|iterator&lt;A,B&gt;)\n)\n -&gt;  iterator&lt;A,B&gt;\n -&gt;  iterator&lt;A,B&gt;\n\n</code></pre> <p>Return an iterator pair where the first operates on the longest prefix (possibly empty) of gen, param, state iterator of elements that satisfy predicate and second operates the remainder of gen, param, state iterator.</p> <p>Equivalent to:</p> <pre><code>  return take(n_or_fun, g), drop(n_or_fun, g, p, s);\n</code></pre>"},{"location":"modules/fun/#mspan","title":"M.span","text":"<pre><code>function M.span(\n  n_or_fun: (fun(...) -&gt; ...|integer),\n  g: (table&lt;A,B&gt;|{ [A]: B }|iterator&lt;A,B&gt;)\n)\n -&gt;  iterator&lt;A,B&gt;\n -&gt;  iterator&lt;A,B&gt;\n\n</code></pre>"},{"location":"modules/fun/#msplit_at","title":"M.split_at","text":"<pre><code>function M.split_at(\n  n_or_fun: (fun(...) -&gt; ...|integer),\n  g: (table&lt;A,B&gt;|{ [A]: B }|iterator&lt;A,B&gt;)\n)\n -&gt;  iterator&lt;A,B&gt;\n -&gt;  iterator&lt;A,B&gt;\n\n</code></pre>"},{"location":"modules/fun/#mindex","title":"M.index","text":"<pre><code>function M.index(\n  x: A,\n  g: (table&lt;A,B&gt;|{ [A]: B }|iterator&lt;A,B&gt;)\n) -&gt;  iterator&lt;A,B&gt;\n</code></pre> <p>Find an index of an element.</p> <p>The function returns the position of the first element in the given iterator which is equal (using ==) to the query element, or nil if there is no such element.</p>"},{"location":"modules/fun/#mindex_of","title":"M.index_of","text":"<pre><code>function M.index_of(\n  x: A,\n  g: (table&lt;A,B&gt;|{ [A]: B }|iterator&lt;A,B&gt;)\n) -&gt;  iterator&lt;A,B&gt;\n</code></pre>"},{"location":"modules/fun/#melem_index","title":"M.elem_index","text":"<pre><code>function M.elem_index(\n  x: A,\n  g: (table&lt;A,B&gt;|{ [A]: B }|iterator&lt;A,B&gt;)\n) -&gt;  iterator&lt;A,B&gt;\n</code></pre>"},{"location":"modules/fun/#mindexes","title":"M.indexes","text":"<pre><code>function M.indexes(\n  x: A,\n  g: (table&lt;A,B&gt;|{ [A]: B }|iterator&lt;A,B&gt;)\n) -&gt;  iterator&lt;integer,nil&gt;\n</code></pre> <p>The function returns an iterator to positions of elements which equals to the query element.</p>"},{"location":"modules/fun/#melem_indexes","title":"M.elem_indexes","text":"<pre><code>function M.elem_indexes(\n  x: A,\n  g: (table&lt;A,B&gt;|{ [A]: B }|iterator&lt;A,B&gt;)\n) -&gt;  iterator&lt;integer,nil&gt;\n</code></pre>"},{"location":"modules/fun/#mindices","title":"M.indices","text":"<pre><code>function M.indices(\n  x: A,\n  g: (table&lt;A,B&gt;|{ [A]: B }|iterator&lt;A,B&gt;)\n) -&gt;  iterator&lt;integer,nil&gt;\n</code></pre>"},{"location":"modules/fun/#melem_indices","title":"M.elem_indices","text":"<pre><code>function M.elem_indices(\n  x: A,\n  g: (table&lt;A,B&gt;|{ [A]: B }|iterator&lt;A,B&gt;)\n) -&gt;  iterator&lt;integer,nil&gt;\n</code></pre>"},{"location":"modules/fun/#mfilter","title":"M.filter","text":"<pre><code>function M.filter(\n  predicate: predicate&lt;A,B&gt;,\n  g: (table&lt;A,B&gt;|{ [A]: B }|iterator&lt;A,B&gt;)\n) -&gt;  iterator&lt;A,B&gt;\n</code></pre> <p>Return a new iterator of those elements that satisfy the predicate.</p>"},{"location":"modules/fun/#mremove_if","title":"M.remove_if","text":"<pre><code>function M.remove_if(\n  predicate: predicate&lt;A,B&gt;,\n  g: (table&lt;A,B&gt;|{ [A]: B }|iterator&lt;A,B&gt;)\n) -&gt;  iterator&lt;A,B&gt;\n</code></pre>"},{"location":"modules/fun/#mgrep","title":"M.grep","text":"<pre><code>function M.grep(\n  regex_or_predicate: (string|fun(...) -&gt; ...),\n  g: (table&lt;A,B&gt;|{ [A]: B }|iterator&lt;A,B&gt;)\n) -&gt;  iterator&lt;A,B&gt;\n</code></pre> <p>Return a new iterator of those elements that satisfy the predicate.</p>"},{"location":"modules/fun/#mpartition","title":"M.partition","text":"<pre><code>function M.partition(\n  predicate: predicate&lt;A,B&gt;,\n  g: (table&lt;A,B&gt;|{ [A]: B }|iterator&lt;A,B&gt;)\n)\n -&gt;  iterator&lt;A,B&gt;\n -&gt;  iterator&lt;A,B&gt;\n\n</code></pre> <p>The function returns two iterators where elements do and do not satisfy the predicate.</p> <p>The function make a clone of the source iterator. Iterators especially returned in tables to work with zip() and other functions.</p>"},{"location":"modules/fun/#mreduce","title":"M.reduce","text":"<pre><code>function M.reduce(\n  acc: fun(acc: R, a: A, b: B) -&gt; R,\n  initval: R,\n  g: (table&lt;A,B&gt;|{ [A]: B }|iterator&lt;A,B&gt;)\n) -&gt;  R\n</code></pre> <p>@param <code>acc</code> - an accumulating function</p> <p>@param <code>initval</code> - an initial value that passed to accfun on the first iteration</p> <p>The function reduces the iterator from left to right using the binary operator accfun and the initial value initval</p>"},{"location":"modules/fun/#mfoldl","title":"M.foldl","text":"<pre><code>function M.foldl(\n  acc: fun(acc: R, a: A, b: B) -&gt; R,\n  initval: R,\n  g: (table&lt;A,B&gt;|{ [A]: B }|iterator&lt;A,B&gt;)\n) -&gt;  R\n</code></pre> <p>@param <code>acc</code> - an accumulating function</p> <p>@param <code>initval</code> - an initial value that passed to accfun on the first iteration</p>"},{"location":"modules/fun/#mlength","title":"M.length","text":"<pre><code>function M.length(g: (table&lt;A,B&gt;|{ [A]: B }|iterator&lt;A,B&gt;)) -&gt; length integer\n</code></pre> <p>Returns a number of elements in gen, param, state iterator.</p>"},{"location":"modules/fun/#mis_null","title":"M.is_null","text":"<pre><code>function M.is_null(g: (table&lt;A,B&gt;|{ [A]: B }|iterator&lt;A,B&gt;)) -&gt;  boolean\n</code></pre> <p>Checks whether iterator has any elements inside.</p>"},{"location":"modules/fun/#mis_prefix_of","title":"M.is_prefix_of","text":"<pre><code>function M.is_prefix_of(\n  iter_x: iterator&lt;A,B&gt;,\n  iter_y: iterator&lt;A,B&gt;\n) -&gt; is_prefix boolean?\n</code></pre> <p>The function takes two iterators and returns true if the first iterator is a prefix of the second.</p> <p>The implementation of this method is somewhat doubtful. It checks only first 10 items of both iterators.</p>"},{"location":"modules/fun/#mall","title":"M.all","text":"<pre><code>function M.all(\n  predicate: predicate&lt;A,B&gt;,\n  g: (table&lt;A,B&gt;|{ [A]: B }|iterator&lt;A,B&gt;)\n) -&gt;  boolean\n</code></pre> <p>Returns true if all return values of iterator satisfy the predicate.</p>"},{"location":"modules/fun/#mevery","title":"M.every","text":"<pre><code>function M.every(\n  predicate: predicate&lt;A,B&gt;,\n  g: (table&lt;A,B&gt;|{ [A]: B }|iterator&lt;A,B&gt;)\n) -&gt;  boolean\n</code></pre>"},{"location":"modules/fun/#many","title":"M.any","text":"<pre><code>function M.any(\n  predicate: predicate&lt;A,B&gt;,\n  g: (table&lt;A,B&gt;|{ [A]: B }|iterator&lt;A,B&gt;)\n) -&gt;  boolean\n</code></pre> <p>Returns true if at least one return values of iterator satisfy the predicate.</p>"},{"location":"modules/fun/#msome","title":"M.some","text":"<pre><code>function M.some(\n  predicate: predicate&lt;A,B&gt;,\n  g: (table&lt;A,B&gt;|{ [A]: B }|iterator&lt;A,B&gt;)\n) -&gt;  boolean\n</code></pre>"},{"location":"modules/fun/#msum","title":"M.sum","text":"<pre><code>function M.sum(g: (number[]|iterator&lt;number,nil&gt;)) -&gt;  number\n</code></pre> <p>Sum up all iteration values.</p>"},{"location":"modules/fun/#mproduct","title":"M.product","text":"<pre><code>function M.product(g: (number[]|iterator&lt;number,nil&gt;)) -&gt;  number\n</code></pre> <p>Multiply all iteration values.</p>"},{"location":"modules/fun/#mmin","title":"M.min","text":"<pre><code>function M.min(g: (A[]|iterator&lt;A,nil&gt;)) -&gt;  A\n</code></pre> <p>Return a minimum value from the iterator using operator.min() or &lt; for numbers and other types respectively.</p> <p>The iterator must be non-null, otherwise an error is raised.</p>"},{"location":"modules/fun/#mminimum","title":"M.minimum","text":"<pre><code>function M.minimum(g: (A[]|iterator&lt;A,nil&gt;)) -&gt;  A\n</code></pre>"},{"location":"modules/fun/#mmax","title":"M.max","text":"<pre><code>function M.max(g: (A[]|iterator&lt;A,nil&gt;)) -&gt;  A\n</code></pre> <p>Return a minimum value from the iterator using operator.min() or &lt; for numbers and other types respectively.</p> <p>The iterator must be non-null, otherwise an error is raised.</p>"},{"location":"modules/fun/#mmaximum","title":"M.maximum","text":"<pre><code>function M.maximum(g: (A[]|iterator&lt;A,nil&gt;)) -&gt;  A\n</code></pre>"},{"location":"modules/fun/#mmax_by","title":"M.max_by","text":"<pre><code>function M.max_by(\n  cmp: comparator&lt;A&gt;,\n  g: (A[]|iterator&lt;A,nil&gt;)\n) -&gt;  A\n</code></pre> <p>Return a maximum value from the iterator using the cmp as a &gt; operator.</p> <p>The iterator must be non-null, otherwise an error is raised.</p>"},{"location":"modules/fun/#mmaximum_by","title":"M.maximum_by","text":"<pre><code>function M.maximum_by(\n  cmp: comparator&lt;A&gt;,\n  g: (A[]|iterator&lt;A,nil&gt;)\n) -&gt;  A\n</code></pre>"},{"location":"modules/fun/#mmin_by","title":"M.min_by","text":"<pre><code>function M.min_by(\n  cmp: comparator&lt;A&gt;,\n  g: (A[]|iterator&lt;A,nil&gt;)\n) -&gt;  A\n</code></pre> <p>Return a maximum value from the iterator using the cmp as a &gt; operator.</p> <p>The iterator must be non-null, otherwise an error is raised.</p>"},{"location":"modules/fun/#mminimum_by","title":"M.minimum_by","text":"<pre><code>function M.minimum_by(\n  cmp: comparator&lt;A&gt;,\n  g: (A[]|iterator&lt;A,nil&gt;)\n) -&gt;  A\n</code></pre>"},{"location":"modules/fun/#mtotable","title":"M.totable","text":"<pre><code>function M.totable(g: (A[]|iterator&lt;A,nil&gt;)) -&gt;  A[]\n</code></pre> <p>Returns a new table (array) from iterated values.</p>"},{"location":"modules/fun/#mtomap","title":"M.tomap","text":"<pre><code>function M.tomap(g: (table&lt;A,B&gt;|{ [A]: B }|iterator&lt;A,B&gt;)) -&gt;  table&lt;A,B&gt;\n</code></pre> <p>Returns a new table (map) from iterated values.</p>"},{"location":"modules/fun/#mmap","title":"M.map","text":"<pre><code>function M.map(\n  f: fun(a: A, b: B) -&gt; (C,D),\n  g: (table&lt;A,B&gt;|{ [A]: B }|iterator&lt;A,B&gt;)\n) -&gt;  iterator&lt;C,D&gt;\n</code></pre> <p>Return a new iterator by  applying the fun to each element of gen, param, state iterator.</p> <p>The mapping is performed on the fly and no values are buffered.</p>"},{"location":"modules/fun/#menumerate","title":"M.enumerate","text":"<pre><code>function M.enumerate(g: (table&lt;A,B&gt;|{ [A]: B }|iterator&lt;A,B&gt;)) -&gt;  iterator&lt;integer,A&gt;\n</code></pre> <p>Return a new iterator by enumerating all elements of the gen, param, state iterator starting from 1.</p> <p>The mapping is performed on the fly and no values are buffered.</p>"},{"location":"modules/fun/#mintersperse","title":"M.intersperse","text":"<pre><code>function M.intersperse(\n  x,\n  g\n)\n</code></pre> <p>Return a new iterator where the x value is interspersed between the elements of the source iterator.</p> <p>The x value can also be added as a last element of returning iterator if the source iterator contains the odd number of elements.</p>"},{"location":"modules/fun/#mzip","title":"M.zip","text":"<pre><code>function M.zip(...)\n</code></pre> <p>Return a new iterator where i-th return value contains the i-th element from each of the iterators.</p> <p>The returned iterator is truncated in length to the length of the shortest iterator.</p> <p>For multi-return iterators only the first variable is used.</p>"},{"location":"modules/fun/#mcycle","title":"M.cycle","text":"<pre><code>function M.cycle(g)\n</code></pre> <p>Make a new iterator that returns elements from {gen, param, state} iterator until the end and then \u201crestart\u201d iteration using a saved clone of {gen, param, state}.</p> <p>The returned iterator is constant space and no return values are buffered.</p> <p>Instead of that the function make a clone of the source {gen, param, state} iterator.</p> <p>Therefore, the source iterator must be pure functional to make an identical clone.</p> <p>Infinity iterators are supported, but are not recommended.</p>"},{"location":"modules/fun/#mchain","title":"M.chain","text":"<pre><code>function M.chain(...)\n</code></pre> <p>Make an iterator that returns elements from the first iterator until it is exhausted, then proceeds to the next iterator, until all of the iterators are exhausted.</p> <p>Used for treating consecutive iterators as a single iterator.</p> <p>Infinity iterators are supported, but are not recommended.</p>"},{"location":"modules/fun/#fields","title":"fields","text":""},{"location":"modules/fun/#mop","title":"M.op","text":"<pre><code>M.op: {\n    lt: fun(a: any, b: any) -&gt; boolean,\n    le: fun(a: any, b: any) -&gt; boolean,\n    eq: fun(a: any, b: any) -&gt; boolean,\n    ne: fun(a: any, b: any) -&gt; boolean,\n    ge: fun(a: any, b: any) -&gt; boolean,\n    gt: fun(a: any, b: any) -&gt; boolean,\n    add: fun(a: any, b: any) -&gt; any,\n    div: fun(a: any, b: any) -&gt; any,\n    mod: fun(a: any, b: any) -&gt; any,\n    mul: fun(a: any, b: any) -&gt; any,\n    pow: fun(a: any, b: any) -&gt; any,\n    sub: fun(a: any, b: any) -&gt; any,\n    ...\n}\n</code></pre>"},{"location":"modules/http.client/","title":"global http.client","text":"<p>Builtin <code>http.client</code> submodule</p> <p>The <code>http</code> module, specifically the <code>http.client</code> submodule, provides the functionality of an HTTP client with support for HTTPS and keepalive.</p> <p>The HTTP client uses the <code>libcurl</code> library under the hood and takes into account the environment variables libcurl understands.</p>"},{"location":"modules/http.client/#methods","title":"methods","text":""},{"location":"modules/http.client/#mnew","title":"M.new","text":"<pre><code>function M.new(options: http.client.options) -&gt;  http.client\n</code></pre>"},{"location":"modules/http.client/#mrequest","title":"M.request","text":"<pre><code>async function M.request(\n  method: string,\n  url: string,\n  body: string?,\n  opts: http.client.request.options?\n) -&gt;  http.response\n</code></pre> <p>Performs an HTTP request and, if there is a successful connection, will return a table with connection information.</p>"},{"location":"modules/http.client/#mpatch","title":"M.patch","text":"<pre><code>async function M.patch(\n  url: string,\n  body: string,\n  options: http.client.request.options?\n) -&gt;  http.response\n</code></pre> <p>Shortcut for <code>http.request(\"PATCH\", url, body, opts)</code></p>"},{"location":"modules/http.client/#moptions","title":"M.options","text":"<pre><code>async function M.options(\n  url: string,\n  options: http.client.request.options?\n) -&gt;  http.response\n</code></pre> <p>Shortcut for <code>http.request(\"OPTIONS\", url, nil, opts)</code></p>"},{"location":"modules/http.client/#mput","title":"M.put","text":"<pre><code>async function M.put(\n  url: string,\n  body: string,\n  options: http.client.request.options?\n) -&gt;  http.response\n</code></pre> <p>Shortcut for <code>http.request(\"PUT\", url, body, opts)</code></p>"},{"location":"modules/http.client/#mconnect","title":"M.connect","text":"<pre><code>async function M.connect(\n  url: string,\n  options: http.client.request.options?\n) -&gt;  http.response\n</code></pre> <p>Shortcut for <code>http.request(\"CONNECT\", url, body, opts)</code></p>"},{"location":"modules/http.client/#mdelete","title":"M.delete","text":"<pre><code>async function M.delete(\n  url: string,\n  options: http.client.request.options?\n) -&gt;  http.response\n</code></pre> <p>Shortcut for <code>http.request(\"DELETE\", url, body, opts)</code></p>"},{"location":"modules/http.client/#mpost","title":"M.post","text":"<pre><code>async function M.post(\n  url: string,\n  body: string,\n  options: http.client.request.options?\n) -&gt;  http.response\n</code></pre> <p>Shortcut for <code>http.request(\"POST\", url, body, opts)</code></p>"},{"location":"modules/http.client/#mtrace","title":"M.trace","text":"<pre><code>async function M.trace(\n  url: string,\n  options: http.client.request.options?\n) -&gt;  http.response\n</code></pre> <p>Shortcut for <code>http.request(\"TRACE\", url, body, opts)</code>.</p>"},{"location":"modules/http.client/#mhead","title":"M.head","text":"<pre><code>async function M.head(\n  url: string,\n  options: http.client.request.options?\n) -&gt;  http.response\n</code></pre> <p>Shortcut for <code>http.request(\"HEAD\", url, body, opts)</code>.</p>"},{"location":"modules/http.client/#mget","title":"M.get","text":"<pre><code>async function M.get(\n  url: string,\n  options: http.client.request.options?\n) -&gt;  http.response\n</code></pre> <p>Shortcut for <code>http.request(\"GET\", url, body, opts)</code>.</p>"},{"location":"modules/iconv/","title":"global iconv","text":"<p>Builtin <code>iconv</code> module</p> <p>The <code>iconv</code> module provides a way to convert a string with one encoding to a string with another encoding, for example from ASCII to UTF-8. It is based on the POSIX iconv routines.</p> <p>An exact list of the available encodings may depend on environment. Typically the list includes ASCII, BIG5, KOI8R, LATIN8, MS-GREEK, SJIS, and about 100 others. For a complete list, type <code>iconv --list</code> on a terminal.</p>"},{"location":"modules/iconv/#methods","title":"methods","text":""},{"location":"modules/iconv/#mnew","title":"M.new","text":"<pre><code>function M.new(\n  to: string,\n  from: string\n) -&gt; iconv iconv\n</code></pre> <p>@param <code>to</code> - the name of the encoding that we will convert to.</p> <p>@param <code>from</code> - the name of the encoding that we will convert from.</p> <p>@return <code>iconv</code> - a new iconv instance -- in effect, a callable function</p> <p>Construct a new iconv instance.</p> <p>If either parameter is not a valid name, there will be an error message.</p> <p>Example:</p> <pre><code> tarantool&gt; converter = require('iconv').new('UTF8', 'ASCII')\n ---\n ...\n</code></pre>"},{"location":"modules/jit.bc/","title":"global jit.bc","text":"<p>Builtin <code>jit.bc</code> submodule</p>"},{"location":"modules/jit.bc/#methods","title":"methods","text":""},{"location":"modules/jit.bc/#mdump","title":"M.dump","text":"<pre><code>function M.dump(f: function)\n</code></pre> <p>Prints the byte code of a function.</p> <p>Example:</p> <pre><code> tarantool&gt; jit_bc = require('jit.bc')\n ---\n ...\n\n tarantool&gt; function f()\n          &gt; print(\"D\")\n          &gt; end\n ---\n ...\n\n tarantool&gt; jit_bc.dump(f)\n -- BYTECODE -- 0x01113163c8:1-3\n 0001    GGET     0   0      ; \"print\"\n 0002    KSTR     2   1      ; \"D\"\n 0003    CALL     0   1   2\n 0004    RET0     0   1\n\n ---\n ...\n\n</code></pre> <pre><code> function f()\n   print(\"D\")\n end\n require('jit.bc').dump(f)\n</code></pre> <p>For a list of available options, read the source code of bc.lua.</p>"},{"location":"modules/jit.dis_x64/","title":"global jit.dis_x64","text":"<p>Builtin <code>jit.dis_x64</code> submodule</p>"},{"location":"modules/jit.dis_x64/#methods","title":"methods","text":""},{"location":"modules/jit.dis_x64/#mdisass","title":"M.disass","text":"<pre><code>function M.disass(code: string)\n</code></pre> <p>Prints the x86-64 assembler code of a string of bytes.</p> <p>Example:</p> <pre><code> tarantool&gt; -- Disassemble hexadecimal 97 which is the x86-64 code for xchg eax, edi\n ---\n ...\n\n tarantool&gt; jit_dis_x64 = require('jit.dis_x64')\n ---\n ...\n\n tarantool&gt; jit_dis_64.disass('\\x97')\n 00000000  97                xchg eax, edi\n ---\n ...\n</code></pre> <p>For a list of available options, read the source code of dis_x64.lua.</p>"},{"location":"modules/jit.dis_x86/","title":"global jit.dis_x86","text":"<p>Builtin <code>jit.dis_x86</code> submodule</p>"},{"location":"modules/jit.dis_x86/#methods","title":"methods","text":""},{"location":"modules/jit.dis_x86/#mdisass","title":"M.disass","text":"<pre><code>function M.disass(code: string)\n</code></pre> <p>Prints the i386 assembler code of a string of bytes.</p> <p>Example:</p> <pre><code> tarantool&gt; -- Disassemble hexadecimal 97 which is the x86 code for xchg eax, edi\n ---\n ...\n\n tarantool&gt; jit_dis_x86 = require('jit.dis_x86')\n ---\n ...\n\n tarantool&gt; jit_dis_86.disass('\\x97')\n 00000000  97                xchg eax, edi\n ---\n ...\n</code></pre> <p>For a list of available options, read the source code of dis_x86.lua.</p>"},{"location":"modules/jit.dump/","title":"global jit.dump","text":"<p>Builtin <code>jit.dump</code> submodule</p>"},{"location":"modules/jit.dump/#methods","title":"methods","text":""},{"location":"modules/jit.dump/#mon","title":"M.on","text":"<pre><code>function M.on(\n  option: string,\n  output_file: string\n)\n</code></pre> <p>Prints the intermediate or machine code of the following Lua code.</p> <p>Example:</p> <pre><code> tarantool&gt; -- Show the machine code of a Lua \"for\" loop\n tarantool&gt; jit_dump = require('jit.dump')\n tarantool&gt; jit_dump.on('m')\n tarantool&gt; x = 0;\n tarantool&gt; for i = 1, 1e6 do\n          &gt; x = x + i\n          &gt; end\n ---- TRACE 1 start 0x01047fbc38:1\n ---- TRACE 1 mcode 148\n 104c29f6b  mov dword [r14-0xed0], 0x1\n 104c29f76  cvttsd2si ebp, [rdx]\n 104c29f7a  rorx rbx, [rdx-0x10], 0x2f\n 104c29f81  shr rbx, 0x11\n 104c29f85  mov rdx, [rbx+0x10]\n 104c29f89  cmp dword [rdx+0x34], +0x3f\n 104c29f8d  jnz 0x104c1a010  -&gt;0\n 104c29f93  mov rcx, [rdx+0x28]\n 104c29f97  mov rdi, 0xfffd8001046b3d58\n 104c29fa1  cmp rdi, [rcx+0x320]\n 104c29fa8  jnz 0x104c1a010  -&gt;0\n 104c29fae  lea rax, [rcx+0x318]\n 104c29fb5  cmp dword [rax+0x4], 0xfff90000\n 104c29fbc  jnb 0x104c1a010  -&gt;0\n 104c29fc2  xorps xmm7, xmm7\n 104c29fc5  cvtsi2sd xmm7, ebp\n 104c29fc9  addsd xmm7, [rax]\n 104c29fcd  movsd [rax], xmm7\n 104c29fd1  add ebp, +0x01\n 104c29fd4  cmp ebp, 0x000f4240\n 104c29fda  jg 0x104c1a014   -&gt;1\n -&gt;LOOP:\n 104c29fe0  xorps xmm6, xmm6\n 104c29fe3  cvtsi2sd xmm6, ebp\n 104c29fe7  addsd xmm7, xmm6\n 104c29feb  movsd [rax], xmm7\n 104c29fef  add ebp, +0x01\n 104c29ff2  cmp ebp, 0x000f4240\n 104c29ff8  jle 0x104c29fe0  -&gt;LOOP\n 104c29ffa  jmp 0x104c1a01c  -&gt;3\n ---- TRACE 1 stop -&gt; loop\n\n ---\n ...\n\n tarantool&gt; print(x)\n 500000500000\n ---\n ...\n\n tarantool&gt; jit_dump.off()\n ---\n ...\n</code></pre> <p>For a list of available options, read the source code of dump.lua.</p>"},{"location":"modules/jit.dump/#moff","title":"M.off","text":"<pre><code>function M.off()\n</code></pre> <p>Disable printing the intermediate or machine code of the following Lua code.</p> <p>@see jit.dump.on</p>"},{"location":"modules/jit/","title":"global jit","text":"<p>Builtin <code>jit</code> module</p> <p>The <code>jit</code> module has functions for tracing the LuaJIT Just-In-Time compiler's progress, showing the byte-code or assembler output that the compiler produces, and in general providing information about what LuaJIT does with Lua code.</p>"},{"location":"modules/jit/#methods","title":"methods","text":""},{"location":"modules/jit/#mdump","title":"M.dump","text":"<pre><code>function M.dump(f: function)\n</code></pre> <p>Prints the byte code of a function.</p> <p>Example:</p> <pre><code> tarantool&gt; jit_bc = require('jit.bc')\n ---\n ...\n\n tarantool&gt; function f()\n &gt; print(\"D\")\n &gt; end\n ---\n ...\n\n tarantool&gt; jit_bc.dump(f)\n -- BYTECODE -- 0x01113163c8:1-3\n 0001    GGET     0   0      ; \"print\"\n 0002    KSTR     2   1      ; \"D\"\n 0003    CALL     0   1   2\n 0004    RET0     0   1\n\n ---\n ...\n</code></pre> <pre><code> function f()\n     print(\"D\")\n end\n require('jit.bc').dump(f)\n</code></pre> <p>For a list of available options, read the source code of bc.lua.</p>"},{"location":"modules/jit.v/","title":"global jit.v","text":"<p>Builtin <code>jit.v</code> submodule</p>"},{"location":"modules/jit.v/#methods","title":"methods","text":""},{"location":"modules/jit.v/#mon","title":"M.on","text":"<pre><code>function M.on(\n  option: string,\n  output_file: string\n)\n</code></pre> <p>Prints a trace of LuaJIT's progress compiling and interpreting code.</p> <p>Example:</p> <pre><code> tarantool&gt; -- Show what LuaJIT is doing for a Lua \"for\" loop\n tarantool&gt; jit_v = require('jit.v')\n tarantool&gt; jit_v.on()\n tarantool&gt; l = 0\n tarantool&gt; for i = 1, 1e6 do\n          &gt;     l = l + i\n          &gt; end\n [TRACE   3 \"for i = 1, 1e6 do\n     l = l + i\n end\":1 loop]\n ---\n ...\n\n tarantool&gt; print(l)\n 500000500000\n ---\n ...\n\n tarantool&gt; jit_v.off()\n ---\n ...\n</code></pre> <p>For a list of available options, read the source code of v.lua.</p> <pre><code>\n\n\n\n\n\n\n\n### M.off\n---\n```lua\nfunction M.off()\n</code></pre> <p>Disable printing a trace of LuaJIT's progress compiling and interpreting code.</p>"},{"location":"modules/json/","title":"global json","text":""},{"location":"modules/json/#methods","title":"methods","text":""},{"location":"modules/json/#mcfg","title":"M.cfg","text":"<pre><code>function M.cfg(cfg: json.cfg)\n</code></pre> <p>Set values that affect the behavior of <code>json.encode</code> and <code>json.decode</code></p> <p>The values are all either integers or boolean <code>true</code>/<code>false</code>.</p>"},{"location":"modules/json/#mencode","title":"M.encode","text":"<pre><code>function M.encode(\n  value: any,\n  cfg: json.cfg?\n) -&gt;  string\n</code></pre> <p>@param <code>value</code> - either a scalar value or a Lua table value</p> <p>@param <code>cfg</code> - configuration</p> <p>Convert a Lua object to a JSON string.</p> <p>Example:</p> <pre><code> tarantool&gt; json.encode(setmetatable({'A', 'B'}, { __serialize=\"seq\"}))\n ---\n - '[\"A\",\"B\"]'\n ...\n tarantool&gt; json.encode(setmetatable({'A', 'B'}, { __serialize=\"map\"}))\n ---\n - '{\"1\":\"A\",\"2\":\"B\"}'\n ...\n tarantool&gt; json.encode({setmetatable({f1 = 'A', f2 = 'B'}, { __serialize=\"map\"})})\n ---\n - '[{\"f2\":\"B\",\"f1\":\"A\"}]'\n ...\n tarantool&gt; json.encode({setmetatable({f1 = 'A', f2 = 'B'}, { __serialize=\"seq\"})})\n ---\n - '[[]]'\n ...\n</code></pre>"},{"location":"modules/json/#mdecode","title":"M.decode","text":"<pre><code>function M.decode(\n  str: string,\n  cfg: json.cfg?\n) -&gt;  any\n</code></pre> <p>@param <code>str</code> - a string formatted as JSON</p> <p>@param <code>cfg</code> - configuration</p> <p>Convert a JSON string to a Lua object.</p> <p>Example:</p> <pre><code> tarantool&gt; json = require('json')\n ---\n ...\n tarantool&gt; json.decode('123')\n ---\n - 123\n ...\n tarantool&gt; json.decode('[123, \"hello\"]')\n ---\n - [123, 'hello']\n ...\n tarantool&gt; json.decode('{\"hello\": \"world\"}').hello\n ---\n - world\n ...\n</code></pre> <p>See the tutorial <code>Sum a JSON field for all tuples</code> to see how <code>json.decode()</code> can fit in an application.</p>"},{"location":"modules/json/#fields","title":"fields","text":""},{"location":"modules/json/#mnull","title":"M.NULL","text":"<pre><code>M.NULL : unknown\n</code></pre> <p>A value comparable to Lua \"nil\" which may be useful as a placeholder in a tuple.</p>"},{"location":"modules/log/","title":"global log","text":""},{"location":"modules/log/#methods","title":"methods","text":""},{"location":"modules/log/#logwarn","title":"log.warn","text":"<pre><code>function log.warn(\n  s: any,\n  ...: any\n)\n</code></pre> <p>Log a message with the warn level.</p> <ul> <li>A message can be a string.</li> <li>A message may contain C-style format specifiers <code>%d</code> or <code>%s</code>. Example:</li> <li>A message may be a scalar data type or a table. Example:</li> </ul> <p>The actual output will be a line in the log, containing: * The current timestamp * A module name * 'E', 'W', 'I', 'V' or 'D' depending on the called function. * <code>message</code>.</p> <p>Example:</p> <pre><code> local log = require('log')\n log.cfg { level = 'verbose' }\n log.warn('Warning message')\n log.info('Tarantool version: %s', box.info.version)\n log.error({ 500, 'Internal error' })\n log.debug('Debug message')\n</code></pre> <p>Note that the message will not be logged if the severity level corresponding to the called function is less than <code>log.level</code>.</p>"},{"location":"modules/log/#loginfo","title":"log.info","text":"<pre><code>function log.info(\n  s: any,\n  ...: any\n)\n</code></pre> <p>Log a message with the info level.</p> <ul> <li>A message can be a string.</li> <li>A message may contain C-style format specifiers <code>%d</code> or <code>%s</code>. Example:</li> <li>A message may be a scalar data type or a table. Example:</li> </ul> <p>The actual output will be a line in the log, containing: * The current timestamp * A module name * 'E', 'W', 'I', 'V' or 'D' depending on the called function. * <code>message</code>.</p> <p>Example:</p> <pre><code> local log = require('log')\n log.cfg { level = 'verbose' }\n log.warn('Warning message')\n log.info('Tarantool version: %s', box.info.version)\n log.error({ 500, 'Internal error' })\n log.debug('Debug message')\n</code></pre> <p>Note that the message will not be logged if the severity level corresponding to the called function is less than <code>log.level</code>.</p>"},{"location":"modules/log/#logerror","title":"log.error","text":"<pre><code>function log.error(\n  s: any,\n  ...: any\n)\n</code></pre> <p>Log a message with the error level.</p> <ul> <li>A message can be a string.</li> <li>A message may contain C-style format specifiers <code>%d</code> or <code>%s</code>. Example:</li> <li>A message may be a scalar data type or a table. Example:</li> </ul> <p>The actual output will be a line in the log, containing: * The current timestamp * A module name * 'E', 'W', 'I', 'V' or 'D' depending on the called function. * <code>message</code>.</p> <p>Example:</p> <pre><code> local log = require('log')\n log.cfg { level = 'verbose' }\n log.warn('Warning message')\n log.info('Tarantool version: %s', box.info.version)\n log.error({ 500, 'Internal error' })\n log.debug('Debug message')\n</code></pre> <p>Note that the message will not be logged if the severity level corresponding to the called function is less than <code>log.level</code>.</p>"},{"location":"modules/log/#logverbose","title":"log.verbose","text":"<pre><code>function log.verbose(\n  s: any,\n  ...: any\n)\n</code></pre> <p>Log a message with the verbose level.</p> <ul> <li>A message can be a string.</li> <li>A message may contain C-style format specifiers <code>%d</code> or <code>%s</code>. Example:</li> <li>A message may be a scalar data type or a table. Example:</li> </ul> <p>The actual output will be a line in the log, containing: * The current timestamp * A module name * 'E', 'W', 'I', 'V' or 'D' depending on the called function. * <code>message</code>.</p> <p>Example:</p> <pre><code> local log = require('log')\n log.cfg { level = 'verbose' }\n log.warn('Warning message')\n log.info('Tarantool version: %s', box.info.version)\n log.error({ 500, 'Internal error' })\n log.debug('Debug message')\n</code></pre> <p>Note that the message will not be logged if the severity level corresponding to the called function is less than <code>log.level</code>.</p>"},{"location":"modules/log/#logdebug","title":"log.debug","text":"<pre><code>function log.debug(\n  s: any,\n  ...: any\n)\n</code></pre> <p>Log a message with the debug level.</p> <ul> <li>A message can be a string.</li> <li>A message may contain C-style format specifiers <code>%d</code> or <code>%s</code>. Example:</li> <li>A message may be a scalar data type or a table. Example:</li> </ul> <p>The actual output will be a line in the log, containing: * The current timestamp * A module name * 'E', 'W', 'I', 'V' or 'D' depending on the called function. * <code>message</code>.</p> <p>Example:</p> <pre><code> local log = require('log')\n log.cfg { level = 'verbose' }\n log.warn('Warning message')\n log.info('Tarantool version: %s', box.info.version)\n log.error({ 500, 'Internal error' })\n log.debug('Debug message')\n</code></pre> <p>Note that the message will not be logged if the severity level corresponding to the called function is less than <code>log.level</code>.</p>"},{"location":"modules/log/#loglevel","title":"log.level","text":"<pre><code>function log.level(lvl: number?)\n</code></pre> <p>Set log level.</p>"},{"location":"modules/log/#lognew","title":"log.new","text":"<pre><code>function log.new(name: string) -&gt;  log\n</code></pre> <p>Create a new logger with the specified name.</p> <p>Since 2.11.0</p> <p>You can configure a specific log level for a new logger using the <code>log.modules</code> configuration property.</p>"},{"location":"modules/net.box/","title":"global net.box","text":"<p>Builtin <code>net.box</code> module.</p> <p>The <code>net.box</code> module contains connectors to remote database systems. One variant is for connecting to MySQL or MariaDB or PostgreSQL (see SQL DBMS modules reference).</p> <p>The other variant, which is discussed in this section, is for connecting to Tarantool server instances via a network.</p>"},{"location":"modules/net.box/#methods","title":"methods","text":""},{"location":"modules/net.box/#mconnect","title":"M.connect","text":"<pre><code>async function M.connect(\n  endpoint: uri_like,\n  options: net.box.connect_options?\n) -&gt;  net.box.conn\n</code></pre> <p>Creates a new connection to Tarantool.</p> <p>The connection is established on demand, at the time of the first request.</p> <p>It can be re-established automatically after a disconnect (see <code>reconnect_after</code> option below).</p> <p>The returned <code>conn</code> object supports methods for making remote requests, such as <code>select</code>, <code>update</code> or <code>delete</code>.</p> <p>If <code>reconnect_after</code> is greater than zero, then <code>wait_connected</code> ignores transient failures. The wait completes once the connection is established or is closed explicitly.</p> <ul> <li><code>reconnect_after</code>: a number of seconds to wait before reconnecting.</li> </ul> <p>The default value, as with the other <code>connect</code> options, is <code>nil</code>. If <code>reconnect_after</code> is greater than zero, then a <code>net.box</code> instance will attempt to reconnect if a connection is lost or a connection attempt fails. This makes transient network failures transparent to the application.</p> <p>Reconnection happens automatically in the background, so requests that initially fail due to connection drops fail, are transparently retried. The number of retries is unlimited, connection retries are made after any specified interval (for example, <code>reconnect_after=5</code> means that reconnect attempts are made every 5 seconds). When a connection is explicitly closed or when the Lua garbage collector removes it, then reconnect attempts stop.</p> <ul> <li><code>connect_timeout</code>: a number of seconds to wait before returning \"error: Connection timed out\".</li> <li><code>fetch_schema</code>: a boolean option that controls fetching schema changes from the server. Default: <code>true</code>. If you don't operate with remote spaces, for example, run only <code>call</code> or <code>eval</code>, set <code>fetch_schema</code> to false` to avoid fetching schema changes which is not needed in this case.</li> </ul> <p>Important: In connections with <code>fetch_schema == false</code>, remote spaces are unavailable and the <code>on_schema_reload</code> triggers don't work.</p> <ul> <li><code>required_protocol_version</code>: a minimum version of the IPROTO protocol supported by the server. If the version of the IPROTO protocol supported by the server is lower than specified, the connection will fail with an error message.</li> </ul> <p>With <code>required_protocol_version = 1</code>, all connections fail where the IPROTO protocol version is lower than <code>1</code>.</p> <ul> <li><code>required_protocol_features</code>: specified IPROTO protocol features supported by the server. You can specify one or more <code>net.box</code> features from the table below. If the server does not support the specified features, the connection will fail with an error message.</li> </ul> <p>With <code>required_protocol_features = {'transactions'}</code>, all connections fail where the server has <code>transactions: false</code>.</p> <ul> <li>net.box feature Use IPROTO feature ID IPROTO versions supporting the feature</li> <li><code>streams</code> Requires streams support on the server IPROTO_FEATURE_STREAMS 1 and newer</li> <li><code>transactions</code> Requires transactions support on the server IPROTO_FEATURE_TRANSACTIONS 1 and newer</li> <li><code>error_extension</code> Requires support for <code>MP_ERROR</code> MsgPack extension on the server IPROTO_FEATURE_ERROR_EXTENSION 2 and newer</li> <li><code>watchers</code> Requires remote <code>watchers</code> support on the server IPROTO_FEATURE_WATCHERS 3 and newer</li> </ul> <p>To learn more about IPROTO features, see <code>IPROTO_ID</code> and the [<code>IPROTO_FEATURES]</code>(doc://internals-iproto-keys-features) key.</p> <p>Examples:</p> <pre><code> net_box = require('net.box')\n\n conn = net_box.connect('localhost:3301')\n conn = net_box.connect('127.0.0.1:3302', {wait_connected = false})\n conn = net_box.connect('127.0.0.1:3304', {required_protocol_version = 4, required_protocol_features = {'transactions', 'streams'}, })\n</code></pre>"},{"location":"modules/net.box/#mnew","title":"M.new","text":"<pre><code>async function M.new(\n  endpoint: string,\n  options: net.box.connect_options?\n) -&gt;  net.box.conn\n</code></pre> <p>Creates connection to Tarantool.</p> <p><code>new()</code> is a synonym for <code>connect()</code>. It is retained for backward compatibility.</p> <p>For more information, see the description of <code>net_box.connect()</code>.</p> <p>@see net.box.connect</p>"},{"location":"modules/socket/","title":"global socket","text":"<p>Builtin <code>socket</code> module.</p> <p>The <code>socket</code> module allows exchanging data via BSD sockets with a local or remote host in connection-oriented (TCP) or datagram-oriented (UDP) mode. Semantics of the calls in the <code>socket</code> API closely follow semantics of the corresponding POSIX calls.</p>"},{"location":"modules/socket/#methods","title":"methods","text":""},{"location":"modules/socket/#socket_moduletcp_connect","title":"socket_module.tcp_connect","text":"<pre><code>async function socket_module.tcp_connect(\n  host: string,\n  port: (number|string)?,\n  timeout: number?\n)\n -&gt;  socket\n -&gt;  nil\n -&gt; error_message string\n\n</code></pre> <p>@param <code>host</code> - URL or IP address</p> <p>@param <code>port</code> - port number string for unix socket</p> <p>@param <code>timeout</code> - number of seconds to wait</p> <p>Connect a socket to a remote host.</p>"},{"location":"modules/socket/#socket_modulegetaddrinfo","title":"socket_module.getaddrinfo","text":"<pre><code>async function socket_module.getaddrinfo(\n  host: string,\n  port: (number|string),\n  timeout: number?,\n  options: { family: string, flags: any, ... }?\n)\n -&gt;  {...}[]?\n -&gt; error_message string\n\n</code></pre> <p>@param <code>host</code> - URL or IP address</p> <p>@param <code>port</code> - port number as a numeric or string</p> <p>@param <code>timeout</code> - maximum number of seconds to wait</p> <p>The socket.getaddrinfo() function is useful for finding information about a remote site so that the correct arguments for sock:sysconnect() can be passed. This function may use the worker_pool_threads configuration parameter.</p>"},{"location":"modules/socket/#socket_moduletcp_server","title":"socket_module.tcp_server","text":"<pre><code>async function socket_module.tcp_server(\n  host: string,\n  port: number,\n  handler: (fun(client: socket)|socket.tcp_server_handler),\n  timeout: number?\n)\n -&gt;  socket\n -&gt;  nil\n -&gt; error_message string\n\n</code></pre> <p>@param <code>host</code> - host name or IP</p> <p>@param <code>port</code> - host port, may be 0</p> <p>@param <code>handler</code> - what to execute when a connection occurs</p> <p>@param <code>timeout</code> - host resolving timeout in seconds</p> <p>The socket.tcp_server() function makes Tarantool act as a server that can accept connections.</p>"},{"location":"modules/socket/#socket_modulebind","title":"socket_module.bind","text":"<pre><code>function socket_module.bind(\n  host: string,\n  port: number\n)\n -&gt;  socket\n -&gt;  nil\n -&gt; error_message string\n\n</code></pre> <p>@param <code>host</code> - URL or IP address</p> <p>@param <code>port</code> - port number</p> <p>Bind a socket to the given host/port.</p>"},{"location":"modules/socket/#socket_moduleiowait","title":"socket_module.iowait","text":"<pre><code>async function socket_module.iowait(\n  fd: number,\n  read_or_write_flags: (\"R\"|\"W\"|\"RW\"|1|2|3),\n  timeout: number?\n)\n</code></pre> <p>@param <code>fd</code> - file descriptor</p> <p>@param <code>read_or_write_flags</code> - 'R' or 1 = read, 'W' or 2 = write, 'RW' or 3 = read|write.</p> <p>@param <code>timeout</code> - number of seconds to wait</p> <p>Wait until read-or-write activity occurs for a file descriptor.</p> <p>If the fd parameter is nil, then there will be a sleep until the timeout.</p> <p>If the timeout parameter is nil or unspecified, then timeout is infinite.</p>"},{"location":"modules/strict/","title":"global strict","text":"<p>Builtin <code>strict</code> module</p> <p>The strict module has functions for turning \"strict mode\" on or off. When strict mode is on, an attempt to use an undeclared global variable will cause an error. A global variable is considered \u201cundeclared\u201d if it has never had a value assigned to it. Often this is an indication of a programming error.</p> <p>By default strict mode is off, unless tarantool was built with the -DCMAKE_BUILD_TYPE=Debug option</p>"},{"location":"modules/strict/#methods","title":"methods","text":""},{"location":"modules/strict/#mon","title":"M.on","text":"<pre><code>function M.on()\n</code></pre> <p>Enables strict mode.</p>"},{"location":"modules/strict/#moff","title":"M.off","text":"<pre><code>function M.off()\n</code></pre> <p>Disables strict mode.</p>"},{"location":"modules/uri/","title":"global uri","text":""},{"location":"modules/uri/#methods","title":"methods","text":""},{"location":"modules/uri/#mparse","title":"M.parse","text":"<pre><code>function M.parse(uri_string: string) -&gt;  uri\n</code></pre> <p>@param <code>uri_string</code> - a Uniform Resource Identifier</p> <p>Parse a URI string into components.</p> <p>Example:</p> <pre><code> local uri = require('uri')\n\n parsed_uri = uri.parse('https://www.tarantool.io/doc/latest/reference/reference_lua/http/#api-reference')\n --[[\n ---\n - host: www.tarantool.io\n   fragment: api-reference\n   scheme: https\n   path: /doc/latest/reference/reference_lua/http/\n ...\n --]]\n</code></pre>"},{"location":"modules/uri/#mformat","title":"M.format","text":"<pre><code>function M.format(\n  uri_format: uri,\n  include_password: boolean?\n) -&gt;  string\n</code></pre> <p>@param <code>uri_format</code> - a series of name=value pairs, one for each component</p> <p>@param <code>include_password</code> - If this is supplied and is true, then the password component is rendered in clear text, otherwise it is omitted.</p> <p>Construct a URI from the specified components.</p> <p>Example:</p> <pre><code> formatted_uri = uri.format({ scheme = 'https',\n                              host = 'www.tarantool.io',\n                              path = '/doc/latest/reference/reference_lua/http/',\n                              fragment = 'api-reference' })\n --[[\n ---\n - https://www.tarantool.io/doc/latest/reference/reference_lua/http/#api-reference\n ...\n --]]\n</code></pre>"},{"location":"modules/uri/#mescape","title":"M.escape","text":"<pre><code>function M.escape(\n  str: string,\n  uri_encoding_opts: uri.encoding_opt\n) -&gt;  string\n</code></pre> <p>Encode a string using the specified encoding options.</p> <p>Since 2.11.0</p> <p>Examples:</p> <pre><code> escaped_string = uri.escape('C++')\n --[[\n ---\n - C%2B%2B\n ...\n --]]\n</code></pre> <pre><code> escaped_string_url_enc = uri.escape('John Smith', uri.FORM_URLENCODED)\n --[[\n ---\n - John+Smith\n ...\n --]]\n</code></pre> <pre><code> local escape_opts = {\n     plus = true,\n     unreserved = uri.unreserved(\"a-z\")\n }\n escaped_string_custom = uri.escape('Hello World', escape_opts)\n --[[\n ---\n - '%48ello+%57orld'\n ...\n --]]\n</code></pre>"},{"location":"modules/uri/#munescape","title":"M.unescape","text":"<pre><code>function M.unescape(\n  str: string,\n  uri_encoding_opts: uri.encoding_opt\n) -&gt;  string\n</code></pre> <p>Decode a string using the specified encoding options.</p> <p>Since 2.11.0</p> <p>By default, <code>uri.escape()</code> uses encoding options defined by the <code>uri.RFC3986</code> table.</p> <p>If required, you can customize encoding options using the <code>uri_encoding_opts</code> optional parameter, for example: * Pass the predefined set of options targeted for encoding a specific URI part (for example, <code>uri.PATH</code> or <code>uri.QUERY</code>). * Pass custom encoding options using the uri.encoding_opts object.</p> <p>Examples:</p> <pre><code> unescaped_string = uri.unescape('C%2B%2B')\n --[[\n ---\n - C++\n ...\n --]]\n</code></pre> <pre><code> unescaped_string_url_enc = uri.unescape('John+Smith', uri.FORM_URLENCODED)\n --[[\n ---\n - John Smith\n ...\n --]]\n</code></pre> <pre><code> local escape_opts = {\n     plus = true,\n     unreserved = uri.unreserved(\"a-z\")\n }\n unescaped_string_custom = uri.unescape('%48ello+%57orld', escape_opts)\n --[[\n ---\n - Hello World\n ...\n --]]\n</code></pre>"},{"location":"modules/uri/#fields","title":"fields","text":""},{"location":"modules/uri/#mrfc3986","title":"M.RFC3986","text":"<pre><code>M.RFC3986 : uri.encoding_opt\n</code></pre> <p>Encoding options that use unreserved symbols defined in RFC 3986</p>"},{"location":"modules/uri/#mpath","title":"M.PATH","text":"<pre><code>M.PATH : uri.encoding_opt\n</code></pre> <p>Options used to encode the <code>path</code> URI component</p>"},{"location":"modules/uri/#mpath_part","title":"M.PATH_PART","text":"<pre><code>M.PATH_PART : uri.encoding_opt\n</code></pre> <p>Options used to encode specific <code>path</code> parts</p>"},{"location":"modules/uri/#mquery","title":"M.QUERY","text":"<pre><code>M.QUERY : uri.encoding_opt\n</code></pre> <p>Options used to encode the <code>query</code> URI component</p>"},{"location":"modules/uri/#mquery_part","title":"M.QUERY_PART","text":"<pre><code>M.QUERY_PART : uri.encoding_opt\n</code></pre> <p>Options used to encode specific <code>query</code> parts</p>"},{"location":"modules/uri/#mfragment","title":"M.FRAGMENT","text":"<pre><code>M.FRAGMENT : uri.encoding_opt\n</code></pre> <p>Options used to encode the <code>fragment</code> URI component</p>"},{"location":"modules/uri/#mform_urlencoded","title":"M.FORM_URLENCODED","text":"<pre><code>M.FORM_URLENCODED : uri.encoding_opt\n</code></pre> <p>Options used to encode <code>application/x-www-form-urlencoded</code> form parameters</p>"},{"location":"modules/uuid/","title":"global uuid","text":"<p>Builtin <code>uuid</code> module</p> <p>A \"UUID\" is a Universally unique identifier.</p> <p>If an application requires that a value be unique only within a single computer or on a single database, then a simple counter is better than a UUID, because getting a UUID is time-consuming (it requires a syscall). For clusters of computers, or widely distributed applications, UUIDs are better.</p> <p>Tarantool generates UUIDs following the rules for RFC 4122 version 4 variant 1.</p>"},{"location":"modules/uuid/#methods","title":"methods","text":""},{"location":"modules/uuid/#mnew","title":"M.new","text":"<pre><code>function M.new() -&gt;  uuid\n</code></pre> <p>Create a UUID sequence. You can use it in an index over a uuid field.</p> <p>Since 2.4.1</p> <p>For example, to create such index for a space named <code>test</code>, say:</p> <pre><code> tarantool&gt; box.space.test:create_index(\"pk\", {parts={{field = 1, type = 'uuid'}}})\n</code></pre> <p>Now you can insert UUIDs into the space:</p> <pre><code> tarantool&gt; box.space.test:insert{uuid.new()}\n ---\n - [e631fdcc-0e8a-4d2f-83fd-b0ce6762b13f]\n ...\n\n tarantool&gt; box.space.test:insert{uuid.fromstr('64d22e4d-ac92-4a23-899a-e59f34af5479')}\n ---\n - [64d22e4d-ac92-4a23-899a-e59f34af5479]\n ...\n\n tarantool&gt; box.space.test:select{}\n ---\n - - [64d22e4d-ac92-4a23-899a-e59f34af5479]\n - [e631fdcc-0e8a-4d2f-83fd-b0ce6762b13f]\n ...\n</code></pre>"},{"location":"modules/uuid/#mbin","title":"M.bin","text":"<pre><code>function M.bin(byte_order: uuid.byte_order?) -&gt; uuid string\n</code></pre> <p>@param <code>byte_order</code> - Byte order of the resulting UUID</p> <p>@return <code>uuid</code> - 16-byte string</p> <p>Get UUID as 16-byte string.</p>"},{"location":"modules/uuid/#mstr","title":"M.str","text":"<pre><code>function M.str() -&gt; uuid string\n</code></pre> <p>@return <code>uuid</code> - 36-byte binary string</p> <p>Get UUID as 36-byte hexadecimal string.</p>"},{"location":"modules/uuid/#mfromstr","title":"M.fromstr","text":"<pre><code>function M.fromstr(uuid_str: string) -&gt; uuid uuid\n</code></pre> <p>@param <code>uuid_str</code> - UUID in 36-byte hexadecimal string</p> <p>@return <code>uuid</code> - converted UUID</p> <p>Convert hexadecimal 36-byte string to an UUID object.</p>"},{"location":"modules/uuid/#mfrombin","title":"M.frombin","text":"<pre><code>function M.frombin(\n  uuid_bin: string,\n  byte_order: uuid.byte_order?\n) -&gt; uuid uuid\n</code></pre> <p>@param <code>uuid_bin</code> - UUID in 16-byte binary string</p> <p>@param <code>byte_order</code> - Byte order of the resulting UUID</p> <p>@return <code>uuid</code> - converted UUID</p> <p>Convert binary 16-byte string to an UUID object.</p>"},{"location":"modules/uuid/#mis_uuid","title":"M.is_uuid","text":"<pre><code>function M.is_uuid(value: any) -&gt; is_uuid boolean\n</code></pre> <p>@return <code>is_uuid</code> - true if the specified value is a uuid, and false otherwise</p> <p>Check if the object is UUID.</p> <p>Since 2.6.1</p>"},{"location":"modules/uuid/#mis_nil","title":"M.is_nil","text":"<pre><code>function M.is_nil(value: nilany) -&gt; is_nil boolean\n</code></pre> <p>@return <code>is_nil</code> - true if the specified value is a nil uuid, and false otherwise</p> <p>Check if the UUID is <code>nil</code>.</p> <p>The all-zero UUID value can be expressed as <code>uuid.NULL</code>, or as <code>uuid.fromstr('00000000-0000-0000-0000-000000000000')</code>.</p> <p>The comparison with an all-zero value can also be expressed as <code>uuid_with_type_cdata == uuid.NULL</code>.</p> <p>Example:</p> <pre><code> tarantool&gt; uuid = require('uuid')\n ---\n ...\n tarantool&gt; uuid(), uuid.bin(), uuid.str()\n ---\n - 16ffedc8-cbae-4f93-a05e-349f3ab70baa\n - !!binary FvG+Vy1MfUC6kIyeM81DYw==\n - 67c999d2-5dce-4e58-be16-ac1bcb93160f\n ...\n tarantool&gt; uu = uuid()\n ---\n ...\n tarantool&gt; #uu:bin(), #uu:str(), type(uu), uu:isnil()\n ---\n - 16\n - 36\n - cdata\n - false\n ...\n</code></pre>"},{"location":"modules/uuid/#fields","title":"fields","text":""},{"location":"modules/uuid/#mnull","title":"M.NULL","text":"<pre><code>M.NULL : uuid {\n    bin: function,\n    str: function,\n}\n</code></pre> <p>Zero UUID.</p> <p>Equivalent to <code>uuid.fromstr('00000000-0000-0000-0000-000000000000')</code>.</p>"},{"location":"modules/xlog/","title":"global xlog","text":"<p>Builtin <code>xlog</code> module.</p> <p>The xlog module contains one function: <code>pairs()</code>.</p> <p>It can be used to read Tarantool's snapshot files or write-ahead-log (WAL) files. Ade scription of the file format is in section Data persistence and the WAL file format.</p>"},{"location":"modules/xlog/#methods","title":"methods","text":""},{"location":"modules/xlog/#mparis","title":"M.paris","text":"<pre><code>function M.paris(file: string) -&gt;  iterator&lt;any,nil&gt;\n</code></pre> <p>Open a file, and allow iterating over one file entry at a time.</p> <p>Possible errors: File does not contain properly formatted snapshot or write-ahead-log information.</p> <p>Example:</p> <p>This will read the first write-ahead-log (WAL) file that was created in the wal_dir directory in our \"Getting started\" exercises.</p> <p>Each result from <code>pairs()</code> is formatted with MsgPack so its structure can be specified with __serialize.</p> <pre><code> xlog = require('xlog')\n t = {}\n for k, v in xlog.pairs('00000000000000000000.xlog') do\n   table.insert(t, setmetatable(v, { __serialize = \"map\"}))\n end\n return t\n</code></pre> <p>The first lines of the result will look like:</p> <pre><code> (...)\n ---\n - - {'BODY':   {'space_id': 272, 'index_base': 1, 'key': ['max_id'],\n                 'tuple': [['+', 2, 1]]},\n      'HEADER': {'type': 'UPDATE', 'timestamp': 1477846870.8541,\n                 'lsn': 1, 'server_id': 1}}\n   - {'BODY':   {'space_id': 280,\n                  'tuple': [512, 1, 'tester', 'memtx', 0, {}, []]},\n      'HEADER': {'type': 'INSERT', 'timestamp': 1477846870.8597,\n                 'lsn': 2, 'server_id': 1}}\n</code></pre>"},{"location":"modules/yaml/","title":"global yaml","text":"<p>Builtin <code>yaml</code> module.</p> <p>The <code>yaml</code> module takes strings in YAML format and decodes them, or takes a series of non-YAML values and encodes them.</p> <p>The YAML collection style can be specified with <code>__serialize</code>: * <code>__serialize=\"sequence\"</code> for a Block Sequence array, * <code>__serialize=\"seq\"</code> for a Flow Sequence array, * <code>__serialize=\"mapping\"</code> for a Block Mapping map, * <code>__serialize=\"map\"</code> for a Flow Mapping map.</p> <p>Example:</p> <p>Serializing <code>'A'</code> and <code>'B'</code> with different <code>__serialize</code> values causes different results:</p> <pre><code> tarantool&gt; yaml = require('yaml')\n ---\n ...\n\n tarantool&gt; print(yaml.encode(setmetatable({'A', 'B'}, { __serialize=\"sequence\"})))\n ---\n - A\n - B\n ...\n\n ---\n ...\n\n tarantool&gt; print(yaml.encode(setmetatable({'A', 'B'}, { __serialize=\"seq\"})))\n --- ['A', 'B']\n ...\n\n ---\n ...\n\n tarantool&gt; print(yaml.encode({setmetatable({f1 = 'A', f2 = 'B'}, { __serialize=\"map\"})}))\n ---\n - {'f2': 'B', 'f1': 'A'}\n ...\n\n ---\n ...\n</code></pre>"},{"location":"modules/yaml/#methods","title":"methods","text":""},{"location":"modules/yaml/#mcfg","title":"M.cfg","text":"<pre><code>function M.cfg(cfg: yaml.cfg)\n</code></pre> <p>Set values affecting the behavior of encode and decode functions.</p> <p>Example #1:</p> <p>The following code will encode 0/0 as NaN (\"not a number\") and 1/0 as Inf (\"infinity\"), rather than returning nil or an error message:</p> <pre><code> yaml = require('yaml')\n yaml.cfg{encode_invalid_numbers = true}\n x = 0/0\n y = 1/0\n yaml.encode({1, x, y, 2})\n</code></pre> <p>The result of the <code>yaml.encode()</code> request will look like this:</p> <pre><code> tarantool&gt; yaml.encode({1, x, y, 2})\n ---\n - '[1,nan,inf,2]\n ...\n</code></pre> <p>Example #2:</p> <p>To avoid generating errors on attempts to encode unknown data types as userdata/cdata, you can use this code:</p> <pre><code> tarantool&gt; httpc = require('http.client').new()\n ---\n ...\n\n tarantool&gt; yaml.encode(httpc.curl)\n ---\n - error: unsupported Lua type 'userdata'\n ...\n\n tarantool&gt; yaml.encode(httpc.curl, {encode_use_tostring=true})\n ---\n - '\"userdata: 0x010a4ef2a0\"'\n ...\n</code></pre> <p>Note:</p> <p>To achieve the same effect for only one call to <code>yaml.encode()</code> (i.e. without changing the configuration permanently), you can use <code>yaml.encode({1, x, y, 2}, {encode_invalid_numbers = true})</code>.</p> <p>Similar configuration settings exist for <code>json</code> and <code>MsgPack</code>.</p>"},{"location":"modules/yaml/#mencode","title":"M.encode","text":"<pre><code>function M.encode(\n  value: any,\n  cfg: yaml.cfg?\n) -&gt;  string\n</code></pre> <p>@param <code>value</code> - either a scalar value or a Lua table value</p> <p>@param <code>cfg</code> - configuration</p> <p>Convert a Lua object to a YAML string.</p>"},{"location":"modules/yaml/#mdecode","title":"M.decode","text":"<pre><code>function M.decode(\n  str: string,\n  cfg: yaml.cfg?\n) -&gt;  any\n</code></pre> <p>@param <code>str</code> - a string formatted as yaml</p> <p>@param <code>cfg</code> - configuration</p> <p>Convert a YAML string to a Lua object.</p>"},{"location":"modules/yaml/#fields","title":"fields","text":""},{"location":"modules/yaml/#mnull","title":"M.NULL","text":"<pre><code>M.NULL : unknown\n</code></pre> <p>A value comparable to Lua \"nil\" which may be useful as a placeholder in a tuple.</p> <p>Example:</p> <pre><code> tarantool&gt; yaml = require('yaml')\n ---\n ...\n tarantool&gt; y = yaml.encode({'a', 1, 'b', 2})\n ---\n ...\n tarantool&gt; z = yaml.decode(y)\n ---\n ...\n tarantool&gt; z[1], z[2], z[3], z[4]\n ---\n - a\n - 1\n - b\n - 2\n ...\n tarantool&gt; if yaml.NULL == nil then print('hi') end\n hi\n ---\n ...\n</code></pre>"},{"location":"types/array/","title":"alias array","text":"<pre><code>(alias) array = tuple_type[]\n</code></pre> <p>Tarantool array</p>"},{"location":"types/box.begin_options/","title":"class begin_options","text":"<ul> <li>namespace: box</li> </ul>"},{"location":"types/box.begin_options/#fields","title":"fields","text":""},{"location":"types/box.begin_options/#begin_optionstxn_isolation","title":"begin_options.txn_isolation","text":"<pre><code>begin_options.txn_isolation : box.txn_isolation?\n</code></pre> <p>the transaction isolation level (default: best-effort)</p>"},{"location":"types/box.begin_options/#begin_optionstimeout","title":"begin_options.timeout","text":"<pre><code>begin_options.timeout : in_seconds?\n</code></pre> <p>Number a timeout, after which the transaction is rolled back</p>"},{"location":"types/box.cfg.election_mode/","title":"alias election_mode","text":"<ul> <li>namespace: box.cfg</li> </ul> <pre><code>(alias) election_mode = (\"candidate\"|\"off\"|\"voter\")\n    | \"candidate\"\n    | \"off\"\n    | \"voter\"\n\n</code></pre>"},{"location":"types/box.cfg.log/","title":"alias log","text":"<ul> <li>namespace: box.cfg</li> </ul> <pre><code>(alias) log = (\"file: \"|\"pipe: \"|\"syslog:identity= \"|\"syslog:facility= \"|\"syslog:identity= ,facility= \"|\"syslog:server= \")\n    | \"file: \"\n    | \"pipe: \"\n    | \"syslog:identity= \"\n    | \"syslog:facility= \"\n    | \"syslog:identity= ,facility= \"\n    | \"syslog:server= \"\n\n</code></pre>"},{"location":"types/box.cfg.log_format/","title":"alias log_format","text":"<ul> <li>namespace: box.cfg</li> </ul> <pre><code>(alias) log_format = (\"plain\"|\"json\")\n    | \"plain\"\n    | \"json\"\n\n</code></pre>"},{"location":"types/box.cfg.log_level/","title":"alias log_level","text":"<ul> <li>namespace: box.cfg</li> </ul> <pre><code>(alias) log_level = (1|2|3|4|5|6|7)\n    | 1 -- SYSERROR\n    | 2 -- ERROR\n    | 3 -- CRITICAL\n    | 4 -- WARNING\n    | 5 -- INFO\n    | 6 -- VERBOSE\n    | 7 -- DEBUG\n\n</code></pre>"},{"location":"types/box.cfg/","title":"class cfg","text":"<ul> <li> <p>supers: table</p> </li> <li> <p>namespace: box</p> </li> </ul> <p>Builtin <code>box.cfg</code> submodule</p> <p>The <code>box.cfg</code> submodule is used for specifying server configuration parameters.</p> <p>To view the current configuration, say <code>box.cfg</code> without braces.</p> <pre><code> tarantool&gt; box.cfg\n ---\n - checkpoint_count: 2\n   too_long_threshold: 0.5\n   slab_alloc_factor: 1.05\n   memtx_max_tuple_size: 1048576\n   background: false\n   &lt;...&gt;\n ...\n</code></pre> <p>To set particular parameters, use the following syntax: <code>box.cfg{key = value [, key = value ...]}</code> (further referred to as <code>box.cfg{...}</code> for short). For example:</p> <pre><code> tarantool&gt; box.cfg{listen = 3301}\n</code></pre> <p>Parameters that are not specified in the <code>box.cfg{...}</code> call explicitly will be set to the default values.</p> <p>The first call to <code>box.cfg{...}</code> (with or without parameters) initiates Tarantool's database module <code>box</code>.</p> <p><code>box.cfg{...}</code> is also the command that reloads persistent data files into RAM upon restart once we have data.</p>"},{"location":"types/box.cfg/#fields","title":"fields","text":""},{"location":"types/box.cfg/#cfgbackground","title":"cfg.background","text":"<pre><code>cfg.background : boolean?\n</code></pre> <p>(default: false)</p>"},{"location":"types/box.cfg/#cfgcheckpoint_count","title":"cfg.checkpoint_count","text":"<pre><code>cfg.checkpoint_count : integer?\n</code></pre> <p>(Default: 2) The maximum number of snapshots that may exist on the memtx_dir directory before the checkpoint daemon will delete old snapshots</p>"},{"location":"types/box.cfg/#cfgcheckpoint_interval","title":"cfg.checkpoint_interval","text":"<pre><code>cfg.checkpoint_interval : number?\n</code></pre> <p>(Default: 3600 (one hour)) The interval between actions by the checkpoint daemon, in seconds. If checkpoint_interval is set to a value greater than zero, and there is activity which causes change to a database, then the checkpoint daemon will call box.snapshot() every checkpoint_interval seconds, creating a new snapshot file each time. If checkpoint_interval is set to zero, then the checkpoint daemon is disabled</p>"},{"location":"types/box.cfg/#cfgcheckpoint_wal_threshold","title":"cfg.checkpoint_wal_threshold","text":"<pre><code>cfg.checkpoint_wal_threshold : number?\n</code></pre> <p>(Default: 10^18 (a large number so in effect there is no limit by default)) The threshold for the total size in bytes of all WAL files created since the last checkpoint</p>"},{"location":"types/box.cfg/#cfgcoredump","title":"cfg.coredump","text":"<pre><code>cfg.coredump : boolean?\n</code></pre> <p>(Default: false) DEPRECATED, DO NOT USE</p>"},{"location":"types/box.cfg/#cfgcustom_proc_title","title":"cfg.custom_proc_title","text":"<pre><code>cfg.custom_proc_title : string?\n</code></pre> <p>(Default: nil) Add the given string to the server\u2019s process title</p>"},{"location":"types/box.cfg/#cfgboxcfgelection_mode","title":"cfg.box.cfg.election_mode","text":"<pre><code>cfg.box.cfg.election_mode : box.cfg.election_mode?\n</code></pre> <p>(Default: off) enables RAFT</p>"},{"location":"types/box.cfg/#cfgfeedback_enabled","title":"cfg.feedback_enabled","text":"<pre><code>cfg.feedback_enabled : boolean?\n</code></pre> <p>(Default: true) Whether to send feedback</p>"},{"location":"types/box.cfg/#cfgfeedback_host","title":"cfg.feedback_host","text":"<pre><code>cfg.feedback_host : string?\n</code></pre> <p>(Default: 'https://feedback.tarantool.io') The address to which the packet is sent. Usually the recipient is Tarantool, but it can be any URL</p>"},{"location":"types/box.cfg/#cfgfeedback_interval","title":"cfg.feedback_interval","text":"<pre><code>cfg.feedback_interval : number?\n</code></pre> <p>(Default: 3600) The number of seconds between sendings, usually 3600 (1 hour).</p>"},{"location":"types/box.cfg/#cfgforce_recovery","title":"cfg.force_recovery","text":"<pre><code>cfg.force_recovery : boolean?\n</code></pre> <p>(Default: false) If force_recovery equals true, Tarantool tries to continue if there is an error while reading a snapshot file (at server instance start) or a write-ahead log file (at server instance start or when applying an update at a replica): skips invalid records, reads as much data as possible and lets the process finish with a warning. Users can prevent the error from recurring by writing to the database and executing box.snapshot()</p>"},{"location":"types/box.cfg/#cfghot_standby","title":"cfg.hot_standby","text":"<pre><code>cfg.hot_standby : boolean?\n</code></pre> <p>(Default: false) Whether to start the server in hot standby mode. Hot standby is a feature which provides a simple form of failover without replication</p>"},{"location":"types/box.cfg/#cfginstance_uuid","title":"cfg.instance_uuid","text":"<pre><code>cfg.instance_uuid : string?\n</code></pre> <p>(Generated automatically) For replication administration purposes, it is possible to set the universally unique identifiers of the instance (instance_uuid) and the replica set (replicaset_uuid), instead of having the system generate the values</p>"},{"location":"types/box.cfg/#cfgio_collect_interval","title":"cfg.io_collect_interval","text":"<pre><code>cfg.io_collect_interval : number?\n</code></pre> <p>(Default: nil) The instance will sleep for io_collect_interval seconds between iterations of the event loop. Can be used to reduce CPU load in deployments in which the number of client connections is large, but requests are not so frequent (for example, each connection issues just a handful of requests per second)</p>"},{"location":"types/box.cfg/#cfgiproto_threads","title":"cfg.iproto_threads","text":"<pre><code>cfg.iproto_threads : integer?\n</code></pre> <p>(Default: 1) The number of network threads</p>"},{"location":"types/box.cfg/#cfglisten","title":"cfg.listen","text":"<pre><code>cfg.listen : (string|integer)?\n</code></pre> <p>(Default: nil) URI to bind tarantool</p>"},{"location":"types/box.cfg/#cfglog","title":"cfg.log","text":"<pre><code>cfg.log : box.cfg.log?\n</code></pre> <p>(Default: nil) By default, Tarantool sends the log to the standard error stream (stderr). If log is specified, Tarantool sends the log to a file, or to a pipe, or to the system logger.</p>"},{"location":"types/box.cfg/#cfgboxcfglog_format","title":"cfg.box.cfg.log_format","text":"<pre><code>cfg.box.cfg.log_format : box.cfg.log_format?\n</code></pre> <p>(Default: 'plain')</p>"},{"location":"types/box.cfg/#cfgboxcfglog_level","title":"cfg.box.cfg.log_level","text":"<pre><code>cfg.box.cfg.log_level : box.cfg.log_level?\n</code></pre> <p>(Default: 5) What level of detail the log will have</p>"},{"location":"types/box.cfg/#cfglog_nonblock","title":"cfg.log_nonblock","text":"<pre><code>cfg.log_nonblock : boolean?\n</code></pre> <p>(Default: true) If log_nonblock equals true, Tarantool does not block during logging when the system is not ready for writing, and drops the message instead</p>"},{"location":"types/box.cfg/#cfgmemtx_dir","title":"cfg.memtx_dir","text":"<pre><code>cfg.memtx_dir : string?\n</code></pre> <p>(Default: '.') path to dir with memtx snapshots</p>"},{"location":"types/box.cfg/#cfgmemtx_max_tuple_size","title":"cfg.memtx_max_tuple_size","text":"<pre><code>cfg.memtx_max_tuple_size : integer?\n</code></pre> <p>(Default: 1024 * 1024) Size of the largest allocation unit, for the memtx storage engine. It can be increased if it is necessary to store large tuples</p>"},{"location":"types/box.cfg/#cfgmemtx_memory","title":"cfg.memtx_memory","text":"<pre><code>cfg.memtx_memory : integer?\n</code></pre> <p>(Default: 256 * 1024 *1024) How much memory Tarantool allocates to actually store tuples</p>"},{"location":"types/box.cfg/#cfgmemtx_min_tuple_size","title":"cfg.memtx_min_tuple_size","text":"<pre><code>cfg.memtx_min_tuple_size : integer?\n</code></pre> <p>(Default: 16) Size of the smallest allocation unit. It can be decreased if most of the tuples are very small</p>"},{"location":"types/box.cfg/#cfgmemtx_use_mvcc_engine","title":"cfg.memtx_use_mvcc_engine","text":"<pre><code>cfg.memtx_use_mvcc_engine : boolean?\n</code></pre> <p>(Default: false) Since version 2.6.1. Enables transactional manager if set to true.</p>"},{"location":"types/box.cfg/#cfgnet_msg_max","title":"cfg.net_msg_max","text":"<pre><code>cfg.net_msg_max : number?\n</code></pre> <p>(Default: 768) To handle messages, Tarantool allocates fibers. To prevent fiber overhead from affecting the whole system, Tarantool restricts how many messages the fibers handle, so that some pending requests are blocked</p>"},{"location":"types/box.cfg/#cfgpid_file","title":"cfg.pid_file","text":"<pre><code>cfg.pid_file : string?\n</code></pre> <p>(Default: nil) Store the process id in this file</p>"},{"location":"types/box.cfg/#cfgreadahead","title":"cfg.readahead","text":"<pre><code>cfg.readahead : integer?\n</code></pre> <p>(Default: 16320) The size of the read-ahead buffer associated with a client connection</p>"},{"location":"types/box.cfg/#cfgread_only","title":"cfg.read_only","text":"<pre><code>cfg.read_only : boolean?\n</code></pre> <p>(Default: false) should this instance be RO</p>"},{"location":"types/box.cfg/#cfgreplicaset_uuid","title":"cfg.replicaset_uuid","text":"<pre><code>cfg.replicaset_uuid : string?\n</code></pre> <p>(Generated automatically)</p>"},{"location":"types/box.cfg/#cfgreplication","title":"cfg.replication","text":"<pre><code>cfg.replication : string[]?\n</code></pre> <p>(Default: nil) list of URI of replicas to connect to</p>"},{"location":"types/box.cfg/#cfgreplication_anon","title":"cfg.replication_anon","text":"<pre><code>cfg.replication_anon : boolean?\n</code></pre> <p>(Default: false) A Tarantool replica can be anonymous. This type of replica is read-only (but you still can write to temporary and replica-local spaces), and it isn\u2019t present in the _cluster table</p>"},{"location":"types/box.cfg/#cfgreplication_connect_quorum","title":"cfg.replication_connect_quorum","text":"<pre><code>cfg.replication_connect_quorum : integer?\n</code></pre> <p>(Default: _cluster:len()) required number of connected replicas to start bootstrap</p>"},{"location":"types/box.cfg/#cfgreplication_connect_timeout","title":"cfg.replication_connect_timeout","text":"<pre><code>cfg.replication_connect_timeout : number?\n</code></pre> <p>(Default: 30) timeout in seconds to expect replicas in replication to fail bootstrap</p>"},{"location":"types/box.cfg/#cfgreplication_synchro_quorum","title":"cfg.replication_synchro_quorum","text":"<pre><code>cfg.replication_synchro_quorum : (string|integer)?\n</code></pre> <p>(Default: N / 2 + 1. Before version 2.10.0, the default value was 1) number or formula of synchro quorum</p>"},{"location":"types/box.cfg/#cfgreplication_skip_conflict","title":"cfg.replication_skip_conflict","text":"<pre><code>cfg.replication_skip_conflict : boolean?\n</code></pre> <p>(Default: false) By default, if a replica adds a unique key that another replica has added, replication stops with error = ER_TUPLE_FOUND</p>"},{"location":"types/box.cfg/#cfgreplication_sync_lag","title":"cfg.replication_sync_lag","text":"<pre><code>cfg.replication_sync_lag : number?\n</code></pre> <p>(Default: 10) The maximum lag allowed for a replica</p>"},{"location":"types/box.cfg/#cfgreplication_sync_timeout","title":"cfg.replication_sync_timeout","text":"<pre><code>cfg.replication_sync_timeout : number?\n</code></pre> <p>(Default: 300) The number of seconds that a replica will wait when trying to sync with a master in a cluster, or a quorum of masters, after connecting or during configuration update</p>"},{"location":"types/box.cfg/#cfgreplication_timeout","title":"cfg.replication_timeout","text":"<pre><code>cfg.replication_timeout : number?\n</code></pre> <p>(Default: 1) If the master has no updates to send to the replicas, it sends heartbeat messages every replication_timeout seconds, and each replica sends an ACK packet back. Both master and replicas are programmed to drop the connection if they get no response in four replication_timeout periods. If the connection is dropped, a replica tries to reconnect to the master</p>"},{"location":"types/box.cfg/#cfgslab_alloc_factor","title":"cfg.slab_alloc_factor","text":"<pre><code>cfg.slab_alloc_factor : number?\n</code></pre> <p>(Default: 1.05) The multiplier for computing the sizes of memory chunks that tuples are stored in. A lower value may result in less wasted memory depending on the total amount of memory available and the distribution of item sizes. Allowed values range from 1 to 2</p>"},{"location":"types/box.cfg/#cfgsnap_io_rate_limit","title":"cfg.snap_io_rate_limit","text":"<pre><code>cfg.snap_io_rate_limit : number?\n</code></pre> <p>(Default: nil) Reduce the throttling effect of box.snapshot() on INSERT/UPDATE/DELETE performance by setting a limit on how many megabytes per second it can write to disk. The same can be achieved by splitting wal_dir and memtx_dir locations and moving snapshots to a separate disk</p>"},{"location":"types/box.cfg/#cfgsql_cache_size","title":"cfg.sql_cache_size","text":"<pre><code>cfg.sql_cache_size : integer?\n</code></pre> <p>(Default: 5242880) The maximum number of bytes in the cache for SQL prepared statements</p>"},{"location":"types/box.cfg/#cfgstrip_core","title":"cfg.strip_core","text":"<pre><code>cfg.strip_core : boolean?\n</code></pre> <p>(Default: true) Whether coredump files should include memory allocated for tuples</p>"},{"location":"types/box.cfg/#cfgtoo_long_threshold","title":"cfg.too_long_threshold","text":"<pre><code>cfg.too_long_threshold : number?\n</code></pre> <p>(Default: 0.5) If processing a request takes longer than the given value (in seconds), warn about it in the log. Has effect only if log_level is more than or equal to 4 (WARNING)</p>"},{"location":"types/box.cfg/#cfgtxn_isolation","title":"cfg.txn_isolation","text":"<pre><code>cfg.txn_isolation : txn_isolation?\n</code></pre> <p>(Default: best-effort)</p>"},{"location":"types/box.cfg/#cfgusername","title":"cfg.username","text":"<pre><code>cfg.username : string?\n</code></pre> <p>(Default: nil) UNIX user name to switch to after start</p>"},{"location":"types/box.cfg/#cfgvinyl_bloom_fpr","title":"cfg.vinyl_bloom_fpr","text":"<pre><code>cfg.vinyl_bloom_fpr : number?\n</code></pre> <p>(Default: 0.05) Bloom filter false positive rate \u2013 the suitable probability of the bloom filter to give a wrong result</p>"},{"location":"types/box.cfg/#cfgvinyl_cache","title":"cfg.vinyl_cache","text":"<pre><code>cfg.vinyl_cache : integer?\n</code></pre> <p>(Default: 128 * 1024 * 1024) The cache size for the vinyl storage engine</p>"},{"location":"types/box.cfg/#cfgvinyl_dir","title":"cfg.vinyl_dir","text":"<pre><code>cfg.vinyl_dir : string?\n</code></pre> <p>(Default: '.') A directory where vinyl files or subdirectories will be stored. Can be relative to work_dir. If not specified, defaults to work_dir</p>"},{"location":"types/box.cfg/#cfgvinyl_max_tuple_size","title":"cfg.vinyl_max_tuple_size","text":"<pre><code>cfg.vinyl_max_tuple_size : integer?\n</code></pre> <p>(Default: 1024 * 1024) Size of the largest allocation unit, for the vinyl storage engine. It can be increased if it is necessary to store large tuples</p>"},{"location":"types/box.cfg/#cfgvinyl_memory","title":"cfg.vinyl_memory","text":"<pre><code>cfg.vinyl_memory : integer?\n</code></pre> <p>(Default: 128 * 1024 * 1024) The maximum number of in-memory bytes that vinyl uses</p>"},{"location":"types/box.cfg/#cfgvinyl_page_size","title":"cfg.vinyl_page_size","text":"<pre><code>cfg.vinyl_page_size : integer?\n</code></pre> <p>(Default: 8 * 1024) Page size. Page is a read/write unit for vinyl disk operations. The vinyl_page_size setting is a default value for one of the options in the Options for space_object:create_index() chart</p>"},{"location":"types/box.cfg/#cfgvinyl_range_size","title":"cfg.vinyl_range_size","text":"<pre><code>cfg.vinyl_range_size : number?\n</code></pre> <p>(Default: nil) The default maximum range size for a vinyl index, in bytes. The maximum range size affects the decision whether to split a range. If vinyl_range_size is not nil and not 0, then it is used as the default value for the range_size option in the Options for space_object:create_index() chart. If vinyl_range_size is nil or 0, and range_size is not specified when the index is created, then Tarantool sets a value later depending on performance considerations. To see the actual value, use index_object:stat().range_size</p>"},{"location":"types/box.cfg/#cfgvinyl_read_threads","title":"cfg.vinyl_read_threads","text":"<pre><code>cfg.vinyl_read_threads : integer?\n</code></pre> <p>(Default: 1) The maximum number of read threads that vinyl can use for some concurrent operations, such as I/O and compression</p>"},{"location":"types/box.cfg/#cfgvinyl_run_count_per_level","title":"cfg.vinyl_run_count_per_level","text":"<pre><code>cfg.vinyl_run_count_per_level : integer?\n</code></pre> <p>(Default: 2) The maximal number of runs per level in vinyl LSM tree. If this number is exceeded, a new level is created. The vinyl_run_count_per_level setting is a default value for one of the options in the Options for space_object:create_index() chart</p>"},{"location":"types/box.cfg/#cfgvinyl_run_size_ratio","title":"cfg.vinyl_run_size_ratio","text":"<pre><code>cfg.vinyl_run_size_ratio : number?\n</code></pre> <p>(Default: 3.5) Ratio between the sizes of different levels in the LSM tree. The vinyl_run_size_ratio setting is a default value for one of the options in the Options for space_object:create_index() chart</p>"},{"location":"types/box.cfg/#cfgvinyl_timeout","title":"cfg.vinyl_timeout","text":"<pre><code>cfg.vinyl_timeout : number?\n</code></pre> <p>(Default: 60) The vinyl storage engine has a scheduler which does compaction. When vinyl is low on available memory, the compaction scheduler may be unable to keep up with incoming update requests. In that situation, queries may time out after vinyl_timeout seconds. This should rarely occur, since normally vinyl would throttle inserts when it is running low on compaction bandwidth. Compaction can also be ordered manually with index_object:compact()</p>"},{"location":"types/box.cfg/#cfgvinyl_write_threads","title":"cfg.vinyl_write_threads","text":"<pre><code>cfg.vinyl_write_threads : integer?\n</code></pre> <p>(Default: 4) The maximum number of write threads that vinyl can use for some concurrent operations, such as I/O and compression</p>"},{"location":"types/box.cfg/#cfgwal_cleanup_delay","title":"cfg.wal_cleanup_delay","text":"<pre><code>cfg.wal_cleanup_delay : number?\n</code></pre> <p>(Default: 14400 seconds) The delay (in seconds) used to prevent the Tarantool garbage collector from immediately removing write-ahead log files after a node restart.</p>"},{"location":"types/box.cfg/#cfgwal_dir","title":"cfg.wal_dir","text":"<pre><code>cfg.wal_dir : string?\n</code></pre> <p>(Default: '.') path to dir with xlogs</p>"},{"location":"types/box.cfg/#cfgwal_dir_rescan_delay","title":"cfg.wal_dir_rescan_delay","text":"<pre><code>cfg.wal_dir_rescan_delay : number?\n</code></pre> <p>(Default: 2) Number of seconds between periodic scans of the write-ahead-log file directory, when checking for changes to write-ahead-log files for the sake of replication or hot standby</p>"},{"location":"types/box.cfg/#cfgwal_max_size","title":"cfg.wal_max_size","text":"<pre><code>cfg.wal_max_size : integer?\n</code></pre> <p>(Default: 256 * 1024 * 1024) The maximum number of bytes in a single write-ahead log file. When a request would cause an .xlog file to become larger than wal_max_size, Tarantool creates another WAL file</p>"},{"location":"types/box.cfg/#cfgboxcfgwal_mode","title":"cfg.box.cfg.wal_mode","text":"<pre><code>cfg.box.cfg.wal_mode : box.cfg.wal_mode?\n</code></pre> <p>(Default: 'write') Specify fiber-WAL-disk synchronization mode as</p>"},{"location":"types/box.cfg/#cfgworker_pool_threads","title":"cfg.worker_pool_threads","text":"<pre><code>cfg.worker_pool_threads : integer?\n</code></pre> <p>(Default: 4) he maximum number of threads to use during execution of certain internal processes (currently socket.getaddrinfo() and coio_call())</p>"},{"location":"types/box.cfg/#cfgwork_dir","title":"cfg.work_dir","text":"<pre><code>cfg.work_dir : string?\n</code></pre> <p>(Default: nil) path to work dir of tarantool</p>"},{"location":"types/box.cfg.wal_mode/","title":"alias wal_mode","text":"<ul> <li>namespace: box.cfg</li> </ul> <pre><code>(alias) wal_mode = (\"none\"|\"write\"|\"fsync\")\n    | \"none\" -- Write-ahead log is not maintained. A node with box.cfg.wal_mode = none can\u2019t be replication master.\n    | \"write\" -- Fibers wait for their data to be written to the write-ahead log (no fsync(2)).\n    | \"fsync\" -- Fibers wait for their data, fsync(2) follows each write(2).\n\n</code></pre>"},{"location":"types/box.ctl.recovery_state/","title":"alias recovery_state","text":"<ul> <li>namespace: box.ctl</li> </ul> <pre><code>(alias) recovery_state = ()\n\n</code></pre>"},{"location":"types/box.error/","title":"class error","text":"<ul> <li> <p>supers: ffi.cdata*</p> </li> <li> <p>namespace: box</p> </li> </ul>"},{"location":"types/box.error/#methods","title":"methods","text":""},{"location":"types/box.error/#errorunpack","title":"error.unpack","text":"<pre><code>function error.unpack() -&gt;  box.error.table\n</code></pre> <p>Get error details that may include an error code, type, message, and trace.</p>"},{"location":"types/box.error/#errorraise","title":"error.raise","text":"<pre><code>function error.raise()\n</code></pre> <p>Raise the current error.</p>"},{"location":"types/box.error/#fields","title":"fields","text":""},{"location":"types/box.error/#errortype","title":"error.type","text":"<pre><code>error.type : string\n</code></pre> <p>The error type (usually ClientError).</p>"},{"location":"types/box.error/#errorbase_type","title":"error.base_type","text":"<pre><code>error.base_type : string\n</code></pre> <p>The base type (usually ClientError).</p>"},{"location":"types/box.error/#errorcode","title":"error.code","text":"<pre><code>error.code : number\n</code></pre> <p>Number of error.</p>"},{"location":"types/box.error/#errorprev","title":"error.prev","text":"<pre><code>error.prev : box.error?\n</code></pre> <p>Since 2.4.1 The previous error for the current one.</p>"},{"location":"types/box.error/#errormessage","title":"error.message","text":"<pre><code>error.message : any\n</code></pre> <p>The error message.</p>"},{"location":"types/box.error/#errorreason","title":"error.reason","text":"<pre><code>error.reason : string\n</code></pre> <p>Since 2.10.0 Returns the <code>box.info.ro_reason</code> value at the moment of throwing the <code>box.error.READONLY</code> error.</p>"},{"location":"types/box.error/#errorerrno","title":"error.errno","text":"<pre><code>error.errno : number?\n</code></pre> <p>If the error is a system error (for example, a socket or file IO failure), a C standard error number.</p>"},{"location":"types/box.error/#errorstate","title":"error.state","text":"<pre><code>error.state : string?\n</code></pre> <p>For the box.error.READONLY error, returns the current state of a replica set node in regards to leader election (see <code>box.info.election.state</code>).</p>"},{"location":"types/box.error.table/","title":"class table","text":"<ul> <li>namespace: box.error</li> </ul>"},{"location":"types/box.error.table/#fields","title":"fields","text":""},{"location":"types/box.error.table/#tablecode","title":"table.code","text":"<pre><code>table.code : number\n</code></pre> <p>error's number</p>"},{"location":"types/box.error.table/#tabletype","title":"table.type","text":"<pre><code>table.type : string\n</code></pre> <p>error's C++ class</p>"},{"location":"types/box.error.table/#tablemessage","title":"table.message","text":"<pre><code>table.message : string\n</code></pre> <p>error's message</p>"},{"location":"types/box.error.table/#tableprev","title":"table.prev","text":"<pre><code>table.prev : box.error?\n</code></pre> <p>previous error</p>"},{"location":"types/box.error.table/#tablebase_type","title":"table.base_type","text":"<pre><code>table.base_type : string\n</code></pre> <p>usually ClientError or CustomError</p>"},{"location":"types/box.error.table/#tablecustom_type","title":"table.custom_type","text":"<pre><code>table.custom_type : string?\n</code></pre> <p>present if custom ErrorType was passed</p>"},{"location":"types/box.error.table/#tabletrace","title":"table.trace","text":"<pre><code>table.trace : box.error.trace[]?\n</code></pre> <p>backtrace</p>"},{"location":"types/box.error.trace/","title":"class trace","text":"<ul> <li>namespace: box.error</li> </ul>"},{"location":"types/box.error.trace/#fields","title":"fields","text":""},{"location":"types/box.error.trace/#tracefile","title":"trace.file","text":"<pre><code>trace.file : string\n</code></pre> <p>Tarantool source file</p>"},{"location":"types/box.error.trace/#traceline","title":"trace.line","text":"<pre><code>trace.line : number\n</code></pre> <p>Tarantool source file line number</p>"},{"location":"types/box.index.iterator/","title":"enum iterator","text":"<ul> <li>namespace: box.index</li> </ul>"},{"location":"types/box.index.iterator/#eq","title":"EQ","text":"<pre><code>iterator.EQ = 0\n</code></pre>"},{"location":"types/box.index.iterator/#req","title":"REQ","text":"<pre><code>iterator.REQ = 1\n</code></pre>"},{"location":"types/box.index.iterator/#all","title":"ALL","text":"<pre><code>iterator.ALL = 2\n</code></pre>"},{"location":"types/box.index.iterator/#lt","title":"LT","text":"<pre><code>iterator.LT = 3\n</code></pre>"},{"location":"types/box.index.iterator/#le","title":"LE","text":"<pre><code>iterator.LE = 4\n</code></pre>"},{"location":"types/box.index.iterator/#ge","title":"GE","text":"<pre><code>iterator.GE = 5\n</code></pre>"},{"location":"types/box.index.iterator/#gt","title":"GT","text":"<pre><code>iterator.GT = 6\n</code></pre>"},{"location":"types/box.index.iterator/#bits_all_set","title":"BITS_ALL_SET","text":"<pre><code>iterator.BITS_ALL_SET = 7\n</code></pre>"},{"location":"types/box.index.iterator/#bits_any_set","title":"BITS_ANY_SET","text":"<pre><code>iterator.BITS_ANY_SET = 8\n</code></pre>"},{"location":"types/box.index.iterator/#bits_all_not_set","title":"BITS_ALL_NOT_SET","text":"<pre><code>iterator.BITS_ALL_NOT_SET = 9\n</code></pre>"},{"location":"types/box.index.iterator/#overlaps","title":"OVERLAPS","text":"<pre><code>iterator.OVERLAPS = 10\n</code></pre>"},{"location":"types/box.index.iterator/#neighbor","title":"NEIGHBOR","text":"<pre><code>iterator.NEIGHBOR = 11\n</code></pre>"},{"location":"types/box.index.iterator/#np","title":"NP","text":"<pre><code>iterator.NP = 12\n</code></pre>"},{"location":"types/box.index.iterator/#pp","title":"PP","text":"<pre><code>iterator.PP = 13\n</code></pre>"},{"location":"types/box.index/","title":"class index","text":"<ul> <li> <p>supers: box.index_options</p> </li> <li> <p>namespace: box</p> </li> </ul>"},{"location":"types/box.index/#methods","title":"methods","text":""},{"location":"types/box.index/#indexget","title":"index.get","text":"<pre><code>function index.get(key: (tuple&lt;T,U&gt;|tuple_type[]|scalar)) -&gt; tuple tuple&lt;T,U&gt;?\n</code></pre> <p>@return <code>tuple</code> - the tuple whose index key matches key, or nil.</p> <p>Search for a tuple via the given index.</p> <p>Possible errors:</p> <ul> <li><code>index_object</code> does not exist.</li> <li>Wrong type.</li> <li>More than one tuple matches.</li> </ul> <p>Complexity factors:</p> <ul> <li>Index size.</li> <li>Index type.</li> </ul> <p>The <code>box.space...select</code> function returns a set of tuples as a Lua table; the <code>box.space...get</code> function returns at most a single tuple. And it is possible to get the first tuple in a space by appending <code>[1]</code>. Therefore <code>box.space.tester:get{1}</code> has the same effect as <code>box.space.tester:select{1}[1]</code>, if exactly one tuple is found.</p> <p>Example:</p> <pre><code>```tarantoolsession\ntarantool&gt; box.space.tester.index.primary:get(2)\n---\n- [2, 'Music']\n...\n</code></pre>"},{"location":"types/box.index/#indexselect","title":"index.select","text":"<pre><code>function index.select(\n  key: (tuple&lt;T,U&gt;|tuple_type[]|scalar),\n  options: box.space.select_options?\n) -&gt; list tuple&lt;T,U&gt;[]\n</code></pre> <p>@return <code>list</code> - the list of tuples</p> <p>Search for a tuple or a set of tuples by the current index.</p> <p>To search by the primary index in the specified space, use the <code>box.space.select</code> method.</p> <p>Note: this method doesn't yield. For details, Cooperative multitasking.</p> <p>Note: the <code>after</code> and <code>fetch_pos</code> options are supported for the <code>TREE</code> :ref:<code>index &lt;index-types&gt;</code> only.</p> <p>This function might return one or two values: * The tuples whose fields are equal to the fields of the passed key. If the number of passed fields is less than the number of fields in the current key, then only the passed fields are compared, so <code>select{1,2}</code> matches a tuple whose primary key is <code>{1,2,3}</code>. * (Optionally) If <code>options.fetch_pos</code> is set to <code>true</code>, returns a base64-encoded string representing the position of the last selected tuple as the second value.</p> <p>If no tuples are fetched, returns <code>nil</code>.</p> <p>Warning:</p> <p>Use the <code>offset</code> option carefully when scanning large data sets as it linearly increases the number of scanned tuples and leads to a full space scan. Instead, you can use the <code>after</code> and <code>fetch_pos</code> options.</p> <p>Examples:</p> <pre><code> box.space.bands:insert { 1, 'Roxette', 1986 }\n box.space.bands:insert { 2, 'Scorpions', 1965 }\n box.space.bands:insert { 3, 'Ace of Base', 1987 }\n box.space.bands:insert { 4, 'The Beatles', 1960 }\n box.space.bands:insert { 5, 'Pink Floyd', 1965 }\n box.space.bands:insert { 6, 'The Rolling Stones', 1962 }\n box.space.bands:insert { 7, 'The Doors', 1965 }\n box.space.bands:insert { 8, 'Nirvana', 1987 }\n box.space.bands:insert { 9, 'Led Zeppelin', 1968 }\n box.space.bands:insert { 10, 'Queen', 1970 }\n\n -- Select a tuple by the specified primary key value --\n select_primary = bands.index.primary:select { 1 }\n --[[\n ---\n - - [1, 'Roxette', 1986]\n ...\n --]]\n\n -- Select a tuple by the specified secondary key value --\n select_secondary = bands.index.band:select { 'The Doors' }\n --[[\n ---\n - - [7, 'The Doors', 1965]\n ...\n --]]\n\n -- Select a tuple by the specified multi-part secondary key value --\n select_multipart = bands.index.year_band:select { 1960, 'The Beatles' }\n --[[\n ---\n - - [4, 'The Beatles', 1960]\n ...\n --]]\n\n -- Select tuples by the specified partial key value --\n select_multipart_partial = bands.index.year_band:select { 1965 }\n --[[\n ---\n - - [5, 'Pink Floyd', 1965]\n   - [2, 'Scorpions', 1965]\n   - [7, 'The Doors', 1965]\n ...\n --]]\n\n -- Select maximum 3 tuples by the specified secondary index --\n select_limit = bands.index.band:select({}, { limit = 3 })\n --[[\n ---\n - - [3, 'Ace of Base', 1987]\n   - [9, 'Led Zeppelin', 1968]\n   - [8, 'Nirvana', 1987]\n ...\n --]]\n\n -- Select maximum 3 tuples with the key value greater than 1965 --\n select_greater = bands.index.year:select({ 1965 }, { iterator = 'GT', limit = 3 })\n --[[\n ---\n - - [9, 'Led Zeppelin', 1968]\n   - [10, 'Queen', 1970]\n   - [1, 'Roxette', 1986]\n ...\n --]]\n\n -- Select maximum 3 tuples after the specified tuple --\n select_after_tuple = bands.index.primary:select({}, { after = { 4, 'The Beatles', 1960 }, limit = 3 })\n --[[\n ---\n - - [5, 'Pink Floyd', 1965]\n   - [6, 'The Rolling Stones', 1962]\n   - [7, 'The Doors', 1965]\n ...\n --]]\n\n -- Select first 3 tuples and fetch a last tuple's position --\n result, position = bands.index.primary:select({}, { limit = 3, fetch_pos = true })\n -- Then, pass this position as the 'after' parameter --\n select_after_position = bands.index.primary:select({}, { limit = 3, after = position })\n --[[\n ---\n - - [4, 'The Beatles', 1960]\n   - [5, 'Pink Floyd', 1965]\n   - [6, 'The Rolling Stones', 1962]\n ...\n --]]\n</code></pre> <p>Note:</p> <p><code>box.space.{space-name}.index.{index-name}:select(...)[1]</code> can be replaced with <code>box.space.{space-name}.index.{index-name}:get(...)</code>.</p> <p>That is, <code>get</code> can be used as a convenient shorthand to get the first tuple in the tuple set that would be returned by <code>select</code>.</p> <p>However, if there is more than one tuple in the tuple set, then <code>get</code> throws an error.</p>"},{"location":"types/box.index/#indexpairs","title":"index.pairs","text":"<pre><code>function index.pairs(\n  key: (tuple&lt;T,U&gt;|tuple_type[]|scalar),\n  iterator: box.iterator?\n)\n -&gt; iter iterator&lt;T,U&gt;\n -&gt;  box.space.iterator.param\n -&gt;  box.space.iterator.state\n\n</code></pre> <p>@param <code>key</code> - value to be matched against the index key, which may be multi-part</p> <p>@param <code>iterator</code> - (Default: 'EQ') defines iterator order</p> <p>@return <code>iter</code> - Luafun iterator</p> <p>Search for a tuple or a set of tuples via the given index, and allow iterating over one tuple at a time.</p> <p>To search by the primary index in the specified space, use the <code>box.space.pairs</code> method.</p> <p>The <code>{key}</code> parameter specifies what must match within the index.</p> <p>Note: <code>{key}</code> is only used to find the first match. Do not assume all matched tuples will contain the key.</p> <p>The <code>{iterator}</code> parameter specifies the rule for matching and ordering. Different index types support different iterators. For example, a TREE index maintains a strict order of keys and can return all tuples in ascending or descending order, starting from the specified key. Other index types, however, do not support ordering.</p> <p>To understand consistency of tuples returned by an iterator, it's essential to know the principles of the Tarantool transaction processing subsystem. An iterator in Tarantool does not own a consistent read view.</p> <p>Instead, each procedure is granted exclusive access to all tuples and spaces until there is a \"context switch\": which may happen due to the implicit yield rules, or by an explicit call to <code>fiber.yield</code>.</p> <p>When the execution flow returns to the yielded procedure, the data set could have changed significantly. Iteration, resumed after a yield point, does not preserve the read view, but continues with the new content of the database. The tutorial indexed pattern search shows one way that iterators and yields can be used together.</p> <p>For information about iterators' internal structures, see the \"Lua Functional library\" documentation.</p> <p>Examples:</p> <pre><code> -- Insert test data --\n tarantool&gt; bands:insert{1, 'Roxette', 1986}\n bands:insert{2, 'Scorpions', 1965}\n bands:insert{3, 'Ace of Base', 1987}\n bands:insert{4, 'The Beatles', 1960}\n bands:insert{5, 'Pink Floyd', 1965}\n bands:insert{6, 'The Rolling Stones', 1962}\n bands:insert{7, 'The Doors', 1965}\n bands:insert{8, 'Nirvana', 1987}\n bands:insert{9, 'Led Zeppelin', 1968}\n bands:insert{10, 'Queen', 1970}\n ---\n ...\n\n -- Select all tuples by the primary index --\n tarantool&gt; for _, tuple in bands.index.primary:pairs() do\n print(tuple)\n end\n [1, 'Roxette', 1986]\n [2, 'Scorpions', 1965]\n [3, 'Ace of Base', 1987]\n [4, 'The Beatles', 1960]\n [5, 'Pink Floyd', 1965]\n [6, 'The Rolling Stones', 1962]\n [7, 'The Doors', 1965]\n [8, 'Nirvana', 1987]\n [9, 'Led Zeppelin', 1968]\n [10, 'Queen', 1970]\n ---\n ...\n\n -- Select all tuples whose secondary key values start with the specified string --\n tarantool&gt; for _, tuple in bands.index.band:pairs(\"The\", {iterator = \"GE\"}) do\n if (string.sub(tuple[2], 1, 3) ~= \"The\") then break end\n print(tuple)\n end\n [4, 'The Beatles', 1960]\n [7, 'The Doors', 1965]\n [6, 'The Rolling Stones', 1962]\n ---\n ...\n\n -- Select all tuples whose secondary key values are between 1965 and 1970 --\n tarantool&gt; for _, tuple in bands.index.year:pairs(1965, {iterator = \"GE\"}) do\n if (tuple[3] &gt; 1970) then break end\n print(tuple)\n end\n [2, 'Scorpions', 1965]\n [5, 'Pink Floyd', 1965]\n [7, 'The Doors', 1965]\n [9, 'Led Zeppelin', 1968]\n [10, 'Queen', 1970]\n ---\n ...\n\n -- Select all tuples after the specified tuple --\n tarantool&gt; for _, tuple in bands.index.primary:pairs({}, {after={7, 'The Doors', 1965}}) do\n print(tuple)\n end\n [8, 'Nirvana', 1987]\n [9, 'Led Zeppelin', 1968]\n [10, 'Queen', 1970]\n ---\n ...\n</code></pre>"},{"location":"types/box.index/#indexupdate","title":"index.update","text":"<pre><code>function index.update(\n  key: (tuple&lt;T,U&gt;|tuple_type[]|scalar),\n  update_operations: (box.update_operation,(number|string),tuple_type)[]\n) -&gt; tuple tuple&lt;T,U&gt;?\n</code></pre> <p>@return <code>tuple</code> - the updated tuple if it was found</p> <p>Update a tuple.</p> <p>The update function supports operations on fields \u2014 assignment, arithmetic (if the field is numeric), cutting and pasting fragments of a field, deleting or inserting a field. Multiple operations can be combined in a single update request, and in this case they are performed atomically and sequentially. Each operation requires specification of a field identifier, which is usually a number. When multiple operations are present, the field number for each operation is assumed to be relative to the most recent state of the tuple, that is, as if all previous operations in a multi-operation update have already been applied. In other words, it is always safe to merge multiple update invocations into a single invocation, with no change in semantics.</p>"},{"location":"types/box.index/#indexmax","title":"index.max","text":"<pre><code>function index.max(key: (tuple&lt;T,U&gt;|tuple_type[]|scalar)) -&gt; tuple tuple&lt;T,U&gt;?\n</code></pre> <p>@return <code>tuple</code> - result</p> <p>Find the maximum value in the specified index.</p> <p>Possible errors:</p> <ul> <li>Index is not of type 'TREE'.</li> <li><code>ER_TRANSACTION_CONFLICT</code> if a transaction conflict is detected in the <code>MVCC transaction mode</code>.</li> </ul> <p>Complexity factors: * Index size. * Index type.</p> <p>Examples:</p> <pre><code> -- Find the maximum value in the specified index\n max = box.space.bands.index.year:max()\n --[[\n ---\n - [8, 'Nirvana', 1987]\n ...\n --]]\n\n -- Find the maximum value that matches the partial key value\n max_partial = box.space.bands.index.year_band:max(1965)\n --[[\n ---\n - [7, 'The Doors', 1965]\n ...\n --]]\n</code></pre>"},{"location":"types/box.index/#indexmin","title":"index.min","text":"<pre><code>function index.min(key: (tuple&lt;T,U&gt;|tuple_type[]|scalar)) -&gt; tuple tuple&lt;T,U&gt;?\n</code></pre> <p>@return <code>tuple</code> - result</p> <p>Find the minimum value in the specified index.</p> <p>Possible errors:</p> <ul> <li>Index is not of type 'TREE'.</li> <li><code>ER_TRANSACTION_CONFLICT</code> if a transaction conflict is detected in the <code>MVCC transaction mode</code>.</li> </ul> <p>Complexity factors: * Index size. * Index type.</p> <p>Examples:</p> <pre><code> min = box.space.bands.index.year:min()\n --[[\n ---\n - [4, 'The Beatles', 1960]\n ...\n --]]\n\n -- Find the minimum value that matches the partial key value\n min_partial = box.space.bands.index.year_band:min(1965)\n --[[\n ---\n - [5, 'Pink Floyd', 1965]\n ...\n --]]\n</code></pre>"},{"location":"types/box.index/#indexcount","title":"index.count","text":"<pre><code>function index.count(\n  key: (tuple&lt;T,U&gt;|tuple_type[]|scalar)?,\n  iterator: box.iterator?\n) -&gt; number_of_tuples integer\n</code></pre> <p>Iterate over an index, counting the number of tuples which match the key-value.</p> <p>Return the number of tuples. If compared with <code>len()</code>, this method works slower because <code>count()</code> scans the entire space to <code>count</code> the tuples.</p> <p>Example:</p> <pre><code> -- Count the number of tuples that match the full key value\n count = box.space.bands.index.year:count(1965)\n --[[\n ---\n - 3\n ...\n --]]\n\n -- Count the number of tuples that match the partial key value\n count_partial = box.space.bands.index.year_band:count(1965)\n --[[\n ---\n - 3\n ...\n --]]\n</code></pre>"},{"location":"types/box.index/#indexbsize","title":"index.bsize","text":"<pre><code>function index.bsize() -&gt;  integer\n</code></pre> <p>Return the total number of bytes taken by the index.</p>"},{"location":"types/box.index/#indexdelete","title":"index.delete","text":"<pre><code>function index.delete(key: (tuple&lt;T,U&gt;|tuple_type[]|scalar)) -&gt; tuple tuple&lt;T,U&gt;?\n</code></pre> <p>@return <code>tuple</code> - the deleted tuple</p> <p>Delete a tuple identified by a key.</p> <p>Same as <code>box.space...delete()</code>, but key is searched in this index instead of in the primary-key index.</p> <p>This index ought to be unique.</p> <p>Note regarding storage engine: vinyl will return <code>nil</code>, rather than the deleted tuple.</p>"},{"location":"types/box.index/#indexalter","title":"index.alter","text":"<pre><code>function index.alter(opts: box.index_options)\n</code></pre> <p>Alter an index.</p> <p>It is legal in some circumstances to change one or more of the index characteristics, for example its type, its sequence options, its parts, and whether it is unique.</p> <p>Usually this causes rebuilding of the space, except for the simple case where a part\u2019s is_nullable flag is changed from false to true.</p>"},{"location":"types/box.index/#indextuple_pos","title":"index.tuple_pos","text":"<pre><code>function index.tuple_pos(tuple: (scalar|table)) -&gt;  string\n</code></pre> <p>@return  - base64-encoded string (a tuple\u2019s position in a space)</p> <p>Return a tuple's position for an index.</p> <p>This value can be passed to the <code>after</code> option of the <code>select</code> and <code>pairs</code> methods: * <code>index_object:select</code> and <code>space_object:select</code> * <code>index_object:pairs</code> and <code>space_object:pairs</code></p> <p>Note: <code>tuple_pos</code> does not work with functional and multikey indexes.</p> <p>Example:</p> <pre><code> -- Insert test data --\n tarantool&gt; bands:insert{1, 'Roxette', 1986}\n bands:insert{2, 'Scorpions', 1965}\n bands:insert{3, 'Ace of Base', 1987}\n bands:insert{4, 'The Beatles', 1960}\n bands:insert{5, 'Pink Floyd', 1965}\n bands:insert{6, 'The Rolling Stones', 1962}\n ---\n ...\n\n -- Get a tuple's position --\n tarantool&gt; position = bands.index.primary:tuple_pos({3, 'Ace of Base', 1987})\n ---\n ...\n -- Pass the tuple's position as the 'after' parameter --\n tarantool&gt; bands:select({}, {limit = 3, after = position})\n ---\n - - [4, 'The Beatles', 1960]\n - [5, 'Pink Floyd', 1965]\n - [6, 'The Rolling Stones', 1962]\n ...\n</code></pre>"},{"location":"types/box.index/#fields","title":"fields","text":""},{"location":"types/box.index/#indexparts","title":"index.parts","text":"<pre><code>index.parts : box.index_part[]\n</code></pre> <p>list of index parts</p>"},{"location":"types/box.index_options/","title":"class index_options","text":"<ul> <li> <p>supers: table</p> </li> <li> <p>namespace: box</p> </li> </ul>"},{"location":"types/box.index_options/#fields","title":"fields","text":""},{"location":"types/box.index_options/#index_optionsname","title":"index_options.name","text":"<pre><code>index_options.name : string?\n</code></pre> <p>name of the index</p>"},{"location":"types/box.index_options/#index_optionstype","title":"index_options.type","text":"<pre><code>index_options.type : box.index_type?\n</code></pre> <p>(Default: \"TREE\") type of index</p>"},{"location":"types/box.index_options/#index_optionsid","title":"index_options.id","text":"<pre><code>index_options.id : integer?\n</code></pre> <p>(Default: last index\u2019s id + 1) unique identifier</p>"},{"location":"types/box.index_options/#index_optionsunique","title":"index_options.unique","text":"<pre><code>index_options.unique : boolean?\n</code></pre> <p>(Default: true) index is unique</p>"},{"location":"types/box.index_options/#index_optionsif_not_exists","title":"index_options.if_not_exists","text":"<pre><code>index_options.if_not_exists : boolean?\n</code></pre> <p>(Default: false) no error if duplicate name</p>"},{"location":"types/box.index_options/#index_optionsparts","title":"index_options.parts","text":"<pre><code>index_options.parts : (box.index_part_def[]|string[])?\n</code></pre> <p>field numbers + types</p>"},{"location":"types/box.index_options/#index_optionsdimension","title":"index_options.dimension","text":"<pre><code>index_options.dimension : integer?\n</code></pre> <p>(Default: 2) affects RTREE only</p>"},{"location":"types/box.index_options/#index_optionsdistance","title":"index_options.distance","text":"<pre><code>index_options.distance : (\"euclid\"|\"manhattan\")?\n</code></pre> <p>(Default: euclid) affects RTREE only</p>"},{"location":"types/box.index_options/#index_optionsbloom_fpr","title":"index_options.bloom_fpr","text":"<pre><code>index_options.bloom_fpr : number?\n</code></pre> <p>(Default: vinyl_bloom_fpr) affects vinyl only</p>"},{"location":"types/box.index_options/#index_optionspage_size","title":"index_options.page_size","text":"<pre><code>index_options.page_size : number?\n</code></pre> <p>(Default: vinyl_page_size) affects vinyl only</p>"},{"location":"types/box.index_options/#index_optionsrange_size","title":"index_options.range_size","text":"<pre><code>index_options.range_size : number?\n</code></pre> <p>(Default: vinyl_range_size) affects vinyl only</p>"},{"location":"types/box.index_options/#index_optionsrun_count_per_level","title":"index_options.run_count_per_level","text":"<pre><code>index_options.run_count_per_level : number?\n</code></pre> <p>(Default: vinyl_run_count_per_level) affects vinyl only</p>"},{"location":"types/box.index_options/#index_optionsrun_size_ratio","title":"index_options.run_size_ratio","text":"<pre><code>index_options.run_size_ratio : number?\n</code></pre> <p>(Default: vinyl_run_size_ratio) affects vinyl only</p>"},{"location":"types/box.index_options/#index_optionssequence","title":"index_options.sequence","text":"<pre><code>index_options.sequence : (string|number)?\n</code></pre>"},{"location":"types/box.index_options/#index_optionsfunc","title":"index_options.func","text":"<pre><code>index_options.func : string?\n</code></pre> <p>functional index</p>"},{"location":"types/box.index_options/#index_optionshint","title":"index_options.hint","text":"<pre><code>index_options.hint : boolean?\n</code></pre> <p>(Default: true) affects TREE only. true makes an index work faster, false \u2013 index size is reduced by half</p>"},{"location":"types/box.index_part/","title":"class index_part","text":"<ul> <li>namespace: box</li> </ul>"},{"location":"types/box.index_part/#fields","title":"fields","text":""},{"location":"types/box.index_part/#index_parttype","title":"index_part.type","text":"<pre><code>index_part.type : string\n</code></pre> <p>type of the field</p>"},{"location":"types/box.index_part/#index_partis_nullable","title":"index_part.is_nullable","text":"<pre><code>index_part.is_nullable : boolean\n</code></pre> <p>false if field not-nullable, otherwise true</p>"},{"location":"types/box.index_part/#index_partfieldno","title":"index_part.fieldno","text":"<pre><code>index_part.fieldno : integer\n</code></pre> <p>position in tuple of the field</p>"},{"location":"types/box.index_part_def/","title":"alias index_part_def","text":"<ul> <li>namespace: box</li> </ul> <pre><code>(alias) index_part_def = ({ [1]: (string|integer), [2]: tuple_type_name?, collation: string?, fieldno: integer?, ... }|{ collation: string?, field: (integer|string), fieldno: integer?, is_nullable: boolean?, ... })\n</code></pre>"},{"location":"types/box.index_type/","title":"alias index_type","text":"<ul> <li>namespace: box</li> </ul> <pre><code>(alias) index_type = (\"TREE\"|\"HASH\"|\"BITSET\"|\"RTREE\"|\"tree\"|\"hash\"|\"bitset\"|\"rtree\")\n</code></pre>"},{"location":"types/box.info.cluster/","title":"class cluster","text":"<ul> <li> <p>supers: table</p> </li> <li> <p>namespace: box.info</p> </li> </ul>"},{"location":"types/box.info.cluster/#fields","title":"fields","text":""},{"location":"types/box.info.cluster/#clusteruuid","title":"cluster.uuid","text":"<pre><code>cluster.uuid : string\n</code></pre> <p>UUID of the replicaset this instance belong.</p>"},{"location":"types/box.info.downstream/","title":"class downstream","text":"<ul> <li> <p>supers: table</p> </li> <li> <p>namespace: box.info</p> </li> </ul> <p>appears (is not nil) with data about an instance that is following instance n or is intending to follow it</p>"},{"location":"types/box.info.downstream/#fields","title":"fields","text":""},{"location":"types/box.info.downstream/#downstreamstatus","title":"downstream.status","text":"<pre><code>downstream.status : (\"follow\"|\"stopped \")\n</code></pre>"},{"location":"types/box.info.downstream/#downstreamidle","title":"downstream.idle","text":"<pre><code>downstream.idle : number\n</code></pre> <p>The time (in seconds) since the last time that instance n sent events through the downstream replication.</p>"},{"location":"types/box.info.downstream/#downstreamlag","title":"downstream.lag","text":"<pre><code>downstream.lag : number\n</code></pre> <p>The time difference between the local time at the master node, recorded when a particular transaction was written to the write ahead log, and the local time recorded when it receives an acknowledgement for this transaction from a replica.</p>"},{"location":"types/box.info.downstream/#downstreamvclock","title":"downstream.vclock","text":"<pre><code>downstream.vclock : integer[]\n</code></pre> <p>May be the same as the current instance's vclock.</p>"},{"location":"types/box.info.downstream/#downstreammessage","title":"downstream.message","text":"<pre><code>downstream.message : string?\n</code></pre>"},{"location":"types/box.info.downstream/#downstreamsystem_message","title":"downstream.system_message","text":"<pre><code>downstream.system_message : string?\n</code></pre>"},{"location":"types/box.info.election/","title":"class election","text":"<ul> <li> <p>supers: table</p> </li> <li> <p>namespace: box.info</p> </li> </ul>"},{"location":"types/box.info.election/#fields","title":"fields","text":""},{"location":"types/box.info.election/#electionstate","title":"election.state","text":"<pre><code>election.state : (\"leader\"|\"follower\"|\"candidate\")\n</code></pre>"},{"location":"types/box.info.election/#electionvote","title":"election.vote","text":"<pre><code>election.vote : integer\n</code></pre> <p>ID of a node the current node votes for. If the value is 0, it means the node hasn't voted in the current term yet.</p>"},{"location":"types/box.info.election/#electionleader","title":"election.leader","text":"<pre><code>election.leader : integer\n</code></pre> <p>Leader node ID in the current term. If the value is 0, it means the node doesn't know which node is the leader in the current term.</p>"},{"location":"types/box.info.election/#electionterm","title":"election.term","text":"<pre><code>election.term : integer\n</code></pre> <p>Current election term.</p>"},{"location":"types/box.info.gc.checkpoint/","title":"class checkpoint","text":"<ul> <li> <p>supers: table</p> </li> <li> <p>namespace: box.info.gc</p> </li> </ul>"},{"location":"types/box.info.gc.checkpoint/#fields","title":"fields","text":""},{"location":"types/box.info.gc.checkpoint/#checkpointreferences","title":"checkpoint.references","text":"<pre><code>checkpoint.references : table[]\n</code></pre> <p>A list of references to a checkpoint.</p>"},{"location":"types/box.info.gc.checkpoint/#checkpointvclock","title":"checkpoint.vclock","text":"<pre><code>checkpoint.vclock : integer[]\n</code></pre> <p>A checkpoint's vclock value.</p>"},{"location":"types/box.info.gc.checkpoint/#checkpointsignature","title":"checkpoint.signature","text":"<pre><code>checkpoint.signature : integer\n</code></pre> <p>A sum of a checkpoint's vclock's components.</p>"},{"location":"types/box.info.gc/","title":"class gc","text":"<ul> <li> <p>supers: table</p> </li> <li> <p>namespace: box.info</p> </li> </ul>"},{"location":"types/box.info.gc/#fields","title":"fields","text":""},{"location":"types/box.info.gc/#gcvclock","title":"gc.vclock","text":"<pre><code>gc.vclock : integer[]\n</code></pre> <p>The garbage collector's vclock.</p>"},{"location":"types/box.info.gc/#gcsignature","title":"gc.signature","text":"<pre><code>gc.signature : integer\n</code></pre> <p>The sum of the garbage collector's checkpoint's components.</p>"},{"location":"types/box.info.gc/#gccheckpoint_is_in_progress","title":"gc.checkpoint_is_in_progress","text":"<pre><code>gc.checkpoint_is_in_progress : boolean\n</code></pre> <p><code>true</code> if a checkpoint is in progress, otherwise <code>false</code>.</p>"},{"location":"types/box.info.gc/#gcconsumers","title":"gc.consumers","text":"<pre><code>gc.consumers : table[]\n</code></pre> <p>A list of users whose requests might affect the garbage collector.</p>"},{"location":"types/box.info.gc/#gccheckpoints","title":"gc.checkpoints","text":"<pre><code>gc.checkpoints : box.info.gc.checkpoint[]\n</code></pre> <p>A list of preserved checkpoints.</p>"},{"location":"types/box.info/","title":"class info","text":"<ul> <li> <p>supers: table</p> </li> <li> <p>namespace: box</p> </li> </ul> <p>Builtin <code>box.info</code> submodule</p> <p>The <code>box.info</code> submodule provides access to information about a running Tarantool instance.</p>"},{"location":"types/box.info/#methods","title":"methods","text":""},{"location":"types/box.info/#infomemory","title":"info.memory","text":"<pre><code>function info.memory() -&gt;  box.info.memory\n</code></pre> <p>Get information about memory usage for the current instance.</p> <p>Note:</p> <p>To get a picture of the vinyl subsystem, use box.stat.vinyl() instead.</p>"},{"location":"types/box.info/#infogc","title":"info.gc","text":"<pre><code>function info.gc() -&gt;  box.info.gc\n</code></pre> <p>Get information about the Tarantool garbage collector.</p> <p>The garbage collector compares vclock (see vector clock) values of users and checkpoints, so a look at <code>box.info.gc()</code> may show why the garbage collector has not removed old WAL files, or show what it may soon remove.</p>"},{"location":"types/box.info/#fields","title":"fields","text":""},{"location":"types/box.info/#infoid","title":"info.id","text":"<pre><code>info.id : integer\n</code></pre> <p>A short numeric identifier of instance n within the replica set. This value is stored in the box.space._cluster system space.</p>"},{"location":"types/box.info/#infouuid","title":"info.uuid","text":"<pre><code>info.uuid : string\n</code></pre> <p>A globally unique identifier of instance n.</p>"},{"location":"types/box.info/#infopid","title":"info.pid","text":"<pre><code>info.pid : integer\n</code></pre> <p>A process ID.</p>"},{"location":"types/box.info/#infouptime","title":"info.uptime","text":"<pre><code>info.uptime : integer\n</code></pre> <p>A number of seconds since the instance started.</p>"},{"location":"types/box.info/#infostatus","title":"info.status","text":"<pre><code>info.status : (\"unconfigured\"|\"running\"|\"loading\"|\"orphan\"|\"hot_standby\")\n</code></pre>"},{"location":"types/box.info/#infolsn","title":"info.lsn","text":"<pre><code>info.lsn : integer\n</code></pre> <p>A log sequence number (LSN) for the latest entry in instance n's write ahead log (WAL).</p>"},{"location":"types/box.info/#infoversion","title":"info.version","text":"<pre><code>info.version : string\n</code></pre> <p>A Tarantool version number.</p>"},{"location":"types/box.info/#inforo","title":"info.ro","text":"<pre><code>info.ro : boolean\n</code></pre> <p>Is <code>true</code> if the instance is in \"read-only\" mode.</p>"},{"location":"types/box.info/#infopackage","title":"info.package","text":"<pre><code>info.package : string\n</code></pre>"},{"location":"types/box.info/#infovclock","title":"info.vclock","text":"<pre><code>info.vclock : integer[]\n</code></pre> <p>A table with the vclock values of all instances in a replica set which have made data changes.</p>"},{"location":"types/box.info/#inforeplication","title":"info.replication","text":"<pre><code>info.replication : table&lt;integer,box.info.replica&gt;\n</code></pre>"},{"location":"types/box.info/#infoelection","title":"info.election","text":"<pre><code>info.election : box.info.election {\n    state: (\"leader\"|\"follower\"|\"candidate\"),\n    vote: integer,\n    leader: integer,\n    term: integer,\n}\n</code></pre> <p>Shows the current state of a replica set node regarding leader election.</p>"},{"location":"types/box.info/#infosignature","title":"info.signature","text":"<pre><code>info.signature : integer\n</code></pre> <p>The sum of all lsn values from each vector clock (vclock) for all instances in the replica set.</p>"},{"location":"types/box.info/#infocluster","title":"info.cluster","text":"<pre><code>info.cluster : box.info.cluster {\n    uuid: string,\n}\n</code></pre>"},{"location":"types/box.info/#inforo_reason","title":"info.ro_reason","text":"<pre><code>info.ro_reason : string\n</code></pre>"},{"location":"types/box.info/#infosynchro","title":"info.synchro","text":"<pre><code>info.synchro : table\n</code></pre>"},{"location":"types/box.info.memory/","title":"class memory","text":"<ul> <li>namespace: box.info</li> </ul>"},{"location":"types/box.info.memory/#fields","title":"fields","text":""},{"location":"types/box.info.memory/#memorycache","title":"memory.cache","text":"<pre><code>memory.cache : integer\n</code></pre> <p>A number of bytes used for caching user data. The memtx storage engine does not require a cache, so in fact this is the number of bytes in the cache for the tuples stored for the vinyl storage engine.</p>"},{"location":"types/box.info.memory/#memorydata","title":"memory.data","text":"<pre><code>memory.data : integer\n</code></pre> <p>A number of bytes used for storing user data (the tuples) with the memtx engine and with level 0 of the vinyl engine, without taking memory fragmentation into account.</p>"},{"location":"types/box.info.memory/#memoryindex","title":"memory.index","text":"<pre><code>memory.index : integer\n</code></pre> <p>A number of bytes used for indexing user data, including memtx and vinyl memory tree extents, the vinyl page index, and the vinyl bloom filters.</p>"},{"location":"types/box.info.memory/#memorylua","title":"memory.lua","text":"<pre><code>memory.lua : integer\n</code></pre> <p>A number of bytes used for Lua runtime.</p>"},{"location":"types/box.info.memory/#memorynet","title":"memory.net","text":"<pre><code>memory.net : integer\n</code></pre> <p>A number of bytes used for network input/output buffers.</p>"},{"location":"types/box.info.memory/#memorytx","title":"memory.tx","text":"<pre><code>memory.tx : integer\n</code></pre> <p>A number of bytes in use by active transactions. For the vinyl storage engine, this is the total size of all allocated objects (struct txv, struct vy_tx, struct vy_read_interval) and tuples pinned for those objects.</p>"},{"location":"types/box.info.replica/","title":"class replica","text":"<ul> <li> <p>supers: table</p> </li> <li> <p>namespace: box.info</p> </li> </ul>"},{"location":"types/box.info.replica/#fields","title":"fields","text":""},{"location":"types/box.info.replica/#replicaid","title":"replica.id","text":"<pre><code>replica.id : integer\n</code></pre> <p>A short numeric identifier of instance n within the replica set.</p>"},{"location":"types/box.info.replica/#replicauuid","title":"replica.uuid","text":"<pre><code>replica.uuid : string\n</code></pre> <p>A globally unique identifier of instance n.</p>"},{"location":"types/box.info.replica/#replicalsn","title":"replica.lsn","text":"<pre><code>replica.lsn : integer\n</code></pre> <p>A log sequence number (LSN) for the latest entry in instance n's write ahead log (WAL).</p>"},{"location":"types/box.info.replica/#replicaupstream","title":"replica.upstream","text":"<pre><code>replica.upstream : box.info.upstream?\n</code></pre>"},{"location":"types/box.info.replica/#replicadownstream","title":"replica.downstream","text":"<pre><code>replica.downstream : box.info.downstream?\n</code></pre>"},{"location":"types/box.info.syncho/","title":"class syncho","text":"<ul> <li> <p>supers: table</p> </li> <li> <p>namespace: box.info</p> </li> </ul>"},{"location":"types/box.info.syncho/#fields","title":"fields","text":""},{"location":"types/box.info.syncho/#synchoquorum","title":"syncho.quorum","text":"<pre><code>syncho.quorum : number\n</code></pre> <p>The resulting value of the <code>replication_synchro_quorum</code> configuration option.</p>"},{"location":"types/box.info.syncho/#synchoqueue","title":"syncho.queue","text":"<pre><code>syncho.queue : box.info.synchro.queue {\n    owner: integer,\n    term: number,\n    len: number,\n    busy: boolean,\n}\n</code></pre>"},{"location":"types/box.info.synchro.queue/","title":"class queue","text":"<ul> <li> <p>supers: table</p> </li> <li> <p>namespace: box.info.synchro</p> </li> </ul>"},{"location":"types/box.info.synchro.queue/#fields","title":"fields","text":""},{"location":"types/box.info.synchro.queue/#queueowner","title":"queue.owner","text":"<pre><code>queue.owner : integer\n</code></pre> <p>ID of the replica that owns the synchronous transaction queue.</p>"},{"location":"types/box.info.synchro.queue/#queueterm","title":"queue.term","text":"<pre><code>queue.term : number\n</code></pre> <p>Current queue term. It contains the term of the last PROMOTE request.</p>"},{"location":"types/box.info.synchro.queue/#queuelen","title":"queue.len","text":"<pre><code>queue.len : number\n</code></pre> <p>The number of entries that are currently waiting in the queue.</p>"},{"location":"types/box.info.synchro.queue/#queuebusy","title":"queue.busy","text":"<pre><code>queue.busy : boolean\n</code></pre> <p>The boolean value is true when the instance is processing or writing some system request that modifies the queue (for example, PROMOTE, CONFIRM, or ROLLBACK).</p>"},{"location":"types/box.info.upstream/","title":"class upstream","text":"<ul> <li> <p>supers: table</p> </li> <li> <p>namespace: box.info</p> </li> </ul>"},{"location":"types/box.info.upstream/#fields","title":"fields","text":""},{"location":"types/box.info.upstream/#upstreampeer","title":"upstream.peer","text":"<pre><code>upstream.peer : string\n</code></pre> <p>Contains instances URI, for example <code>127.0.0.1:3302</code>.</p>"},{"location":"types/box.info.upstream/#upstreamstatus","title":"upstream.status","text":"<pre><code>upstream.status : (\"auth\"|\"connecting\"|\"disconnecting\"|\"disconnected\"|\"follow\"|\"stopped\"|\"sync\")\n</code></pre>"},{"location":"types/box.info.upstream/#upstreamidle","title":"upstream.idle","text":"<pre><code>upstream.idle : number\n</code></pre> <p>The time (in seconds) since the last event was received. This is the primary indicator of replication health.</p>"},{"location":"types/box.info.upstream/#upstreamlag","title":"upstream.lag","text":"<pre><code>upstream.lag : number\n</code></pre> <p>The time difference between the local time of instance n, recorded when the event was received, and the local time at another master recorded when the event was written to the write ahead log on that master.</p>"},{"location":"types/box.info.upstream/#upstreammessage","title":"upstream.message","text":"<pre><code>upstream.message : string?\n</code></pre> <p>Contains an error message in case of a degraded state, otherwise it is <code>nil</code>.</p>"},{"location":"types/box.iproto.ballot_key/","title":"enum ballot_key","text":"<ul> <li>namespace: box.iproto</li> </ul>"},{"location":"types/box.iproto.ballot_key/#can_lead","title":"CAN_LEAD","text":"<pre><code>ballot_key.CAN_LEAD = 7\n</code></pre>"},{"location":"types/box.iproto.ballot_key/#instance_name","title":"INSTANCE_NAME","text":"<pre><code>ballot_key.INSTANCE_NAME = 10\n</code></pre>"},{"location":"types/box.iproto.ballot_key/#is_anon","title":"IS_ANON","text":"<pre><code>ballot_key.IS_ANON = 5\n</code></pre>"},{"location":"types/box.iproto.ballot_key/#is_booted","title":"IS_BOOTED","text":"<pre><code>ballot_key.IS_BOOTED = 6\n</code></pre>"},{"location":"types/box.iproto.ballot_key/#is_ro","title":"IS_RO","text":"<pre><code>ballot_key.IS_RO = 4\n</code></pre>"},{"location":"types/box.iproto.ballot_key/#is_ro_cfg","title":"IS_RO_CFG","text":"<pre><code>ballot_key.IS_RO_CFG = 1\n</code></pre>"},{"location":"types/box.iproto.ballot_key/#registered_replica_uuids","title":"REGISTERED_REPLICA_UUIDS","text":"<pre><code>ballot_key.REGISTERED_REPLICA_UUIDS = 9\n</code></pre>"},{"location":"types/box.iproto.ballot_key/#bootstrap_leader_uuid","title":"BOOTSTRAP_LEADER_UUID","text":"<pre><code>ballot_key.BOOTSTRAP_LEADER_UUID = 8\n</code></pre>"},{"location":"types/box.iproto.ballot_key/#vclock","title":"VCLOCK","text":"<pre><code>ballot_key.VCLOCK = 2\n</code></pre>"},{"location":"types/box.iproto.ballot_key/#gc_vclock","title":"GC_VCLOCK","text":"<pre><code>ballot_key.GC_VCLOCK = 3\n</code></pre>"},{"location":"types/box.iproto.feature/","title":"alias feature","text":"<ul> <li>namespace: box.iproto</li> </ul> <pre><code>(alias) feature = (\"transactions\"|\"watchers\"|\"error_extension\"|\"call_arg_tuple_extension\"|\"pagination\"|\"is_sync\"|\"space_and_index_names\"|\"insert_arrow\"|\"streams\"|\"watch_once\"...)\n    | \"transactions\"\n    | \"watchers\"\n    | \"error_extension\"\n    | \"call_arg_tuple_extension\"\n    | \"pagination\"\n    | \"is_sync\"\n    | \"space_and_index_names\"\n    | \"insert_arrow\"\n    | \"streams\"\n    | \"watch_once\"\n    | \"call_ret_tuple_extension\"\n    | \"fetch_snapshot_cursor\"\n    | \"dml_tuple_extension\"\n    | string\n\n</code></pre>"},{"location":"types/box.iproto.flag/","title":"enum flag","text":"<ul> <li>namespace: box.iproto</li> </ul>"},{"location":"types/box.iproto.flag/#wait_sync","title":"WAIT_SYNC","text":"<pre><code>flag.WAIT_SYNC = 2\n</code></pre>"},{"location":"types/box.iproto.flag/#commit","title":"COMMIT","text":"<pre><code>flag.COMMIT = 1\n</code></pre>"},{"location":"types/box.iproto.flag/#wait_ack","title":"WAIT_ACK","text":"<pre><code>flag.WAIT_ACK = 4\n</code></pre>"},{"location":"types/box.iproto.key/","title":"enum key","text":"<ul> <li>namespace: box.iproto</li> </ul>"},{"location":"types/box.iproto.key/#schema_version","title":"SCHEMA_VERSION","text":"<pre><code>key.SCHEMA_VERSION = 5\n</code></pre>"},{"location":"types/box.iproto.key/#error_24","title":"ERROR_24","text":"<pre><code>key.ERROR_24 = 49\n</code></pre>"},{"location":"types/box.iproto.key/#stream_id","title":"STREAM_ID","text":"<pre><code>key.STREAM_ID = 10\n</code></pre>"},{"location":"types/box.iproto.key/#stmt_id","title":"STMT_ID","text":"<pre><code>key.STMT_ID = 67\n</code></pre>"},{"location":"types/box.iproto.key/#ballot","title":"BALLOT","text":"<pre><code>key.BALLOT = 41\n</code></pre>"},{"location":"types/box.iproto.key/#is_sync","title":"IS_SYNC","text":"<pre><code>key.IS_SYNC = 97\n</code></pre>"},{"location":"types/box.iproto.key/#auth_type","title":"AUTH_TYPE","text":"<pre><code>key.AUTH_TYPE = 91\n</code></pre>"},{"location":"types/box.iproto.key/#tuple_meta","title":"TUPLE_META","text":"<pre><code>key.TUPLE_META = 42\n</code></pre>"},{"location":"types/box.iproto.key/#sync","title":"SYNC","text":"<pre><code>key.SYNC = 1\n</code></pre>"},{"location":"types/box.iproto.key/#version","title":"VERSION","text":"<pre><code>key.VERSION = 84\n</code></pre>"},{"location":"types/box.iproto.key/#group_id","title":"GROUP_ID","text":"<pre><code>key.GROUP_ID = 7\n</code></pre>"},{"location":"types/box.iproto.key/#vclock","title":"VCLOCK","text":"<pre><code>key.VCLOCK = 38\n</code></pre>"},{"location":"types/box.iproto.key/#flags","title":"FLAGS","text":"<pre><code>key.FLAGS = 9\n</code></pre>"},{"location":"types/box.iproto.key/#sql_bind","title":"SQL_BIND","text":"<pre><code>key.SQL_BIND = 65\n</code></pre>"},{"location":"types/box.iproto.key/#event_data","title":"EVENT_DATA","text":"<pre><code>key.EVENT_DATA = 88\n</code></pre>"},{"location":"types/box.iproto.key/#space_id","title":"SPACE_ID","text":"<pre><code>key.SPACE_ID = 16\n</code></pre>"},{"location":"types/box.iproto.key/#term","title":"TERM","text":"<pre><code>key.TERM = 83\n</code></pre>"},{"location":"types/box.iproto.key/#expr","title":"EXPR","text":"<pre><code>key.EXPR = 39\n</code></pre>"},{"location":"types/box.iproto.key/#id_filter","title":"ID_FILTER","text":"<pre><code>key.ID_FILTER = 81\n</code></pre>"},{"location":"types/box.iproto.key/#metadata","title":"METADATA","text":"<pre><code>key.METADATA = 50\n</code></pre>"},{"location":"types/box.iproto.key/#index_name","title":"INDEX_NAME","text":"<pre><code>key.INDEX_NAME = 95\n</code></pre>"},{"location":"types/box.iproto.key/#key","title":"KEY","text":"<pre><code>key.KEY = 32\n</code></pre>"},{"location":"types/box.iproto.key/#options","title":"OPTIONS","text":"<pre><code>key.OPTIONS = 43\n</code></pre>"},{"location":"types/box.iproto.key/#timestamp","title":"TIMESTAMP","text":"<pre><code>key.TIMESTAMP = 4\n</code></pre>"},{"location":"types/box.iproto.key/#data","title":"DATA","text":"<pre><code>key.DATA = 48\n</code></pre>"},{"location":"types/box.iproto.key/#vclock_sync","title":"VCLOCK_SYNC","text":"<pre><code>key.VCLOCK_SYNC = 90\n</code></pre>"},{"location":"types/box.iproto.key/#instance_name","title":"INSTANCE_NAME","text":"<pre><code>key.INSTANCE_NAME = 93\n</code></pre>"},{"location":"types/box.iproto.key/#arrow","title":"ARROW","text":"<pre><code>key.ARROW = 54\n</code></pre>"},{"location":"types/box.iproto.key/#user_name","title":"USER_NAME","text":"<pre><code>key.USER_NAME = 35\n</code></pre>"},{"location":"types/box.iproto.key/#instance_uuid","title":"INSTANCE_UUID","text":"<pre><code>key.INSTANCE_UUID = 36\n</code></pre>"},{"location":"types/box.iproto.key/#server_version","title":"SERVER_VERSION","text":"<pre><code>key.SERVER_VERSION = 6\n</code></pre>"},{"location":"types/box.iproto.key/#new_tuple","title":"NEW_TUPLE","text":"<pre><code>key.NEW_TUPLE = 45\n</code></pre>"},{"location":"types/box.iproto.key/#bind_metadata","title":"BIND_METADATA","text":"<pre><code>key.BIND_METADATA = 51\n</code></pre>"},{"location":"types/box.iproto.key/#tuple_formats","title":"TUPLE_FORMATS","text":"<pre><code>key.TUPLE_FORMATS = 96\n</code></pre>"},{"location":"types/box.iproto.key/#checkpoint_lsn","title":"CHECKPOINT_LSN","text":"<pre><code>key.CHECKPOINT_LSN = 100\n</code></pre>"},{"location":"types/box.iproto.key/#index_base","title":"INDEX_BASE","text":"<pre><code>key.INDEX_BASE = 21\n</code></pre>"},{"location":"types/box.iproto.key/#features","title":"FEATURES","text":"<pre><code>key.FEATURES = 85\n</code></pre>"},{"location":"types/box.iproto.key/#replica_id","title":"REPLICA_ID","text":"<pre><code>key.REPLICA_ID = 2\n</code></pre>"},{"location":"types/box.iproto.key/#event_key","title":"EVENT_KEY","text":"<pre><code>key.EVENT_KEY = 87\n</code></pre>"},{"location":"types/box.iproto.key/#is_checkpoint_join","title":"IS_CHECKPOINT_JOIN","text":"<pre><code>key.IS_CHECKPOINT_JOIN = 98\n</code></pre>"},{"location":"types/box.iproto.key/#request_type","title":"REQUEST_TYPE","text":"<pre><code>key.REQUEST_TYPE = 0\n</code></pre>"},{"location":"types/box.iproto.key/#limit","title":"LIMIT","text":"<pre><code>key.LIMIT = 18\n</code></pre>"},{"location":"types/box.iproto.key/#ops","title":"OPS","text":"<pre><code>key.OPS = 40\n</code></pre>"},{"location":"types/box.iproto.key/#txn_isolation","title":"TXN_ISOLATION","text":"<pre><code>key.TXN_ISOLATION = 89\n</code></pre>"},{"location":"types/box.iproto.key/#index_id","title":"INDEX_ID","text":"<pre><code>key.INDEX_ID = 17\n</code></pre>"},{"location":"types/box.iproto.key/#sql_info","title":"SQL_INFO","text":"<pre><code>key.SQL_INFO = 66\n</code></pre>"},{"location":"types/box.iproto.key/#after_position","title":"AFTER_POSITION","text":"<pre><code>key.AFTER_POSITION = 46\n</code></pre>"},{"location":"types/box.iproto.key/#after_tuple","title":"AFTER_TUPLE","text":"<pre><code>key.AFTER_TUPLE = 47\n</code></pre>"},{"location":"types/box.iproto.key/#tuple","title":"TUPLE","text":"<pre><code>key.TUPLE = 33\n</code></pre>"},{"location":"types/box.iproto.key/#timeout","title":"TIMEOUT","text":"<pre><code>key.TIMEOUT = 86\n</code></pre>"},{"location":"types/box.iproto.key/#function_name","title":"FUNCTION_NAME","text":"<pre><code>key.FUNCTION_NAME = 34\n</code></pre>"},{"location":"types/box.iproto.key/#replica_anon","title":"REPLICA_ANON","text":"<pre><code>key.REPLICA_ANON = 80\n</code></pre>"},{"location":"types/box.iproto.key/#checkpoint_vclock","title":"CHECKPOINT_VCLOCK","text":"<pre><code>key.CHECKPOINT_VCLOCK = 99\n</code></pre>"},{"location":"types/box.iproto.key/#offset","title":"OFFSET","text":"<pre><code>key.OFFSET = 19\n</code></pre>"},{"location":"types/box.iproto.key/#old_tuple","title":"OLD_TUPLE","text":"<pre><code>key.OLD_TUPLE = 44\n</code></pre>"},{"location":"types/box.iproto.key/#lsn","title":"LSN","text":"<pre><code>key.LSN = 3\n</code></pre>"},{"location":"types/box.iproto.key/#tsn","title":"TSN","text":"<pre><code>key.TSN = 8\n</code></pre>"},{"location":"types/box.iproto.key/#iterator","title":"ITERATOR","text":"<pre><code>key.ITERATOR = 20\n</code></pre>"},{"location":"types/box.iproto.key/#fetch_position","title":"FETCH_POSITION","text":"<pre><code>key.FETCH_POSITION = 31\n</code></pre>"},{"location":"types/box.iproto.key/#bind_count","title":"BIND_COUNT","text":"<pre><code>key.BIND_COUNT = 52\n</code></pre>"},{"location":"types/box.iproto.key/#position","title":"POSITION","text":"<pre><code>key.POSITION = 53\n</code></pre>"},{"location":"types/box.iproto.key/#sql_text","title":"SQL_TEXT","text":"<pre><code>key.SQL_TEXT = 64\n</code></pre>"},{"location":"types/box.iproto.key/#error","title":"ERROR","text":"<pre><code>key.ERROR = 82\n</code></pre>"},{"location":"types/box.iproto.key/#replicaset_name","title":"REPLICASET_NAME","text":"<pre><code>key.REPLICASET_NAME = 92\n</code></pre>"},{"location":"types/box.iproto.key/#space_name","title":"SPACE_NAME","text":"<pre><code>key.SPACE_NAME = 94\n</code></pre>"},{"location":"types/box.iproto.key/#replicaset_uuid","title":"REPLICASET_UUID","text":"<pre><code>key.REPLICASET_UUID = 37\n</code></pre>"},{"location":"types/box.iproto.metadata_key/","title":"enum metadata_key","text":"<ul> <li>namespace: box.iproto</li> </ul>"},{"location":"types/box.iproto.metadata_key/#coll","title":"COLL","text":"<pre><code>metadata_key.COLL = 2\n</code></pre>"},{"location":"types/box.iproto.metadata_key/#span","title":"SPAN","text":"<pre><code>metadata_key.SPAN = 5\n</code></pre>"},{"location":"types/box.iproto.metadata_key/#is_autoincrement","title":"IS_AUTOINCREMENT","text":"<pre><code>metadata_key.IS_AUTOINCREMENT = 4\n</code></pre>"},{"location":"types/box.iproto.metadata_key/#type","title":"TYPE","text":"<pre><code>metadata_key.TYPE = 1\n</code></pre>"},{"location":"types/box.iproto.metadata_key/#name","title":"NAME","text":"<pre><code>metadata_key.NAME = 0\n</code></pre>"},{"location":"types/box.iproto.metadata_key/#is_nullable","title":"IS_NULLABLE","text":"<pre><code>metadata_key.IS_NULLABLE = 3\n</code></pre>"},{"location":"types/box.iproto.raft_key/","title":"enum raft_key","text":"<ul> <li>namespace: box.iproto</li> </ul>"},{"location":"types/box.iproto.raft_key/#state","title":"STATE","text":"<pre><code>raft_key.STATE = 2\n</code></pre>"},{"location":"types/box.iproto.raft_key/#leader_id","title":"LEADER_ID","text":"<pre><code>raft_key.LEADER_ID = 4\n</code></pre>"},{"location":"types/box.iproto.raft_key/#vote","title":"VOTE","text":"<pre><code>raft_key.VOTE = 1\n</code></pre>"},{"location":"types/box.iproto.raft_key/#term","title":"TERM","text":"<pre><code>raft_key.TERM = 0\n</code></pre>"},{"location":"types/box.iproto.raft_key/#vclock","title":"VCLOCK","text":"<pre><code>raft_key.VCLOCK = 3\n</code></pre>"},{"location":"types/box.iproto.raft_key/#is_leader_seen","title":"IS_LEADER_SEEN","text":"<pre><code>raft_key.IS_LEADER_SEEN = 5\n</code></pre>"},{"location":"types/box.iproto.type/","title":"enum type","text":"<ul> <li>namespace: box.iproto</li> </ul>"},{"location":"types/box.iproto.type/#nop","title":"NOP","text":"<pre><code>type.NOP = 12\n</code></pre>"},{"location":"types/box.iproto.type/#insert","title":"INSERT","text":"<pre><code>type.INSERT = 2\n</code></pre>"},{"location":"types/box.iproto.type/#execute","title":"EXECUTE","text":"<pre><code>type.EXECUTE = 11\n</code></pre>"},{"location":"types/box.iproto.type/#prepare","title":"PREPARE","text":"<pre><code>type.PREPARE = 13\n</code></pre>"},{"location":"types/box.iproto.type/#vote","title":"VOTE","text":"<pre><code>type.VOTE = 68\n</code></pre>"},{"location":"types/box.iproto.type/#raft_promote","title":"RAFT_PROMOTE","text":"<pre><code>type.RAFT_PROMOTE = 31\n</code></pre>"},{"location":"types/box.iproto.type/#update","title":"UPDATE","text":"<pre><code>type.UPDATE = 4\n</code></pre>"},{"location":"types/box.iproto.type/#raft_demote","title":"RAFT_DEMOTE","text":"<pre><code>type.RAFT_DEMOTE = 32\n</code></pre>"},{"location":"types/box.iproto.type/#select","title":"SELECT","text":"<pre><code>type.SELECT = 1\n</code></pre>"},{"location":"types/box.iproto.type/#vote_deprecated","title":"VOTE_DEPRECATED","text":"<pre><code>type.VOTE_DEPRECATED = 67\n</code></pre>"},{"location":"types/box.iproto.type/#event","title":"EVENT","text":"<pre><code>type.EVENT = 76\n</code></pre>"},{"location":"types/box.iproto.type/#ping","title":"PING","text":"<pre><code>type.PING = 64\n</code></pre>"},{"location":"types/box.iproto.type/#fetch_snapshot","title":"FETCH_SNAPSHOT","text":"<pre><code>type.FETCH_SNAPSHOT = 69\n</code></pre>"},{"location":"types/box.iproto.type/#raft_rollback","title":"RAFT_ROLLBACK","text":"<pre><code>type.RAFT_ROLLBACK = 41\n</code></pre>"},{"location":"types/box.iproto.type/#watch","title":"WATCH","text":"<pre><code>type.WATCH = 74\n</code></pre>"},{"location":"types/box.iproto.type/#insert_arrow","title":"INSERT_ARROW","text":"<pre><code>type.INSERT_ARROW = 17\n</code></pre>"},{"location":"types/box.iproto.type/#begin","title":"BEGIN","text":"<pre><code>type.BEGIN = 14\n</code></pre>"},{"location":"types/box.iproto.type/#rollback","title":"ROLLBACK","text":"<pre><code>type.ROLLBACK = 16\n</code></pre>"},{"location":"types/box.iproto.type/#register","title":"REGISTER","text":"<pre><code>type.REGISTER = 70\n</code></pre>"},{"location":"types/box.iproto.type/#join_snapshot","title":"JOIN_SNAPSHOT","text":"<pre><code>type.JOIN_SNAPSHOT = 72\n</code></pre>"},{"location":"types/box.iproto.type/#unknown","title":"UNKNOWN","text":"<pre><code>type.UNKNOWN = -1\n</code></pre>"},{"location":"types/box.iproto.type/#join_meta","title":"JOIN_META","text":"<pre><code>type.JOIN_META = 71\n</code></pre>"},{"location":"types/box.iproto.type/#subscribe","title":"SUBSCRIBE","text":"<pre><code>type.SUBSCRIBE = 66\n</code></pre>"},{"location":"types/box.iproto.type/#chunk","title":"CHUNK","text":"<pre><code>type.CHUNK = 128\n</code></pre>"},{"location":"types/box.iproto.type/#delete","title":"DELETE","text":"<pre><code>type.DELETE = 5\n</code></pre>"},{"location":"types/box.iproto.type/#commit","title":"COMMIT","text":"<pre><code>type.COMMIT = 15\n</code></pre>"},{"location":"types/box.iproto.type/#watch_once","title":"WATCH_ONCE","text":"<pre><code>type.WATCH_ONCE = 77\n</code></pre>"},{"location":"types/box.iproto.type/#id","title":"ID","text":"<pre><code>type.ID = 73\n</code></pre>"},{"location":"types/box.iproto.type/#unwatch","title":"UNWATCH","text":"<pre><code>type.UNWATCH = 75\n</code></pre>"},{"location":"types/box.iproto.type/#eval","title":"EVAL","text":"<pre><code>type.EVAL = 8\n</code></pre>"},{"location":"types/box.iproto.type/#join","title":"JOIN","text":"<pre><code>type.JOIN = 65\n</code></pre>"},{"location":"types/box.iproto.type/#ok","title":"OK","text":"<pre><code>type.OK = 0\n</code></pre>"},{"location":"types/box.iproto.type/#call","title":"CALL","text":"<pre><code>type.CALL = 10\n</code></pre>"},{"location":"types/box.iproto.type/#raft_confirm","title":"RAFT_CONFIRM","text":"<pre><code>type.RAFT_CONFIRM = 40\n</code></pre>"},{"location":"types/box.iproto.type/#call_16","title":"CALL_16","text":"<pre><code>type.CALL_16 = 6\n</code></pre>"},{"location":"types/box.iproto.type/#replace","title":"REPLACE","text":"<pre><code>type.REPLACE = 3\n</code></pre>"},{"location":"types/box.iproto.type/#raft","title":"RAFT","text":"<pre><code>type.RAFT = 30\n</code></pre>"},{"location":"types/box.iproto.type/#type_error","title":"TYPE_ERROR","text":"<pre><code>type.TYPE_ERROR = 32768\n</code></pre>"},{"location":"types/box.iproto.type/#auth","title":"AUTH","text":"<pre><code>type.AUTH = 7\n</code></pre>"},{"location":"types/box.iproto.type/#upsert","title":"UPSERT","text":"<pre><code>type.UPSERT = 9\n</code></pre>"},{"location":"types/box.iterator/","title":"alias iterator","text":"<ul> <li>namespace: box</li> </ul> <pre><code>(alias) iterator = { after: string?, iterator: (\"GE\"|\"GT\"|\"LT\"|\"LE\"|\"EQ\"|\"REQ\"...) }\n</code></pre>"},{"location":"types/box.on_commit_iterator/","title":"alias on_commit_iterator","text":"<ul> <li>namespace: box</li> </ul> <pre><code>(alias) on_commit_iterator = fun() -&gt; (number,box.tuple?,box.tuple?,number)\n</code></pre> <p>request_id, old_tuple, new_tuple, space_id</p>"},{"location":"types/box.on_commit_trigger_func/","title":"alias on_commit_trigger_func","text":"<ul> <li>namespace: box</li> </ul> <pre><code>(alias) on_commit_trigger_func = fun(iterator: box.on_commit_iterator?)\n</code></pre>"},{"location":"types/box.savepoint/","title":"class savepoint","text":"<ul> <li> <p>supers: table</p> </li> <li> <p>namespace: box</p> </li> </ul>"},{"location":"types/box.schema.create_space_options/","title":"class create_space_options","text":"<ul> <li> <p>supers: table</p> </li> <li> <p>namespace: box.schema</p> </li> </ul>"},{"location":"types/box.schema.create_space_options/#fields","title":"fields","text":""},{"location":"types/box.schema.create_space_options/#create_space_optionsengine","title":"create_space_options.engine","text":"<pre><code>create_space_options.engine : (\"memtx\"|\"vinyl\")?\n</code></pre> <p>(Default: \"memtx\") <code>memtx</code> keeps all data in random-access memory (RAM), and therefore has a low read latency.</p>"},{"location":"types/box.schema.create_space_options/#create_space_optionsfield_count","title":"create_space_options.field_count","text":"<pre><code>create_space_options.field_count : number?\n</code></pre> <p>fixed count of fields: for example if field_count=5, it is illegal to insert a tuple with fewer than or more than 5 fields</p>"},{"location":"types/box.schema.create_space_options/#create_space_optionsformat","title":"create_space_options.format","text":"<pre><code>create_space_options.format : box.space.format?\n</code></pre>"},{"location":"types/box.schema.create_space_options/#create_space_optionsid","title":"create_space_options.id","text":"<pre><code>create_space_options.id : number?\n</code></pre> <p>(Default: last space's id, +1) unique identifier: users can refer to spaces with the id instead of the name</p>"},{"location":"types/box.schema.create_space_options/#create_space_optionsif_not_exists","title":"create_space_options.if_not_exists","text":"<pre><code>create_space_options.if_not_exists : boolean?\n</code></pre> <p>(Default: false) create space only if a space with the same name does not exist already, otherwise do nothing but do not cause an error</p>"},{"location":"types/box.schema.create_space_options/#create_space_optionsis_local","title":"create_space_options.is_local","text":"<pre><code>create_space_options.is_local : boolean?\n</code></pre> <p>(Default: false) space contents are replication-local: changes are stored in the write-ahead log of the local node but there is no replication.</p>"},{"location":"types/box.schema.create_space_options/#create_space_optionsis_sync","title":"create_space_options.is_sync","text":"<pre><code>create_space_options.is_sync : boolean?\n</code></pre> <p>(Default: false) any transaction doing a DML request on this space becomes synchronous</p>"},{"location":"types/box.schema.create_space_options/#create_space_optionstemporary","title":"create_space_options.temporary","text":"<pre><code>create_space_options.temporary : boolean?\n</code></pre> <p>(Default: false) space contents are temporary: changes are not stored in the write-ahead log and there is no replication. Note regarding storage engine: vinyl does not support temporary spaces.</p>"},{"location":"types/box.schema.create_space_options/#create_space_optionsuser","title":"create_space_options.user","text":"<pre><code>create_space_options.user : string?\n</code></pre> <p>(Default: current user's name) name of the user who is considered to be the space's owner for authorization purposes</p>"},{"location":"types/box.schema.func.create_options/","title":"class create_options","text":"<ul> <li> <p>supers: table</p> </li> <li> <p>namespace: box.schema.func</p> </li> </ul>"},{"location":"types/box.schema.func.create_options/#fields","title":"fields","text":""},{"location":"types/box.schema.func.create_options/#create_optionslanguage","title":"create_options.language","text":"<pre><code>create_options.language : (\"LUA\"|\"C\")?\n</code></pre> <p>(Default: 'LUA') The language of the function body</p>"},{"location":"types/box.schema.func.create_options/#create_optionsbody","title":"create_options.body","text":"<pre><code>create_options.body : string?\n</code></pre> <p>The function body</p>"},{"location":"types/box.schema.func.create_options/#create_optionsis_deterministic","title":"create_options.is_deterministic","text":"<pre><code>create_options.is_deterministic : boolean?\n</code></pre> <p>(Default: false) Whether the function is deterministic</p>"},{"location":"types/box.schema.func.create_options/#create_optionsis_sandboxed","title":"create_options.is_sandboxed","text":"<pre><code>create_options.is_sandboxed : boolean?\n</code></pre> <p>(Default: true) Whether the function should be executed in a sandbox</p>"},{"location":"types/box.schema.func.create_options/#create_optionsreturns","title":"create_options.returns","text":"<pre><code>create_options.returns : string?\n</code></pre> <p>The return type</p>"},{"location":"types/box.schema.func.create_options/#create_optionsexports","title":"create_options.exports","text":"<pre><code>create_options.exports : (\"LUA\"|\"SQL\")[]?\n</code></pre> <p>Which interfaces the function is exported to</p>"},{"location":"types/box.schema.func.create_options/#create_optionsparam_list","title":"create_options.param_list","text":"<pre><code>create_options.param_list : string[]?\n</code></pre> <p>List of parameter types</p>"},{"location":"types/box.schema.func.create_options/#create_optionsif_not_exists","title":"create_options.if_not_exists","text":"<pre><code>create_options.if_not_exists : boolean?\n</code></pre> <p>(Default: false) Do not throw an error if the function already exists</p>"},{"location":"types/box.schema.func.create_options/#create_optionssetuid","title":"create_options.setuid","text":"<pre><code>create_options.setuid : boolean?\n</code></pre> <p>(Default: false) Whether the function should be executed with the privileges of its definer</p>"},{"location":"types/box.schema.func.create_options/#create_optionscomment","title":"create_options.comment","text":"<pre><code>create_options.comment : string?\n</code></pre> <p>A comment for the function</p>"},{"location":"types/box.schema.privileges/","title":"alias privileges","text":"<ul> <li>namespace: box.schema</li> </ul> <pre><code>(alias) privileges = (box.schema.privileges.permissions,box.schema.privileges.object_type,string?)[]\n</code></pre>"},{"location":"types/box.schema.privileges.object_type/","title":"alias object_type","text":"<ul> <li>namespace: box.schema.privileges</li> </ul> <pre><code>(alias) object_type = (\"universe\"|\"user\"|\"role\"|\"space\"|\"function\"|\"sequence\"|\"lua_eval\"|\"lua_call\"|\"sql\")\n    | \"universe\" -- A database (box.schema) that contains database objects, including spaces, indexes, users, roles, sequences, and functions. Granting privileges to universe gives a user access to any object in the database.\n    | \"user\" -- A user.\n    | \"role\" -- A role.\n    | \"space\" -- A space.\n    | \"function\" -- A function.\n    | \"sequence\" -- A sequence.\n    | \"lua_eval\" -- Executing arbitrary Lua code.\n    | \"lua_call\" -- Calling any global user-defined Lua function.\n    | \"sql\" -- Executing an arbitrary SQL statement.\n\n</code></pre>"},{"location":"types/box.schema.privileges.permissions/","title":"alias permissions","text":"<ul> <li>namespace: box.schema.privileges</li> </ul> <pre><code>(alias) permissions = (\"read\"|\"write\"|\"create\"|\"alter\"|\"drop\"|\"execute\"|\"session\"|\"usage\"|string)\n    | \"read\" -- Allows reading data of the specified object. For example, this permission can be used to allow a user to select data from the specified space.\n    | \"write\" -- Allows updating data of the specified object. For example, this permission can be used to allow a user to modify data in the specified space.\n    | \"create\" -- Allows creating objects of the specified type. For example, this permission can be used to allow a user to create new spaces. Note this permission requires read and write access to certain system spaces.\n    | \"alter\" -- Allows altering objects of the specified type. Note this permission requires read and write access to certain system spaces.\n    | \"drop\" -- Allows dropping objects of the specified type. Note this permission requires read and write access to certain system spaces.\n    | \"execute\" -- For role, allows using the specified role. For other object types, allows calling a function.\n    | \"session\" -- Allows a user to connect to an instance over IPROTO.\n    | \"usage\" -- Allows a user to use their privileges on database objects (for example, read, write, and alter spaces).\n    | string -- Multiple permissions split by ','. For example, `read,write` means that the user can read and write data from the specified object.\n\n</code></pre>"},{"location":"types/box.schema.sequence.create_options/","title":"class create_options","text":"<ul> <li> <p>supers: table</p> </li> <li> <p>namespace: box.schema.sequence</p> </li> </ul>"},{"location":"types/box.schema.sequence.create_options/#fields","title":"fields","text":""},{"location":"types/box.schema.sequence.create_options/#create_optionsstart","title":"create_options.start","text":"<pre><code>create_options.start : number?\n</code></pre> <p>(Default: 1) The STARTS WITH value. The value to generate the first time a sequence is used.</p>"},{"location":"types/box.schema.sequence.create_options/#create_optionsmin","title":"create_options.min","text":"<pre><code>create_options.min : number?\n</code></pre> <p>(Default: 1) The MINIMUM value. Values smaller than this cannot be generated.</p>"},{"location":"types/box.schema.sequence.create_options/#create_optionsmax","title":"create_options.max","text":"<pre><code>create_options.max : number?\n</code></pre> <p>(Default: 9223372036854775807) The MAXIMUM value. Values larger than this cannot be generated.</p>"},{"location":"types/box.schema.sequence.create_options/#create_optionscycle","title":"create_options.cycle","text":"<pre><code>create_options.cycle : boolean?\n</code></pre> <p>(Default: false) The CYCLE value. Whether to start again when values cannot be generated.</p>"},{"location":"types/box.schema.sequence.create_options/#create_optionscache","title":"create_options.cache","text":"<pre><code>create_options.cache : number?\n</code></pre> <p>(Default: 0) The number of values to store in a cache.</p>"},{"location":"types/box.schema.sequence.create_options/#create_optionsstep","title":"create_options.step","text":"<pre><code>create_options.step : number?\n</code></pre> <p>(Default: 1) What to add to the previous generated value, when generating a new value.</p>"},{"location":"types/box.schema.sequence.create_options/#create_optionsif_not_exists","title":"create_options.if_not_exists","text":"<pre><code>create_options.if_not_exists : boolean?\n</code></pre> <p>(Default: false) If this is true and a sequence with this name exists already, ignore other options and use the existing values.</p>"},{"location":"types/box.sequence/","title":"class sequence","text":"<ul> <li> <p>supers: table</p> </li> <li> <p>namespace: box</p> </li> </ul>"},{"location":"types/box.sequence/#fields","title":"fields","text":""},{"location":"types/box.sequence/#sequencename","title":"sequence.name","text":"<pre><code>sequence.name : string\n</code></pre> <p>The name of the sequence</p>"},{"location":"types/box.sequence/#sequenceid","title":"sequence.id","text":"<pre><code>sequence.id : number\n</code></pre> <p>The numeric identifier of the sequence</p>"},{"location":"types/box.session.type/","title":"alias type","text":"<ul> <li>namespace: box.session</li> </ul> <pre><code>(alias) type = (\"binary\"|\"console\"|\"repl\"|\"applier\"|\"background\")\n    | \"binary\" -- if the connection was done via the binary protocol\n    | \"console\" -- if the connection was done via the administrative console\n    | \"repl\" -- if the connection was done directly\n    | \"applier\" -- if the action is due to replication, regardless of how the connection was done\n    | \"background\" -- if the action is in a background fiber\n\n</code></pre>"},{"location":"types/box.slab.info/","title":"class info","text":"<ul> <li>namespace: box.slab</li> </ul>"},{"location":"types/box.slab.info/#fields","title":"fields","text":""},{"location":"types/box.slab.info/#infoquota_size","title":"info.quota_size","text":"<pre><code>info.quota_size : number\n</code></pre> <p>memory limit for slab allocator</p>"},{"location":"types/box.slab.info/#infoquota_used","title":"info.quota_used","text":"<pre><code>info.quota_used : number\n</code></pre> <p>used by slab allocator</p>"},{"location":"types/box.slab.info/#infoquota_used_ratio","title":"info.quota_used_ratio","text":"<pre><code>info.quota_used_ratio : string\n</code></pre>"},{"location":"types/box.slab.info/#infoarena_size","title":"info.arena_size","text":"<pre><code>info.arena_size : number\n</code></pre> <p>allocated for both tuples and indexes</p>"},{"location":"types/box.slab.info/#infoarena_used","title":"info.arena_used","text":"<pre><code>info.arena_used : number\n</code></pre> <p>used for both tuples and indexes</p>"},{"location":"types/box.slab.info/#infoarena_used_ratio","title":"info.arena_used_ratio","text":"<pre><code>info.arena_used_ratio : string\n</code></pre>"},{"location":"types/box.slab.info/#infoitems_size","title":"info.items_size","text":"<pre><code>info.items_size : number\n</code></pre> <p>allocated only for tuples</p>"},{"location":"types/box.slab.info/#infoitems_used","title":"info.items_used","text":"<pre><code>info.items_used : number\n</code></pre> <p>used only for tuples</p>"},{"location":"types/box.slab.info/#infoitems_used_ratio","title":"info.items_used_ratio","text":"<pre><code>info.items_used_ratio : string\n</code></pre>"},{"location":"types/box.space._ck_constraint_info/","title":"alias _ck_constraint_info","text":"<ul> <li>namespace: box.space</li> </ul> <pre><code>(alias) _ck_constraint_info = { deferred: string, match: string, name: string, space_id: integer, sql: string }\n</code></pre>"},{"location":"types/box.space._ck_constraint_tuple/","title":"alias _ck_constraint_tuple","text":"<ul> <li>namespace: box.space</li> </ul> <pre><code>(alias) _ck_constraint_tuple = (integer,string,string,string,string)\n</code></pre>"},{"location":"types/box.space._collation_info/","title":"alias _collation_info","text":"<ul> <li>namespace: box.space</li> </ul> <pre><code>(alias) _collation_info = { id: integer, locale: string, name: string, opts: table, owner: integer, type: string }\n</code></pre>"},{"location":"types/box.space._collation_tuple/","title":"alias _collation_tuple","text":"<ul> <li>namespace: box.space</li> </ul> <pre><code>(alias) _collation_tuple = (integer,string,integer,string,string,table)\n</code></pre>"},{"location":"types/box.space._index_info/","title":"alias _index_info","text":"<ul> <li>namespace: box.space</li> </ul> <pre><code>(alias) _index_info = { id: integer, iid: integer, name: string, opts: { unique: boolean }, type: string }\n</code></pre>"},{"location":"types/box.space._index_tuple/","title":"alias _index_tuple","text":"<ul> <li>namespace: box.space</li> </ul> <pre><code>(alias) _index_tuple = (integer,integer,string,string,{ unique: boolean })\n</code></pre>"},{"location":"types/box.space._priv_info/","title":"alias _priv_info","text":"<ul> <li>namespace: box.space</li> </ul> <pre><code>(alias) _priv_info = { grantee: integer, grantor: integer, object_id: integer, object_type: string, privilege: string }\n</code></pre>"},{"location":"types/box.space._priv_tuple/","title":"alias _priv_tuple","text":"<ul> <li>namespace: box.space</li> </ul> <pre><code>(alias) _priv_tuple = (integer,integer,string,integer,string)\n</code></pre>"},{"location":"types/box.space._schema_info/","title":"alias _schema_info","text":"<ul> <li>namespace: box.space</li> </ul> <pre><code>(alias) _schema_info = { key: string, value: any }\n</code></pre>"},{"location":"types/box.space._schema_tuple/","title":"alias _schema_tuple","text":"<ul> <li>namespace: box.space</li> </ul> <pre><code>(alias) _schema_tuple = (string,any)\n</code></pre>"},{"location":"types/box.space._sequence_data_info/","title":"alias _sequence_data_info","text":"<ul> <li>namespace: box.space</li> </ul> <pre><code>(alias) _sequence_data_info = { id: integer, value: integer }\n</code></pre>"},{"location":"types/box.space._sequence_data_tuple/","title":"alias _sequence_data_tuple","text":"<ul> <li>namespace: box.space</li> </ul> <pre><code>(alias) _sequence_data_tuple = (integer,integer)\n</code></pre>"},{"location":"types/box.space._sequence_info/","title":"alias _sequence_info","text":"<ul> <li>namespace: box.space</li> </ul> <pre><code>(alias) _sequence_info = { cache: boolean, cycle: boolean, id: integer, max: integer, min: integer, name: string, owner: integer, start: integer, step: integer }\n</code></pre>"},{"location":"types/box.space._sequence_tuple/","title":"alias _sequence_tuple","text":"<ul> <li>namespace: box.space</li> </ul> <pre><code>(alias) _sequence_tuple = (integer,integer,string,integer,integer,integer,integer,boolean,boolean)\n</code></pre>"},{"location":"types/box.space._session_settings_info/","title":"alias _session_settings_info","text":"<ul> <li>namespace: box.space</li> </ul> <pre><code>(alias) _session_settings_info = { name: string, value: any }\n</code></pre>"},{"location":"types/box.space._session_settings_tuple/","title":"alias _session_settings_tuple","text":"<ul> <li>namespace: box.space</li> </ul> <pre><code>(alias) _session_settings_tuple = (string,any)\n</code></pre>"},{"location":"types/box.space._space_info/","title":"alias _space_info","text":"<ul> <li>namespace: box.space</li> </ul> <pre><code>(alias) _space_info = { engine: string, field_count: integer, flags: { temporary: boolean }, format: { [integer]: { [string]: string } }, id: integer, name: string, owner: integer }\n</code></pre>"},{"location":"types/box.space._space_sequence_info/","title":"alias _space_sequence_info","text":"<ul> <li>namespace: box.space</li> </ul> <pre><code>(alias) _space_sequence_info = { cache: integer, cycle: boolean, field: string, is_generated: boolean, max: integer, min: integer, sequence_id: integer, space_id: integer, start: integer }\n</code></pre>"},{"location":"types/box.space._space_sequence_tuple/","title":"alias _space_sequence_tuple","text":"<ul> <li>namespace: box.space</li> </ul> <pre><code>(alias) _space_sequence_tuple = (integer,integer,boolean,string,integer,integer,integer,integer,boolean)\n</code></pre>"},{"location":"types/box.space._space_tuple/","title":"alias _space_tuple","text":"<ul> <li>namespace: box.space</li> </ul> <pre><code>(alias) _space_tuple = (integer,integer,string,string,{ unique: boolean })\n</code></pre>"},{"location":"types/box.space._user_info/","title":"alias _user_info","text":"<ul> <li>namespace: box.space</li> </ul> <pre><code>(alias) _user_info = { auth: ffi.cdata*?, auth_history: ffi.cdata*?, creator: integer, id: integer, name: string, owner: integer?, type: (\"user\"|\"role\") }\n</code></pre>"},{"location":"types/box.space._user_tuple/","title":"alias _user_tuple","text":"<ul> <li>namespace: box.space</li> </ul> <pre><code>(alias) _user_tuple = (integer,integer,string,(\"user\"|\"role\"),ffi.cdata*?,ffi.cdata*?,integer?)\n</code></pre>"},{"location":"types/box.space._vcollation_info/","title":"alias _vcollation_info","text":"<ul> <li>namespace: box.space</li> </ul> <pre><code>(alias) _vcollation_info = box.space._collation_info\n</code></pre>"},{"location":"types/box.space._vcollation_tuple/","title":"alias _vcollation_tuple","text":"<ul> <li>namespace: box.space</li> </ul> <pre><code>(alias) _vcollation_tuple = box.space._collation_tuple\n</code></pre>"},{"location":"types/box.space._vindex_info/","title":"alias _vindex_info","text":"<ul> <li>namespace: box.space</li> </ul> <pre><code>(alias) _vindex_info = box.space._index_info\n</code></pre>"},{"location":"types/box.space._vindex_tuple/","title":"alias _vindex_tuple","text":"<ul> <li>namespace: box.space</li> </ul> <pre><code>(alias) _vindex_tuple = box.space._index_tuple\n</code></pre>"},{"location":"types/box.space._vpriv_info/","title":"alias _vpriv_info","text":"<ul> <li>namespace: box.space</li> </ul> <pre><code>(alias) _vpriv_info = box.space._priv_info\n</code></pre>"},{"location":"types/box.space._vpriv_tuple/","title":"alias _vpriv_tuple","text":"<ul> <li>namespace: box.space</li> </ul> <pre><code>(alias) _vpriv_tuple = box.space._priv_tuple\n</code></pre>"},{"location":"types/box.space._vspace_info/","title":"alias _vspace_info","text":"<ul> <li>namespace: box.space</li> </ul> <pre><code>(alias) _vspace_info = box.space._space_info\n</code></pre>"},{"location":"types/box.space._vspace_sequence_info/","title":"alias _vspace_sequence_info","text":"<ul> <li>namespace: box.space</li> </ul> <pre><code>(alias) _vspace_sequence_info = box.space._space_sequence_info\n</code></pre>"},{"location":"types/box.space._vspace_sequence_tuple/","title":"alias _vspace_sequence_tuple","text":"<ul> <li>namespace: box.space</li> </ul> <pre><code>(alias) _vspace_sequence_tuple = box.space._space_sequence_tuple\n</code></pre>"},{"location":"types/box.space._vspace_tuple/","title":"alias _vspace_tuple","text":"<ul> <li>namespace: box.space</li> </ul> <pre><code>(alias) _vspace_tuple = box.space._space_tuple\n</code></pre>"},{"location":"types/box.space._vuser_info/","title":"alias _vuser_info","text":"<ul> <li>namespace: box.space</li> </ul> <pre><code>(alias) _vuser_info = box.space._user_info\n</code></pre>"},{"location":"types/box.space._vuser_tuple/","title":"alias _vuser_tuple","text":"<ul> <li>namespace: box.space</li> </ul> <pre><code>(alias) _vuser_tuple = box.space._user_tuple\n</code></pre>"},{"location":"types/box.space.alter_options/","title":"class alter_options","text":"<ul> <li>namespace: box.space</li> </ul>"},{"location":"types/box.space.alter_options/#fields","title":"fields","text":""},{"location":"types/box.space.alter_options/#alter_optionsname","title":"alter_options.name","text":"<pre><code>alter_options.name : string?\n</code></pre> <p>name of the space</p>"},{"location":"types/box.space.alter_options/#alter_optionsfield_count","title":"alter_options.field_count","text":"<pre><code>alter_options.field_count : integer?\n</code></pre> <p>fixed count of fields: for example if field_count=5, it is illegal to insert a tuple with fewer than or more than 5 fields</p>"},{"location":"types/box.space.alter_options/#alter_optionsformat","title":"alter_options.format","text":"<pre><code>alter_options.format : box.space.format?\n</code></pre>"},{"location":"types/box.space.alter_options/#alter_optionsis_sync","title":"alter_options.is_sync","text":"<pre><code>alter_options.is_sync : boolean?\n</code></pre> <p>(Default: false) any transaction doing a DML request on this space becomes synchronous</p>"},{"location":"types/box.space.alter_options/#alter_optionstemporary","title":"alter_options.temporary","text":"<pre><code>alter_options.temporary : boolean?\n</code></pre> <p>(Default: false) space contents are temporary: changes are not stored in the write-ahead log and there is no replication. Note regarding storage engine: vinyl does not support temporary spaces.</p>"},{"location":"types/box.space.alter_options/#alter_optionsuser","title":"alter_options.user","text":"<pre><code>alter_options.user : string?\n</code></pre> <p>(Default: current user\u2019s name) name of the user who is considered to be the space\u2019s owner for authorization purposes</p>"},{"location":"types/box.space.collation/","title":"alias collation","text":"<ul> <li>namespace: box.space</li> </ul> <pre><code>(alias) collation = (\"unicode\"|\"unicode_ci\")\n</code></pre>"},{"location":"types/box.space.field_format/","title":"alias field_format","text":"<ul> <li>namespace: box.space</li> </ul> <pre><code>(alias) field_format = ({ collation: box.space.collation?, constraint: (string|{...})?, default: any, default_func: string?, ... }|(string,tuple_type_name))\n</code></pre>"},{"location":"types/box.space.foreign_key/","title":"alias foreign_key","text":"<ul> <li>namespace: box.space</li> </ul> <pre><code>(alias) foreign_key = { field: (string|{ [string]: string }), space: string }\n</code></pre>"},{"location":"types/box.space.format/","title":"alias format","text":"<ul> <li>namespace: box.space</li> </ul> <pre><code>(alias) format = box.space.field_format[]\n</code></pre> <p>field names and types: See the illustrations of format clauses in the space_object:format() description and in the box.space._space example. Optional and usually not specified.</p>"},{"location":"types/box.space.iterator/","title":"alias iterator","text":"<ul> <li>namespace: box.space</li> </ul> <pre><code>(alias) iterator = iterator&lt;tuple&lt;T,U&gt;,nil&gt;\n</code></pre>"},{"location":"types/box.space/","title":"class space","text":"<ul> <li>namespace: box</li> </ul>"},{"location":"types/box.space/#methods","title":"methods","text":""},{"location":"types/box.space/#spacecreate_index","title":"space.create_index","text":"<pre><code>function space.create_index(\n  index_name: string,\n  options: box.index_options\n)\n</code></pre> <p>@param <code>index_name</code> - name of index, which should conform to the rules for object names</p> <p>Create an index.</p> <p>It is mandatory to create an index for a space before trying to insert tuples into it or select tuples from it.</p> <p>The first created index will be used as the primary-key index, so it must be unique.</p> <p>Possible errors:</p> <ul> <li>Too many parts.</li> <li>Index '...' already exists.</li> <li>Primary key must be unique.</li> </ul> <p>Building or rebuilding a large index will cause occasional yields so that other requests will not be blocked.</p> <p>If the other requests cause an illegal situation such as a duplicate key in a unique index, building or rebuilding such index will fail.</p>"},{"location":"types/box.space/#spacealter","title":"space.alter","text":"<pre><code>function space.alter(options: box.space.alter_options)\n</code></pre> <p>Alter an existing space.</p> <p>Since 2.5.2</p> <p>This method changes certain space parameters.</p> <p>Example:</p> <pre><code> tarantool&gt; s = box.schema.create_space('tester')\n ---\n ...\n tarantool&gt; format = {{name = 'field1', type = 'unsigned'}}\n ---\n ...\n tarantool&gt; s:alter({name = 'tester1', format = format})\n ---\n ...\n tarantool&gt; s.name\n ---\n - tester1\n ...\n tarantool&gt; s:format()\n ---\n - [{'name': 'field1', 'type': 'unsigned'}]\n ...\n</code></pre>"},{"location":"types/box.space/#spacebsize","title":"space.bsize","text":"<pre><code>function space.bsize() -&gt; bytes integer\n</code></pre> <p>Number of bytes in the space.</p> <p>This number, which is stored in Tarantool's internal memory, represents the total number of bytes in all tuples, not including index keys</p> <p>Example:</p> <pre><code> tarantool&gt; box.space.tester:bsize()\n ---\n - 22\n ...\n</code></pre>"},{"location":"types/box.space/#spacecount","title":"space.count","text":"<pre><code>function space.count(\n  key: (tuple&lt;T,U&gt;|scalar)?,\n  iterator: box.iterator?\n) -&gt; number_of_tuples number\n</code></pre> <p>Return the number of tuples.</p> <p>If compared with <code>len()</code>, this method works slower because <code>count()</code> scans the entire space to count the tuples.</p> <p>Possible errors:</p> <ul> <li><code>ER_TRANSACTION_CONFLICT</code> if a transaction conflict is detected in the <code>MVCC transaction mode</code>.</li> </ul> <p>Example:</p> <pre><code> tarantool&gt; box.space.tester:count(2, {iterator='GE'})\n ---\n - 1\n ...\n</code></pre>"},{"location":"types/box.space/#spacedelete","title":"space.delete","text":"<pre><code>function space.delete(key: (tuple&lt;T,U&gt;|tuple_type[]|scalar)) -&gt; tuple tuple&lt;T,U&gt;?\n</code></pre> <p>@return <code>tuple</code> - the deleted tuple</p> <p>Delete a tuple identified by the primary key.</p> <p>Possible errors:</p> <ul> <li><code>ER_TRANSACTION_CONFLICT</code> if a transaction conflict is detected in the MVCC transaction mode.</li> </ul> <p>Complexity factors:</p> <ul> <li>Index size.</li> <li>Index type</li> </ul> <p>Note regarding storage engine: vinyl will return <code>nil</code>, rather than the deleted tuple.</p> <p>Example:</p> <pre><code> tarantool&gt; box.space.tester:delete(1)\n ---\n - [1, 'My first tuple']\n ...\n tarantool&gt; box.space.tester:delete(1)\n ---\n ...\n tarantool&gt; box.space.tester:delete('a')\n ---\n - error: 'Supplied key type of part 0 does not match index part type:\n   expected unsigned'\n ...\n</code></pre> <p>For more usage scenarios and typical errors see example: using data operations.</p>"},{"location":"types/box.space/#spacedrop","title":"space.drop","text":"<pre><code>function space.drop()\n</code></pre> <p>Drop a space.</p> <p>The method is performed in background and doesn\u2019t block consequent requests.</p> <p>Possible errors: <code>space_object</code> does not exist.</p> <p>Complexity factors: * Index size. * Index type. * Number of indexes accessed. * WAL settings.</p> <p>Example:</p> <pre><code> box.space.space_that_does_not_exist:drop()\n</code></pre>"},{"location":"types/box.space/#spaceget","title":"space.get","text":"<pre><code>function space.get(key: (tuple&lt;T,U&gt;|tuple_type[]|scalar)) -&gt; tuple tuple&lt;T,U&gt;?\n</code></pre> <p>@return <code>tuple</code> - the tuple whose index key matches key, or nil.</p> <p>Search for a tuple in the given space.</p> <p>Possible errors:</p> <ul> <li><code>space_object</code> does not exist.</li> <li><code>ER_TRANSACTION_CONFLICT</code> if a transaction conflict is detected in the MVCC transaction mode.</li> </ul> <p>Complexity factors:</p> <ul> <li>Index size.</li> <li>Index type.</li> <li>Number of indexes accessed.</li> <li>WAL settings.</li> </ul> <p>The <code>box.space...select</code> function returns a set of tuples as a Lua table; the <code>box.space...get</code> function returns at most a single tuple. And it is possible to get the first tuple in a space by appending <code>[1]</code>. Therefore <code>box.space.tester:get{1}</code> has the same effect as <code>box.space.tester:select{1}[1]</code>, if exactly one tuple is found.</p> <p>Example:</p> <pre><code> box.space.tester:get{1}\n</code></pre> <p>Using field names instead of field numbers: <code>get()</code> can use field names described by the optional <code>box.space.format</code> clause. This is true because the object returned by <code>get()</code> can be used with most of the features described in the <code>box.tuple</code> description, including <code>box.tuple.field_name</code>.</p> <p>For example, we can format the <code>tester</code> space with a field named <code>x</code> and use the name <code>x</code> in the index definition:</p> <pre><code> box.space.tester:format({{name='x',type='scalar'}})\n box.space.tester:create_index('I',{parts={'x'}})\n</code></pre> <p>Then, if <code>get</code> or <code>select</code> retrieves a single tuple, we can reference the field 'x' in the tuple by its name:</p> <pre><code> box.space.tester:get{1}['x']\n box.space.tester:select{1}[1]['x']\n</code></pre>"},{"location":"types/box.space/#spaceinsert","title":"space.insert","text":"<pre><code>function space.insert(tuple: (tuple&lt;T,U&gt;|T)) -&gt; tuple tuple&lt;T,U&gt;\n</code></pre> <p>@param <code>tuple</code> - tuple to be inserted.</p> <p>@return <code>tuple</code> - the inserted tuple</p> <p>Insert a tuple into a space.</p> <p>Possible errors:</p> <ul> <li><code>ER_TUPLE_FOUND</code> if a tuple with the same unique-key value already exists.</li> <li><code>ER_TRANSACTION_CONFLICT</code> if a transaction conflict is detected in the MVCC transaction mode.</li> </ul> <p>Example:</p> <pre><code> tarantool&gt; box.space.tester:insert{5000,'tuple number five thousand'}\n ---\n - [5000, 'tuple number five thousand']\n ...\n</code></pre>"},{"location":"types/box.space/#spacelen","title":"space.len","text":"<pre><code>function space.len() -&gt; number_of_tuples number\n</code></pre> <p>@return <code>number_of_tuples</code> - of tuples in the space.</p> <p>Return the number of tuples in the space.</p> <p>If compared with <code>count()</code>, this method works faster because <code>len()</code> does not scan the entire space to count the tuples.</p> <p>Possible errors:</p> <ul> <li><code>ER_TRANSACTION_CONFLICT</code> if a transaction conflict is detected in the MVCC transaction mode.</li> </ul> <p>Example:</p> <pre><code> tarantool&gt; box.space.tester:len()\n ---\n - 2\n ...\n</code></pre> <p>Note regarding storage engine: vinyl supports <code>len()</code> but the result may be approximate. If an exact result is necessary then use <code>count()</code> or <code>pairs():length()</code>.</p>"},{"location":"types/box.space/#spaceon_replace","title":"space.on_replace","text":"<pre><code>function space.on_replace(\n  trigger_func: (fun(...) -&gt; ...|fun(...) -&gt; ......)?,\n  old_trigger_func: (fun(...) -&gt; ...|fun(...) -&gt; ......)?\n) -&gt; func (fun(...) -&gt; ...|fun(...) -&gt; ......)?\n</code></pre> <p>@return <code>func</code> - the old trigger if it was replaced or deleted</p> <p>Create a \"replace trigger\". The trigger-function will be executed whenever a replace() or insert() or update() or upsert() or delete() happens to a tuple in ."},{"location":"types/box.space/#spacebefore_replace","title":"space.before_replace","text":"<pre><code>function space.before_replace(\n  trigger_func: (fun(...) -&gt; ...|fun(...) -&gt; ......)?,\n  old_trigger_func: (fun(...) -&gt; ...|fun(...) -&gt; ......)?\n) -&gt; func (fun(...) -&gt; ...|fun(...) -&gt; ......)?\n</code></pre> <p>@return <code>func</code> - the old trigger if it was replaced or deleted</p> <p>Create a \u201creplace trigger\u201d. The trigger-function will be executed whenever a replace() or insert() or update() or upsert() or delete() happens to a tuple in ."},{"location":"types/box.space/#spacepairs","title":"space.pairs","text":"<pre><code>function space.pairs(\n  key: (tuple&lt;T,U&gt;|tuple_type[]|scalar)?,\n  iterator: box.iterator?\n) -&gt;  iterator&lt;T,U&gt;\n</code></pre> <p>@param <code>key</code> - value to be matched against the index key, which may be multi-part</p> <p>@param <code>iterator</code> - (Default: 'EQ') defines iterator order</p> <p>Search for a tuple or a set of tuples in the given space, and allow iterating over one tuple at a time.</p>"},{"location":"types/box.space/#spacerename","title":"space.rename","text":"<pre><code>function space.rename(space_name: string)\n</code></pre> <p>Rename a space.</p> <p>Example:</p> <pre><code> tarantool&gt; box.space.space55:rename('space56')\n ---\n ...\n tarantool&gt; box.space.space56:rename('space55')\n ---\n ...\n</code></pre>"},{"location":"types/box.space/#spacereplace","title":"space.replace","text":"<pre><code>function space.replace(tuple) -&gt; tuple tuple&lt;T,U&gt;\n</code></pre> <p>@return <code>tuple</code> - the inserted tuple</p> <p>Insert a tuple into a space.</p> <p>If a tuple with the same primary key already exists, <code>box.space...:replace()</code> replaces the existing tuple with a new one.</p> <p>The syntax variants <code>box.space...:replace()</code> and <code>box.space...:put()</code> have the same effect; the latter is sometimes used to show that the effect is the converse of <code>box.space...:get()</code>.</p> <p>Possible errors:</p> <ul> <li><code>ER_TUPLE_FOUND</code> if a different tuple with the same unique-key value already exists. (This will only happen if there is a unique secondary index.)</li> <li><code>ER_TRANSACTION_CONFLICT</code> if a transaction conflict is detected in the MVCC transaction mode.</li> </ul> <p>Complexity factors:</p> <ul> <li>Index size.</li> <li>Index type.</li> <li>Number of indexes accessed.</li> <li>WAL settings.</li> </ul> <p>Example:</p> <pre><code> box.space.tester:replace{5000, 'tuple number five thousand'}\n</code></pre>"},{"location":"types/box.space/#spaceput","title":"space.put","text":"<pre><code>function space.put(tuple: (tuple&lt;T,U&gt;|T)) -&gt; tuple tuple&lt;T,U&gt;\n</code></pre> <p>@param <code>tuple</code> - tuple to be inserted.</p> <p>@return <code>tuple</code> - the inserted tuple</p> <p>Insert a tuple into a space (synonym for <code>replace()</code>).</p>"},{"location":"types/box.space/#spacerun_triggers","title":"space.run_triggers","text":"<pre><code>function space.run_triggers(flag: boolean)\n</code></pre> <p>At the time that a trigger is defined, it is automatically enabled - that is, it will be executed.</p> <p>Replace triggers can be disabled with <code>box.space.{space-name}:run_triggers(false)</code> and re-enabled with <code>box.space.{space-name}:run_triggers(true)</code>.</p> <p>Example:</p> <p>The following series of requests will associate an existing function named <code>F</code> with an existing space named <code>T</code>, associate the function a second time with the same space (so it will be called twice), disable all triggers of <code>T</code>, and delete each trigger by replacing with <code>nil</code>.</p> <pre><code> tarantool&gt; box.space.T:on_replace(F)\n tarantool&gt; box.space.T:on_replace(F)\n tarantool&gt; box.space.T:run_triggers(false)\n tarantool&gt; box.space.T:on_replace(nil, F)\n tarantool&gt; box.space.T:on_replace(nil, F)\n</code></pre>"},{"location":"types/box.space/#spaceselect","title":"space.select","text":"<pre><code>function space.select(\n  key: (tuple&lt;T,U&gt;|tuple_type[]|scalar),\n  options: box.space.select_options?\n) -&gt; list tuple&lt;T,U&gt;[]\n</code></pre> <p>@return <code>list</code> - the list of tuples</p> <p>Search for a tuple or a set of tuples in the given space by the primary key.</p> <p>To search by the specific index, use the <code>box.index.select</code> method.</p> <p>Note: this method doesn't yield. For details, Cooperative multitasking.</p> <p>Note: the <code>after</code> and <code>fetch_pos</code> options are supported for the <code>TREE</code> index only.</p> <p>Possible errors:</p> <ul> <li>No such space.</li> <li>Wrong type.</li> <li><code>ER_TRANSACTION_CONFLICT</code> if a transaction conflict is detected in the <code>MVCC transaction mode</code>.</li> <li>Iterator position is invalid.</li> </ul> <p>Complexity factors:</p> <ul> <li>Index size.</li> <li>Index type.</li> </ul> <p>Examples:</p> <p>Below are few examples of using <code>select</code> with different parameters. To try out these examples, you need to bootstrap a Tarantool instance as described in using data operations.</p> <pre><code> -- Insert test data --\n tarantool&gt; bands:insert{1, 'Roxette', 1986}\n bands:insert{2, 'Scorpions', 1965}\n bands:insert{3, 'Ace of Base', 1987}\n bands:insert{4, 'The Beatles', 1960}\n bands:insert{5, 'Pink Floyd', 1965}\n bands:insert{6, 'The Rolling Stones', 1962}\n bands:insert{7, 'The Doors', 1965}\n bands:insert{8, 'Nirvana', 1987}\n bands:insert{9, 'Led Zeppelin', 1968}\n bands:insert{10, 'Queen', 1970}\n ---\n ...\n\n -- Select a tuple by the specified primary key --\n tarantool&gt; bands:select(4)\n ---\n - - [4, 'The Beatles', 1960]\n ...\n\n -- Select maximum 3 tuples with the primary key value greater than 3 --\n tarantool&gt; bands:select({3}, {iterator='GT', limit = 3})\n ---\n - - [4, 'The Beatles', 1960]\n   - [5, 'Pink Floyd', 1965]\n   - [6, 'The Rolling Stones', 1962]\n ...\n\n -- Select maximum 3 tuples after the specified tuple --\n tarantool&gt; bands:select({}, {after = {4, 'The Beatles', 1960}, limit = 3})\n ---\n - - [5, 'Pink Floyd', 1965]\n   - [6, 'The Rolling Stones', 1962]\n   - [7, 'The Doors', 1965]\n ...\n\n -- Select first 3 tuples and fetch a last tuple's position --\n tarantool&gt; result, position = bands:select({}, {limit = 3, fetch_pos = true})\n ---\n ...\n -- Then, pass this position as the 'after' parameter --\n tarantool&gt; bands:select({}, {limit = 3, after = position})\n ---\n - - [4, 'The Beatles', 1960]\n   - [5, 'Pink Floyd', 1965]\n   - [6, 'The Rolling Stones', 1962]\n ...\n</code></pre> <p>Note: You can get a field from a tuple both by the field number and field name. See example: using field names instead of field numbers.</p>"},{"location":"types/box.space/#spacetruncate","title":"space.truncate","text":"<pre><code>function space.truncate()\n</code></pre> <p>Deletes all tuples.</p> <p>The method is performed in background and doesn't block consequent requests.</p> <p>Complexity factors:</p> <ul> <li>Index size.</li> <li>Index type.</li> <li>Number of tuples accessed.</li> </ul> <p>The <code>truncate</code> method can only be called by the user who created the space, or from within a <code>setuid</code> function created by the user who created the space.</p> <p>Read more about <code>setuid()</code> functions in the reference for :doc:<code>/reference/reference_lua/box_schema/func_create</code>.</p> <p>Note:</p> <p>Do not call this method within a transaction in Tarantool older than 2.10.0. See :tarantool-issue:<code>6123</code> for details.</p> <p>Example:</p> <pre><code> tarantool&gt; box.space.tester:truncate()\n ---\n ...\n tarantool&gt; box.space.tester:len()\n ---\n - 0\n ...\n</code></pre>"},{"location":"types/box.space/#spaceupdate","title":"space.update","text":"<pre><code>function space.update(\n  key: (tuple&lt;T,U&gt;|tuple_type[]|scalar),\n  update_operations: (box.update_operation,(integer|string),tuple_type)[]\n) -&gt; tuple tuple&lt;T,U&gt;?\n</code></pre> <p>@return <code>tuple</code> - the updated tuple if it was found</p> <p>Update a tuple.</p> <p>The <code>update</code> function supports operations on fields \u2014 assignment, arithmetic (if the field is numeric), cutting and pasting fragments of a field, deleting or inserting a field. Multiple operations can be combined in a single update request, and in this case they are performed atomically and sequentially. Each operation requires specification of a field identifier, which is usually a number. When multiple operations are present, the field number for each operation is assumed to be relative to the most recent state of the tuple, that is, as if all previous operations in a multi-operation update have already been applied. In other words, it is always safe to merge multiple <code>update</code> invocations into a single invocation, with no change in semantics.</p> <p>Possible operators are: * <code>+</code> for addition. values must be numeric, e.g. unsigned or decimal. * <code>-</code> for subtraction. values must be numeric. * <code>&amp;</code> for bitwise AND. values must be unsigned numeric. * <code>|</code> for bitwise OR. values must be unsigned numeric. * <code>^</code> for bitwise :abbr:<code>XOR(exclusive OR)</code>. values must be unsigned numeric. * <code>:</code> for string splice. * <code>!</code> for insertion of a new field. * <code>#</code> for deletion. * <code>=</code> for assignment.</p> <p>Possible <code>field_identifiers</code> are: * Positive field number. The first field is 1, the second field is 2, and so on. * Negative field number. The last field is -1, the second-last field is -2, and so on. In other words: (#tuple + negative field number + 1). * Name. If the space was formatted (<code>box.space.format</code>), then this can be a string for the field 'name'.</p> <p>Possible errors:</p> <ul> <li>It is illegal to modify a primary key field.</li> <li><code>ER_TRANSACTION_CONFLICT</code> if a transaction conflict is detected in the <code>MVCC transaction mode</code>.</li> </ul> <p>Complexity factors:</p> <ul> <li>Index size.</li> <li>Index type.</li> <li>Number of indexes.</li> <li>Accessed, WAL settings.</li> </ul> <p>Thus, in the instruction:</p> <pre><code> s:update(44, {{'+', 1, 55 }, {'=', 3, 'x'}})\n</code></pre> <p>the primary-key value is <code>44</code>, the operators are <code>'+'</code> and <code>'='</code> meaning add a value to a field and then assign a value to a field, the first affected field is field <code>1</code> and the value which will be added to it is <code>55</code>, the second affected field is field <code>3</code> and the value which will be assigned to it is <code>'x'</code>.</p> <p>Example:</p> <p>Assume that initially there is a space named <code>tester</code> with a primary-key index whose type is <code>unsigned</code>. There is one tuple, with <code>field[1]</code> = <code>999</code> and <code>field[2]</code> = <code>'A'</code>.</p> <p>In the update: <code>box.space.tester:update(999, {{'=', 2, 'B'}})</code> The first argument is <code>tester</code>, that is, the affected space is <code>tester</code>. The second argument is <code>999</code>, that is, the affected tuple is identified by primary key value = 999. The third argument is <code>=</code>, that is, there is one operation \u2014 assignment to a field. The fourth argument is <code>2</code>, that is, the affected field is <code>field[2]</code>. The fifth argument is <code>'B'</code>, that is, <code>field[2]</code> contents change to <code>'B'</code>. Therefore, after this update, <code>field[1]</code> = <code>999</code> and <code>field[2]</code> = <code>'B'</code>.</p> <p>In the update: <code>box.space.tester:update({999}, {{'=', 2, 'B'}})</code> the arguments are the same, except that the key is passed as a Lua table (inside braces). This is unnecessary when the primary key has only one field, but would be necessary if the primary key had more than one field. Therefore, after this update, <code>field[1]</code> = <code>999</code> and <code>field[2]</code> = <code>'B'</code> (no change).</p> <p>In the update: <code>box.space.tester:update({999}, {{'=', 3, 1}})</code> the arguments are the same, except that the fourth argument is <code>3</code>, that is, the affected field is <code>field[3]</code>. It is okay that, until now, <code>field[3]</code> has not existed. It gets added. Therefore, after this update, <code>field[1]</code> = <code>999</code>, <code>field[2]</code> = <code>'B'</code>, <code>field[3]</code> = <code>1</code>.</p> <p>In the update: <code>box.space.tester:update({999}, {{'+', 3, 1}})</code> the arguments are the same, except that the third argument is <code>'+'</code>, that is, the operation is addition rather than assignment. Since <code>field[3]</code> previously contained <code>1</code>, this means we're adding <code>1</code> to <code>1</code>. Therefore, after this update, <code>field[1]</code> = <code>999</code>, <code>field[2]</code> = <code>'B'</code>, <code>field[3]</code> = <code>2</code>.</p> <p>In the update: <code>box.space.tester:update({999}, {{'|', 3, 1}, {'=', 2, 'C'}})</code> the idea is to modify two fields at once. The formats are <code>'|'</code> and <code>=</code>, that is, there are two operations, OR and assignment. The fourth and fifth arguments mean that <code>field[3]</code> gets OR'ed with <code>1</code>. The seventh and eighth arguments mean that <code>field[2]</code> gets assigned <code>'C'</code>. Therefore, after this update, <code>field[1]</code> = <code>999</code>, <code>field[2]</code> = <code>'C'</code>, <code>field[3]</code> = <code>3</code>.</p> <p>In the update: <code>box.space.tester:update({999}, {{'#', 2, 1}, {'-', 2, 3}})</code> The idea is to delete <code>field[2]</code>, then subtract <code>3</code> from <code>field[3]</code>. But after the delete, there is a renumbering, so <code>field[3]</code> becomes <code>field[2]</code> before we subtract <code>3</code> from it, and that's why the seventh argument is <code>2</code>, not <code>3</code>. Therefore, after this update, <code>field[1]</code> = <code>999</code>, <code>field[2]</code> = <code>0</code>.</p> <p>In the update: <code>box.space.tester:update({999}, {{'=', 2, 'XYZ'}})</code> we're making a long string so that splice will work in the next example. Therefore, after this update, <code>field[1]</code> = <code>999</code>, <code>field[2]</code> = <code>'XYZ'</code>.</p> <p>In the update: <code>box.space.tester:update({999}, {{':', 2, 2, 1, '!!'}})</code> The third argument is <code>':'</code>, that is, this is the example of splice. The fourth argument is <code>2</code> because the change will occur in <code>field[2]</code>. The fifth argument is 2 because deletion will begin with the second byte. The sixth argument is 1 because the number of bytes to delete is 1. The seventh argument is <code>'!!'</code>, because <code>'!!'</code> is to be added at this position. Therefore, after this update, <code>field[1]</code> = <code>999</code>, <code>field[2]</code> = <code>'X!!Z'</code>.</p> <p>For more usage scenarios and typical errors see example: using data operations.</p> <p>Since 2.3 a tuple can also be updated via JSON paths.</p>"},{"location":"types/box.space/#spaceupsert","title":"space.upsert","text":"<pre><code>function space.upsert(\n  tuple: (tuple&lt;T,U&gt;|tuple_type[]),\n  update_operations: (box.update_operation,(integer|string),tuple_type)[]\n)\n</code></pre> <p>Update or insert a tuple.</p> <p>If there is an existing tuple which matches the key fields of <code>tuple</code>, then the request has the same effect as <code>box.space.update</code> and the <code>{{operator, field_identifier, value}, ...}</code> parameter is used.</p> <p>If there is no existing tuple which matches the key fields of <code>tuple</code>, then the request has the same effect as <code>box.space.insert</code> and the <code>{tuple}</code> parameter is used.</p> <p>However, unlike <code>insert</code> or <code>update</code>, <code>upsert</code> will not read a tuple and perform error checks before returning -- this is a design feature which enhances throughput but requires more caution on the part of the user.</p> <p>Possible errors:</p> <ul> <li>It is illegal to modify a primary-key field.</li> <li>It is illegal to use upsert with a space that has a unique secondary index.</li> <li><code>ER_TRANSACTION_CONFLICT</code> if a transaction conflict is detected in the <code>MVCC transaction mode</code>.</li> </ul> <p>Complexity factors:</p> <ul> <li>Index size.</li> <li>Index type.</li> <li>Number of indexes accessed.</li> <li>WAL settings.</li> </ul> <p>Example:</p> <pre><code> box.space.tester:upsert({12,'c'}, {{'=', 3, 'a'}, {'=', 4, 'b'}})\n</code></pre> <p>For more usage scenarios and typical errors see example: using data operations.</p>"},{"location":"types/box.space/#spacefrommap","title":"space.frommap","text":"<pre><code>function space.frommap(tbl: U) -&gt;  tuple&lt;T,U&gt;\n</code></pre> <p>Convert a map to a tuple instance or to a table.</p> <p>The map must consist of \"field name = value\" pairs.</p> <p>The field names and the value types must match names and types stated previously for the space, via <code>box.space.format</code>.</p> <p>Possible errors:</p> <ul> <li><code>space_object</code> does not exist or has no format.</li> <li>Unknown field.</li> </ul> <p>Example:</p> <pre><code> -- Create a format with two fields named 'a' and 'b'.\n -- Create a space with that format.\n -- Create a tuple based on a map consistent with that space.\n -- Create a table based on a map consistent with that space.\n tarantool&gt; format1 = {{name='a',type='unsigned'},{name='b',type='scalar'}}\n ---\n ...\n tarantool&gt; s = box.schema.create_space('test', {format = format1})\n ---\n ...\n tarantool&gt; s:frommap({b = 'x', a = 123456})\n ---\n - [123456, 'x']\n ...\n tarantool&gt; s:frommap({b = 'x', a = 123456}, {table = true})\n ---\n - - 123456\n   - x\n ...\n</code></pre>"},{"location":"types/box.space/#spaceformat","title":"space.format","text":"<pre><code>function space.format(format: box.space.format?) -&gt;  box.space.format\n</code></pre> <p>Declare field names and types.</p> <p>Possible errors: * <code>space_object</code> does not exist. * Field names are duplicated. * Type is not legal.</p> <p>If you need to make a schema migration, see section Migrations.</p> <p>Ordinarily Tarantool allows unnamed untyped fields. But with <code>format</code> users can, for example, document that the Nth field is the surname field and must contain strings. It is also possible to specify a format clause in <code>box.schema.space.create()</code>`.</p> <p>It is not legal for tuples to contain values that have the wrong type. The example below will cause an error:</p> <pre><code>\n --This example will cause an error.\n box.space.tester:format({{' ',type='number'}})\n box.space.tester:insert{'string-which-is-not-a-number'}\n\n</code></pre> <p>It is not legal for tuples to contain null values if <code>is_nullable=false</code>, which is the default. The example below will cause an error:</p> <pre><code> --This example will cause an error.\n box.space.tester:format({{' ',type='number',is_nullable=false}})\n box.space.tester:insert{nil,2}\n</code></pre> <p>It is legal for tuples to have more fields than are described by a format clause. The way to constrain the number of fields is to specify a space's field_count member.</p> <p>It is legal for tuples to have fewer fields than are described by a format clause, if the omitted trailing fields are described with <code>is_nullable=true</code>. For example, the request below will not cause a format-related error:</p> <pre><code> box.space.tester:format({{'a',type='number'},{'b',type='number',is_nullable=true}})\n box.space.tester:insert{2}\n</code></pre> <p>It is legal to use <code>format</code> on a space that already has a format, thus replacing any previous definitions, provided that there is no conflict with existing data or index definitions.</p> <p>It is legal to use <code>format</code> to change the <code>is_nullable</code> flag. The example below will not cause an error - and will not cause rebuilding of the space.</p> <pre><code> box.space.tester:format({{' ',type='scalar',is_nullable=false}})\n box.space.tester:format({{' ',type='scalar',is_nullable=true}})\n</code></pre> <p>But going the other way and changing <code>is_nullable</code> from <code>true</code> to <code>false</code> might cause rebuilding and might cause an error if there are existing tuples with nulls.</p> <p>Example:</p> <pre><code> box.space.tester:format({{name='surname',type='string'},{name='IDX',type='array'}})\n box.space.tester:format({{name='surname',type='string',is_nullable=true}})\n</code></pre> <p>There are legal variations of the format clause: * omitting both 'name=' and 'type=', * omitting 'type=' alone, * adding extra braces.</p> <p>The following examples show all the variations, first for one field named 'x', second for two fields named 'x' and 'y'.</p> <pre><code> box.space.tester:format({{name='x',type='scalar'}})\n box.space.tester:format({{name='x',type='scalar'},{name='y',type='unsigned'}})\n\n box.space.tester:format({{'x'}})\n box.space.tester:format({{'x'},{'y'}})\n\n -- types\n box.space.tester:format({{name='x'}})\n box.space.tester:format({{name='x'},{name='y'}})\n\n box.space.tester:format({{'x',type='scalar'}})\n box.space.tester:format({{'x',type='scalar'},{'y',type='unsigned'}})\n\n box.space.tester:format({{'x','scalar'}})\n box.space.tester:format({{'x','scalar'},{'y','unsigned'}})\n</code></pre> <p>The following example shows how to create a space, format it with all possible types, and insert into it.</p> <pre><code> tarantool&gt; box.schema.space.create('t')\n ---\n - engine: memtx\n   before_replace: 'function: 0x4019c488'\n   on_replace: 'function: 0x4019c460'\n   ck_constraint: []\n   field_count: 0\n   temporary: false\n   index: []\n   is_local: false\n   enabled: false\n   name: t\n   id: 534\n - created\n ...\n tarantool&gt; ffi = require('ffi')\n ---\n ...\n tarantool&gt; decimal = require('decimal')\n ---\n ...\n tarantool&gt; uuid = require('uuid')\n ---\n ...\n tarantool&gt; box.space.t:format({{name = '1', type = 'any'},\n          &gt;                     {name = '2', type = 'unsigned'},\n          &gt;                     {name = '3', type = 'string'},\n          &gt;                     {name = '4', type = 'number'},\n          &gt;                     {name = '5', type = 'double'},\n          &gt;                     {name = '6', type = 'integer'},\n          &gt;                     {name = '7', type = 'boolean'},\n          &gt;                     {name = '8', type = 'decimal'},\n          &gt;                     {name = '9', type = 'uuid'},\n          &gt;                     {name = 'a', type = 'scalar'},\n          &gt;                     {name = 'b', type = 'array'},\n          &gt;                     {name = 'c', type = 'map'}})\n ---\n ...\n tarantool&gt; box.space.t:create_index('i',{parts={2, type = 'unsigned'}})\n ---\n - unique: true\n   parts:\n   - type: unsigned\n     is_nullable: false\n     fieldno: 2\n   id: 0\n   space_id: 534\n   type: TREE\n   name: i\n ...\n tarantool&gt; box.space.t:insert{{'a'}, -- any\n          &gt;                    1, -- unsigned\n          &gt;                    'W?', -- string\n          &gt;                    5.5, -- number\n          &gt;                    ffi.cast('double', 1), -- double\n          &gt;                    -0, -- integer\n          &gt;                    true, -- boolean\n          &gt;                    decimal.new(1.2), -- decimal\n          &gt;                    uuid.new(), -- uuid\n          &gt;                    true, -- scalar\n          &gt;                    {{'a'}}, -- array\n          &gt;                    {val=1}} -- map\n ---\n - [['a'], 1, 'W?', 5.5, 1, 0, true, 1.2, 1f41e7b8-3191-483d-b46e-1aa6a4b14557, true, [['a']], {'val': 1}]\n ...\n</code></pre> <p>Names specified with the format clause can be used in <code>box.space.get()</code> and in <code>box.space.create_index()</code> and in :doc:<code>/reference/reference_lua/box_tuple/field_name</code> and in :doc:<code>/reference/reference_lua/box_tuple/field_path</code>.</p> <p>If the format clause is omitted, then the returned value is the table that was used in a previous <code>{space_object}:format({format-clause})</code> invocation. For example, after <code>box.space.tester:format({{'x','scalar'}})</code>, <code>box.space.tester:format()</code> will return <code>[{'name': 'x', 'type': 'scalar'}]</code>.</p> <p>Formatting or reformatting a large space will cause occasional yields so that other requests will not be blocked. If the other requests cause an illegal situation such as a field value of the wrong type, the formatting or reformatting will fail.</p>"},{"location":"types/box.space/#spaceauto_increment","title":"space.auto_increment","text":"<pre><code>function space.auto_increment(\n  sequence_name: string,\n  tuple: (T|tuple&lt;T,U&gt;)?\n) -&gt; tuple tuple&lt;T,U&gt;\n</code></pre> <p>@param <code>sequence_name</code> - The sequence name or sequence id</p> <p>@param <code>tuple</code> - tuple to be inserted</p> <p>@return <code>tuple</code> - the inserted tuple</p> <p>Generate the next value of the specified sequence and insert a tuple.</p>"},{"location":"types/box.space/#spacestat","title":"space.stat","text":"<pre><code>function space.stat() -&gt; statistics table\n</code></pre> <p>@return <code>statistics</code> - table containing memory usage and operation statistics</p> <p>Return space statistics.</p> <p>This function returns statistics for the space including memory usage details, number of operations performed, etc.</p>"},{"location":"types/box.space/#spacecreate_check_constraint","title":"space.create_check_constraint","text":"<pre><code>function space.create_check_constraint(\n  constraint_name: string,\n  expression: string\n)\n</code></pre> <p>@param <code>constraint_name</code> - name of the constraint</p> <p>@param <code>expression</code> - SQL expression for the constraint</p> <p>Create a check constraint.</p> <p>A check constraint is a SQL CHECK constraint that is added to a space.</p>"},{"location":"types/box.space/#spaceuser_defined","title":"space.user_defined","text":"<pre><code>function space.user_defined(\n  method_name: string,\n  method_function: function\n)\n</code></pre> <p>@param <code>method_name</code> - name of the method to add</p> <p>@param <code>method_function</code> - the function to be added as a method</p> <p>Add a user-defined method to the space object.</p> <p>This allows users to add their own methods to space objects.</p>"},{"location":"types/box.space/#spaceupgrade","title":"space.upgrade","text":"<pre><code>function space.upgrade(format: box.space.format?)\n</code></pre> <p>@param <code>format</code> - new format for the space</p> <p>Upgrade the space format and tuples.</p> <p>This method upgrades the space format to handle schema changes. Referenced as box_space-upgrade in the documentation.</p>"},{"location":"types/box.space/#fields","title":"fields","text":""},{"location":"types/box.space/#spaceid","title":"space.id","text":"<pre><code>space.id : integer\n</code></pre> <p>Ordinal space number. Spaces can be referenced by either name or number</p>"},{"location":"types/box.space/#spacename","title":"space.name","text":"<pre><code>space.name : string\n</code></pre> <p>name of the space</p>"},{"location":"types/box.space/#spaceenabled","title":"space.enabled","text":"<pre><code>space.enabled : boolean\n</code></pre> <p>Whether or not this space is enabled. The value is false if the space has no index.</p>"},{"location":"types/box.space/#spaceengine","title":"space.engine","text":"<pre><code>space.engine : string\n</code></pre>"},{"location":"types/box.space/#spaceis_sync","title":"space.is_sync","text":"<pre><code>space.is_sync : boolean\n</code></pre>"},{"location":"types/box.space/#spaceis_local","title":"space.is_local","text":"<pre><code>space.is_local : boolean\n</code></pre>"},{"location":"types/box.space/#spacetemporary","title":"space.temporary","text":"<pre><code>space.temporary : boolean\n</code></pre>"},{"location":"types/box.space/#spacefield_count","title":"space.field_count","text":"<pre><code>space.field_count : integer\n</code></pre> <p>(Default: 0) The required field count for all tuples in this space</p>"},{"location":"types/box.space/#spaceindex","title":"space.index","text":"<pre><code>space.index : table&lt;(integer|string),box.index&gt;\n</code></pre> <p>kv and list of indexes of space</p>"},{"location":"types/box.space.nullable_action/","title":"alias nullable_action","text":"<ul> <li>namespace: box.space</li> </ul> <pre><code>(alias) nullable_action = (\"none\"|\"rollback\"|\"abort\"|\"fail\"|\"ignore\"|\"replace\"|\"default\")\n</code></pre>"},{"location":"types/box.space.replace_trigger/","title":"alias replace_trigger","text":"<ul> <li>namespace: box.space</li> </ul> <pre><code>(alias) replace_trigger = (fun(old_tuple: tuple&lt;T,U&gt;?, new_tuple: tuple&lt;T,U&gt;?, space_name: string?) -&gt; tuple&lt;T,U&gt;?|fun(old_tuple: tuple&lt;T,U&gt;, new_tuple: tuple&lt;T,U&gt;, space_name: string, request_type: (\"INSERT\"|\"UPDATE\"|\"REPLACE\"|\"UPSERT\")) -&gt; tuple&lt;T,U&gt;?|fun(old_tuple: nil, new_tuple: tuple&lt;T,U&gt;, space_name: string, request_type: (\"INSERT\"|\"UPDATE\"|\"REPLACE\"|\"UPSERT\")) -&gt; tuple&lt;T,U&gt;?|fun(old_tuple: tuple&lt;T,U&gt;, new_tuple: nil, space_name: string, request_type: \"DELETE\") -&gt; tuple&lt;T,U&gt;?)\n    | fun(...) -&gt; ...\n    | fun(...) -&gt; ...\n    | fun(...) -&gt; ...\n    | fun(...) -&gt; ...\n\n</code></pre>"},{"location":"types/box.space.select_options/","title":"class select_options","text":"<ul> <li> <p>supers: table</p> </li> <li> <p>namespace: box.space</p> </li> </ul>"},{"location":"types/box.space.select_options/#fields","title":"fields","text":""},{"location":"types/box.space.select_options/#select_optionsiterator","title":"select_options.iterator","text":"<pre><code>select_options.iterator : box.iterator?\n</code></pre> <p>type of the iterator</p>"},{"location":"types/box.space.select_options/#select_optionslimit","title":"select_options.limit","text":"<pre><code>select_options.limit : integer?\n</code></pre> <p>maximum number of tuples</p>"},{"location":"types/box.space.select_options/#select_optionsoffset","title":"select_options.offset","text":"<pre><code>select_options.offset : integer?\n</code></pre> <p>number of tuples to skip</p>"},{"location":"types/box.spaces/","title":"class spaces","text":"<ul> <li>namespace: box</li> </ul> <p>Builtin <code>box.space</code> submodule.</p> <p>CRUD operations in Tarantool are implemented by the <code>box.space</code> submodule.</p> <p>It has the data-manipulation functions <code>select</code>, <code>insert</code>, <code>replace</code>, <code>update</code>, <code>upsert</code>, <code>delete</code>, <code>get</code>, <code>put</code>. It also has members, such as id, and whether or not a space is enabled.</p>"},{"location":"types/box.spaces/#fields","title":"fields","text":""},{"location":"types/box.spaces/#spaces_user","title":"spaces._user","text":"<pre><code>spaces._user : space&lt;box.space._user_tuple,box.space._user_info&gt;\n</code></pre> <p>System <code>_user</code> space.</p> <p><code>_user</code> is a system space where user names and password hashes are stored.</p> <p>Learn more about Tarantool's access control system from the access control topic.</p> <p>There are five special tuples in the <code>_user</code> space: 'guest', 'admin', 'public', 'replication', and 'super'.</p> <p>+-------------+----+------+----------------------------------------------------------------+ | Name        | ID | Type | Description                                                    | +=============+====+======+================================================================+ | guest       | 0  | user | Default user when connecting remotely.                         | |             |    |      | Usually, an untrusted user with few privileges.                | +-------------+----+------+----------------------------------------------------------------+ | admin       | 1  | user | Default user when using Tarantool as a console.                | |             |    |      | Usually, an                                                    | |             |    |      | administrative user                                            | |             |    |      | with all privileges.                                           | +-------------+----+------+----------------------------------------------------------------+ | public      | 2  | role | Pre-defined role,                                              | |             |    |      | automatically granted to new users when they are               | |             |    |      | created with                                                   | |             |    |      | <code>box.schema.user.create(user-name)</code>.                             | |             |    |      | Therefore a convenient way to grant 'read' on space            | |             |    |      | 't' to every user that will ever exist is with                 | |             |    |      | <code>box.schema.role.grant('public','read','space','t')</code>.            | +-------------+----+------+----------------------------------------------------------------+ | replication | 3  | role | Pre-defined role,                                              | |             |    |      | which the 'admin' user can grant to users who need to use      | |             |    |      | replication features.                                          | +-------------+----+------+----------------------------------------------------------------+ | super       | 31 | role | Pre-defined role,                                              | |             |    |      | which the 'admin' user can grant to users who need all         | |             |    |      | privileges on all objects.                                     | |             |    |      | The 'super' role has these privileges on                       | |             |    |      | 'universe':                                                    | |             |    |      | read, write, execute, create, drop, alter.                     | +-------------+----+------+----------------------------------------------------------------+</p> <p>To select a tuple from the <code>_user</code> space, use <code>box.space._user:select()</code>. In the example below, <code>select</code> is executed for a user with id = 0. This is the 'guest' user that has no password.</p> <pre><code> tarantool&gt; box.space._user:select{0}\n ---\n - - [0, 1, 'guest', 'user']\n ...\n</code></pre> <p>Warning:</p> <p>To change tuples in the <code>_user</code> space, do not use ordinary <code>box.space</code> functions for insert, update, or delete.</p> <p>Learn more from access control users.</p>"},{"location":"types/box.spaces/#spaces_cluster","title":"spaces._cluster","text":"<pre><code>spaces._cluster : unknown\n</code></pre> <p>System <code>_cluster</code> space</p> <p><code>_cluster</code> is a system space for support of the replication feature.</p>"},{"location":"types/box.spaces/#spaces_func","title":"spaces._func","text":"<pre><code>spaces._func : unknown\n</code></pre> <p>System <code>_func</code> space</p> <p>A system space containing functions created using <code>box.schema.func.create()</code>.</p> <p>If a function's definition is specified in the body option, this function is persistent. In this case, its definition is stored in a snapshot and can be recovered if the server restarts.</p>"},{"location":"types/box.spaces/#spaces_space","title":"spaces._space","text":"<pre><code>spaces._space : space&lt;box.space._space_tuple,box.space._space_info&gt;\n</code></pre> <p>System <code>_space</code> space.</p> <p><code>_space</code> is a system space. It contains all spaces hosted on the current Tarantool instance, both system ones and created by users.</p> <p>The system space view for <code>_space</code> is <code>_vspace</code>.</p> <p>Example #1:</p> <p>The following function will display every simple field in all tuples of <code>_space</code>.</p> <pre><code> function example()\n     local ta = {}\n     local i, line\n     for k, v in box.space._space:pairs() do\n         i = 1\n         line = ''\n         while i &lt;= #v do\n             if type(v[i]) ~= 'table' then\n                 line = line .. v[i] .. ' '\n             end\n         i = i + 1\n         end\n         table.insert(ta, line)\n     end\n     return ta\n end\n</code></pre> <p>Here is what <code>example()</code> returns in a typical installation:</p> <pre><code> tarantool&gt; example()\n ---\n - - '272 1 _schema memtx 0  '\n   - '280 1 _space memtx 0  '\n   - '281 1 _vspace sysview 0  '\n   - '288 1 _index memtx 0  '\n   - '296 1 _func memtx 0  '\n   - '304 1 _user memtx 0  '\n   - '305 1 _vuser sysview 0  '\n   - '312 1 _priv memtx 0  '\n   - '313 1 _vpriv sysview 0  '\n   - '320 1 _cluster memtx 0  '\n   - '512 1 tester memtx 0  '\n   - '513 1 origin vinyl 0  '\n   - '514 1 archive memtx 0  '\n ...\n</code></pre> <p>Example #2:</p> <p>The following requests will create a space using <code>box.schema.space.create()</code> with a format clause, then retrieve the <code>_space</code> tuple for the new space.</p> <p>This illustrates the typical use of the <code>format</code> clause, it shows the recommended names and data types for the fields.</p> <pre><code> tarantool&gt; box.schema.space.create('TM', {\n &gt;   id = 12345,\n &gt;   format = {\n &gt;     [1] = {[\"name\"] = \"field_1\"},\n &gt;     [2] = {[\"type\"] = \"unsigned\"}\n &gt;   }\n &gt; })\n ---\n - index: []\n   on_replace: 'function: 0x41c67338'\n   temporary: false\n   id: 12345\n   engine: memtx\n   enabled: false\n   name: TM\n   field_count: 0\n - created\n ...\n tarantool&gt; box.space._space:select(12345)\n ---\n - - [12345, 1, 'TM', 'memtx', 0, {}, [{'name': 'field_1'}, {'type': 'unsigned'}]]\n ...\n</code></pre>"},{"location":"types/box.spaces/#spaces_index","title":"spaces._index","text":"<pre><code>spaces._index : space&lt;box.space._index_tuple,box.space._index_info&gt;\n</code></pre> <p>System <code>_index</code> space.</p> <p>Tuples in this space contain the following fields:</p> <p>Here is what <code>_index</code> contains in a typical installation:</p> <pre><code> tarantool&gt; box.space._index:select{}\n ---\n - - [272, 0, 'primary', 'tree', {'unique': true}, [[0, 'string']]]\n   - [280, 0, 'primary', 'tree', {'unique': true}, [[0, 'unsigned']]]\n   - [280, 1, 'owner', 'tree', {'unique': false}, [[1, 'unsigned']]]\n   - [280, 2, 'name', 'tree', {'unique': true}, [[2, 'string']]]\n   - [281, 0, 'primary', 'tree', {'unique': true}, [[0, 'unsigned']]]\n   - [281, 1, 'owner', 'tree', {'unique': false}, [[1, 'unsigned']]]\n   - [281, 2, 'name', 'tree', {'unique': true}, [[2, 'string']]]\n   - [288, 0, 'primary', 'tree', {'unique': true}, [[0, 'unsigned'], [1, 'unsigned']]]\n   - [288, 2, 'name', 'tree', {'unique': true}, [[0, 'unsigned'], [2, 'string']]]\n   - [289, 0, 'primary', 'tree', {'unique': true}, [[0, 'unsigned'], [1, 'unsigned']]]\n   - [289, 2, 'name', 'tree', {'unique': true}, [[0, 'unsigned'], [2, 'string']]]\n   - [296, 0, 'primary', 'tree', {'unique': true}, [[0, 'unsigned']]]\n   - [296, 1, 'owner', 'tree', {'unique': false}, [[1, 'unsigned']]]\n   - [296, 2, 'name', 'tree', {'unique': true}, [[2, 'string']]]\n ---\n ...\n</code></pre> <p>The system space view for <code>_index</code> is <code>_vindex</code>.</p>"},{"location":"types/box.spaces/#spaces_vindex","title":"spaces._vindex","text":"<pre><code>spaces._vindex : space&lt;box.space._vindex_tuple,box.space._vindex_info&gt;\n</code></pre> <p>System <code>_vindex</code> space (view of _index).</p> <p>This is a view of the _index space that shows only indexes accessible to the current user.</p>"},{"location":"types/box.spaces/#spaces_priv","title":"spaces._priv","text":"<pre><code>spaces._priv : space&lt;box.space._priv_tuple,box.space._priv_info&gt;\n</code></pre> <p>System <code>_priv</code> space.</p> <p>This space contains privilege information for access control.</p>"},{"location":"types/box.spaces/#spaces_vpriv","title":"spaces._vpriv","text":"<pre><code>spaces._vpriv : space&lt;box.space._vpriv_tuple,box.space._vpriv_info&gt;\n</code></pre> <p>System <code>_vpriv</code> space (view of _priv).</p> <p>This is a view of the _priv space that shows only privileges accessible to the current user.</p>"},{"location":"types/box.spaces/#spaces_schema","title":"spaces._schema","text":"<pre><code>spaces._schema : space&lt;box.space._schema_tuple,box.space._schema_info&gt;\n</code></pre> <p>System <code>_schema</code> space.</p> <p>This space contains schema information and version details.</p>"},{"location":"types/box.spaces/#spaces_sequence","title":"spaces._sequence","text":"<pre><code>spaces._sequence : space&lt;box.space._sequence_tuple,box.space._sequence_info&gt;\n</code></pre> <p>System <code>_sequence</code> space.</p> <p>This space contains sequence definitions.</p>"},{"location":"types/box.spaces/#spaces_sequence_data","title":"spaces._sequence_data","text":"<pre><code>spaces._sequence_data : space&lt;box.space._sequence_data_tuple,box.space._sequence_data_info&gt;\n</code></pre> <p>System <code>_sequence_data</code> space.</p> <p>This space contains current values of sequences.</p>"},{"location":"types/box.spaces/#spaces_vspace","title":"spaces._vspace","text":"<pre><code>spaces._vspace : space&lt;box.space._vspace_tuple,box.space._vspace_info&gt;\n</code></pre> <p>System <code>_vspace</code> space (view of _space).</p> <p>This is a view of the _space space that shows only spaces accessible to the current user.</p>"},{"location":"types/box.spaces/#spaces_space_sequence","title":"spaces._space_sequence","text":"<pre><code>spaces._space_sequence : space&lt;box.space._space_sequence_tuple,box.space._space_sequence_info&gt;\n</code></pre> <p>System <code>_space_sequence</code> space.</p> <p>This space contains connections between spaces and sequences.</p>"},{"location":"types/box.spaces/#spaces_vspace_sequence","title":"spaces._vspace_sequence","text":"<pre><code>spaces._vspace_sequence : space&lt;box.space._vspace_sequence_tuple,box.space._vspace_sequence_info&gt;\n</code></pre> <p>System <code>_vspace_sequence</code> space (view of _space_sequence).</p> <p>This is a view of the _space_sequence space that shows only connections accessible to the current user.</p>"},{"location":"types/box.spaces/#spaces_vuser","title":"spaces._vuser","text":"<pre><code>spaces._vuser : space&lt;box.space._vuser_tuple,box.space._vuser_info&gt;\n</code></pre> <p>System <code>_vuser</code> space (view of _user).</p> <p>This is a view of the _user space that shows only users accessible to the current user.</p>"},{"location":"types/box.spaces/#spaces_ck_constraint","title":"spaces._ck_constraint","text":"<pre><code>spaces._ck_constraint : space&lt;box.space._ck_constraint_tuple,box.space._ck_constraint_info&gt;\n</code></pre> <p>System <code>_ck_constraint</code> space.</p> <p>This space contains check constraints.</p>"},{"location":"types/box.spaces/#spaces_collation","title":"spaces._collation","text":"<pre><code>spaces._collation : space&lt;box.space._collation_tuple,box.space._collation_info&gt;\n</code></pre> <p>System <code>_collation</code> space.</p> <p>This space contains collation definitions.</p>"},{"location":"types/box.spaces/#spaces_vcollation","title":"spaces._vcollation","text":"<pre><code>spaces._vcollation : space&lt;box.space._vcollation_tuple,box.space._vcollation_info&gt;\n</code></pre> <p>System <code>_vcollation</code> space (view of _collation).</p> <p>This is a view of the _collation space that shows only collations accessible to the current user.</p>"},{"location":"types/box.spaces/#spaces_session_settings","title":"spaces._session_settings","text":"<pre><code>spaces._session_settings : space&lt;box.space._session_settings_tuple,box.space._session_settings_info&gt;\n</code></pre> <p>System <code>_session_settings</code> space.</p> <p>This space contains settings that affect the behavior of the current session.</p>"},{"location":"types/box.stat.default/","title":"class default","text":"<ul> <li>namespace: box.stat</li> </ul>"},{"location":"types/box.stat.default/#fields","title":"fields","text":""},{"location":"types/box.stat.default/#defaulttotal","title":"default.total","text":"<pre><code>default.total : number\n</code></pre>"},{"location":"types/box.stat.default/#defaultrps","title":"default.rps","text":"<pre><code>default.rps : number\n</code></pre>"},{"location":"types/box.stat.default_with_current/","title":"class default_with_current","text":"<ul> <li> <p>supers: box.stat.default</p> </li> <li> <p>namespace: box.stat</p> </li> </ul>"},{"location":"types/box.stat.default_with_current/#fields","title":"fields","text":""},{"location":"types/box.stat.default_with_current/#default_with_currentcurrent","title":"default_with_current.current","text":"<pre><code>default_with_current.current : number\n</code></pre>"},{"location":"types/box.stat.info/","title":"class info","text":"<ul> <li>namespace: box.stat</li> </ul>"},{"location":"types/box.stat.info/#fields","title":"fields","text":""},{"location":"types/box.stat.info/#infoinsert","title":"info.INSERT","text":"<pre><code>info.INSERT : box.stat.default {\n    total: number,\n    rps: number,\n}\n</code></pre>"},{"location":"types/box.stat.info/#infodelete","title":"info.DELETE","text":"<pre><code>info.DELETE : box.stat.default {\n    total: number,\n    rps: number,\n}\n</code></pre>"},{"location":"types/box.stat.info/#infoselect","title":"info.SELECT","text":"<pre><code>info.SELECT : box.stat.default {\n    total: number,\n    rps: number,\n}\n</code></pre>"},{"location":"types/box.stat.info/#inforeplace","title":"info.REPLACE","text":"<pre><code>info.REPLACE : box.stat.default {\n    total: number,\n    rps: number,\n}\n</code></pre>"},{"location":"types/box.stat.info/#infoupdate","title":"info.UPDATE","text":"<pre><code>info.UPDATE : box.stat.default {\n    total: number,\n    rps: number,\n}\n</code></pre>"},{"location":"types/box.stat.info/#infoupsert","title":"info.UPSERT","text":"<pre><code>info.UPSERT : box.stat.default {\n    total: number,\n    rps: number,\n}\n</code></pre>"},{"location":"types/box.stat.info/#infocall","title":"info.CALL","text":"<pre><code>info.CALL : box.stat.default {\n    total: number,\n    rps: number,\n}\n</code></pre>"},{"location":"types/box.stat.info/#infoeval","title":"info.EVAL","text":"<pre><code>info.EVAL : box.stat.default {\n    total: number,\n    rps: number,\n}\n</code></pre>"},{"location":"types/box.stat.info/#infoauth","title":"info.AUTH","text":"<pre><code>info.AUTH : box.stat.default {\n    total: number,\n    rps: number,\n}\n</code></pre>"},{"location":"types/box.stat.info/#infoerror","title":"info.ERROR","text":"<pre><code>info.ERROR : box.stat.default {\n    total: number,\n    rps: number,\n}\n</code></pre>"},{"location":"types/box.stat/","title":"class stat","text":"<ul> <li>namespace: box</li> </ul>"},{"location":"types/box.stat/#methods","title":"methods","text":""},{"location":"types/box.stat/#statreset","title":"stat.reset","text":"<pre><code>function stat.reset()-&gt; nil\n</code></pre>"},{"location":"types/box.stat/#statnet","title":"stat.net","text":"<pre><code>function stat.net()-&gt; box.stat.net\n</code></pre>"},{"location":"types/box.stat.net/","title":"class net","text":"<ul> <li>namespace: box.stat</li> </ul>"},{"location":"types/box.stat.net/#fields","title":"fields","text":""},{"location":"types/box.stat.net/#netsent","title":"net.SENT","text":"<pre><code>net.SENT : box.stat.default {\n    total: number,\n    rps: number,\n}\n</code></pre> <p>sent bytes to iproto</p>"},{"location":"types/box.stat.net/#netreceived","title":"net.RECEIVED","text":"<pre><code>net.RECEIVED : box.stat.default {\n    total: number,\n    rps: number,\n}\n</code></pre> <p>received bytes from iproto</p>"},{"location":"types/box.stat.net/#netconnections","title":"net.CONNECTIONS","text":"<pre><code>net.CONNECTIONS : box.stat.default_with_current {\n    current: number,\n}\n</code></pre> <p>iproto connections statistics</p>"},{"location":"types/box.stat.net/#netrequests","title":"net.REQUESTS","text":"<pre><code>net.REQUESTS : box.stat.default_with_current {\n    current: number,\n}\n</code></pre> <p>iproto requests statistics</p>"},{"location":"types/box.tuple.field_format/","title":"alias field_format","text":"<ul> <li>namespace: box.tuple</li> </ul> <pre><code>(alias) field_format = box.space.field_format\n</code></pre>"},{"location":"types/box.tuple.format/","title":"class format","text":"<ul> <li> <p>supers: userdata</p> </li> <li> <p>namespace: box.tuple</p> </li> </ul> <p>Tuple format.</p>"},{"location":"types/box.tuple.format/#methods","title":"methods","text":""},{"location":"types/box.tuple.format/#formattotable","title":"format.totable","text":"<pre><code>function format.totable() -&gt;  box.tuple.field_format[]\n</code></pre> <p>Returns tuple format as a lua table.</p>"},{"location":"types/box.tuple.format/#formatpairs","title":"format.pairs","text":"<pre><code>function format.pairs() -&gt;  fun(tbl: any) -&gt; (integer,box.tuple.field_format)\n</code></pre> <p>Get a tuple_format iterator.</p> <p>In Lua, <code>lua-table-value:pairs()</code> is a method which returns: <code>function</code>, <code>lua-table-value</code>, <code>nil</code>.</p> <p>Tarantool has extended this so that <code>tuple_format:pairs()</code> returns: <code>function</code>, <code>tuple_format_field</code>, <code>nil</code>. It is useful for Lua iterators, because Lua iterators traverse a value's components until an end marker is reached.</p> <p><code>tuple_format:ipairs()</code> is the same as <code>pairs()</code>, because tuple_format fields are always integers.</p> <p>@see box.tuple.format.ipairs</p>"},{"location":"types/box.tuple.format/#formatipairs","title":"format.ipairs","text":"<pre><code>function format.ipairs() -&gt;  fun(tbl: any) -&gt; (integer,box.tuple.field_format)\n</code></pre> <p>@see box.tuple.format.pairs</p>"},{"location":"types/box.tuple/","title":"class tuple","text":"<ul> <li> <p>supers: table</p> </li> <li> <p>namespace: box</p> </li> </ul>"},{"location":"types/box.tuple/#methods","title":"methods","text":""},{"location":"types/box.tuple/#tuplebsize","title":"tuple.bsize","text":"<pre><code>function tuple.bsize() -&gt; bytes number\n</code></pre> <p>Number of bytes in the tuple.</p> <p>If <code>t</code> is a tuple instance, <code>t:bsize()</code> will return the number of bytes in the tuple.</p> <p>With both the memtx storage engine and the vinyl storage engine the default maximum is one megabyte (<code>memtx_max_tuple_size</code> or <code>vinyl_max_tuple_size</code>)</p> <p>Every field has one or more \"length\" bytes preceding the actual contents, so <code>bsize()</code> returns a value which is slightly greater than the sum of the lengths of the contents.</p> <p>The value does not include the size of \"struct tuple\" (for the current size of this structure look in the tuple.h file in Tarantool's source code).</p> <p>Example:</p> <p>In the following example, a tuple named <code>t</code> is created which has three fields, and for each field it takes one byte to store the length and three bytes to store the contents, and then there is one more byte to store a count of the number of fields, so <code>bsize()</code> returns <code>3*(1+3)+1</code>. This is the same as the size of the string that <code>msgpack.encode({'aaa','bbb','ccc'})</code> would return.</p> <pre><code> tarantool&gt; t = box.tuple.new{'aaa', 'bbb', 'ccc'}\n ---\n ...\n tarantool&gt; t:bsize()\n ---\n - 13\n ...\n</code></pre>"},{"location":"types/box.tuple/#tuplefind","title":"tuple.find","text":"<pre><code>function tuple.find(\n  field_number_or_search_value: number?,\n  search_value: any\n) -&gt;  number\n</code></pre> <p>Find index of a value in the tuple</p> <p>If <code>t</code> is a tuple instance, <code>t:find(search-value)</code> returns the number of the first field in <code>t</code> that matches the search value, and <code>t:findall(search-value [, search-value ...])</code> returns numbers of all fields in <code>t</code> that match the search value. Optionally one can put a numeric argument <code>field-number</code> before the search-value to indicate \"start searching at field number <code>field-number</code>\".</p> <p>Example:</p> <p>In the following example, a tuple named <code>t</code> is created and then: the number of the first field in <code>t</code> which matches 'a' is returned, then the numbers of all the fields in <code>t</code> which match 'a' are returned, then the numbers of all the fields in t which match 'a' and are at or after the second field are returned.</p> <pre><code> tarantool&gt; t = box.tuple.new{'a', 'b', 'c', 'a'}\n ---\n ...\n tarantool&gt; t:find('a')\n ---\n - 1\n ...\n tarantool&gt; t:findall('a')\n ---\n - 1\n - 4\n ...\n tarantool&gt; t:findall(2, 'a')\n ---\n - 4\n ...\n</code></pre>"},{"location":"types/box.tuple/#tuplefindall","title":"tuple.findall","text":"<pre><code>function tuple.findall(\n  field_number_or_search_value: number?,\n  search_value: any\n) -&gt;  number[]\n</code></pre> <p>Find all indices of a value in the tuple</p> <p>If <code>t</code> is a tuple instance, <code>t:find(search-value)</code> returns the number of the first field in <code>t</code> that matches the search value, and <code>t:findall(search-value [, search-value ...])</code> returns numbers of all fields in <code>t</code> that match the search value. Optionally one can put a numeric argument <code>field-number</code> before the search-value to indicate \"start searching at field number <code>field-number</code>\".</p> <p>Example:</p> <p>In the following example, a tuple named <code>t</code> is created and then: the number of the first field in <code>t</code> which matches 'a' is returned, then the numbers of all the fields in <code>t</code> which match 'a' are returned, then the numbers of all the fields in t which match 'a' and are at or after the second field are returned.</p> <pre><code> tarantool&gt; t = box.tuple.new{'a', 'b', 'c', 'a'}\n ---\n ...\n tarantool&gt; t:find('a')\n ---\n - 1\n ...\n tarantool&gt; t:findall('a')\n ---\n - 1\n - 4\n ...\n tarantool&gt; t:findall(2, 'a')\n ---\n - 4\n ...\n</code></pre>"},{"location":"types/box.tuple/#tuplenext","title":"tuple.next","text":"<pre><code>function tuple.next(pos: number?)\n -&gt; field_number number\n -&gt; value any\n\n</code></pre> <p>Lua <code>next()</code> function, but for a tuple object.</p> <p>When called without arguments, <code>tuple:next()</code> returns the first field from a tuple. Otherwise, it returns the field next to the indicated position.</p> <p>However <code>tuple:next()</code> is not really efficient, and it is better to use <code>tuple:pairs()/ipairs()</code>.</p> <p>Example:</p> <pre><code> tarantool&gt; tuple = box.tuple.new({5, 4, 3, 2, 0})\n ---\n ...\n\n tarantool&gt; tuple:next()\n ---\n - 1\n - 5\n ...\n\n tarantool&gt; tuple:next(1)\n ---\n - 2\n - 4\n ...\n\n tarantool&gt; ctx, field = tuple:next()\n ---\n ...\n\n tarantool&gt; while field do\n &gt; print(field)\n &gt; ctx, field = tuple:next(ctx)\n &gt; end\n 5\n 4\n 3\n 2\n 0\n ---\n ...\n</code></pre> <p>@see box.tuple.ipairs</p>"},{"location":"types/box.tuple/#tuplepairs","title":"tuple.pairs","text":"<pre><code>function tuple.pairs()\n -&gt; ctx fun()\n -&gt; tuple_value any\n -&gt;  nil\n\n</code></pre> <p>Get a tuple iterator</p> <p>In Lua, <code>lua-table-value:pairs()</code> is a method which returns: <code>function</code>, <code>lua-table-value</code>, <code>nil</code>.</p> <p>Tarantool has extended this so that <code>tuple-value:pairs()</code> returns: <code>function</code>, <code>tuple-value</code>, <code>nil</code>. It is useful for Lua iterators, because Lua iterators traverse a value's components until an end marker is reached.</p> <p><code>tuple_object:ipairs()</code> is the same as <code>pairs()</code>, because tuple fields are always integers.</p> <p>In the following example, a tuple named <code>t</code> is created and then all its fields are selected using a Lua for-end loop.</p> <pre><code> tarantool&gt; t = box.tuple.new{'Fld#1', 'Fld#2', 'Fld#3', 'Fld#4', 'Fld#5'}\n ---\n ...\n tarantool&gt; tmp = ''\n ---\n ...\n tarantool&gt; for k, v in t:pairs() do\n &gt;   tmp = tmp .. v\n &gt; end\n ---\n ...\n tarantool&gt; tmp\n ---\n - Fld#1Fld#2Fld#3Fld#4Fld#5\n ...\n</code></pre> <p>@see box.tuple.ipairs</p>"},{"location":"types/box.tuple/#tupleipairs","title":"tuple.ipairs","text":"<pre><code>function tuple.ipairs()\n -&gt; ctx fun()\n -&gt; tuple_value any\n -&gt;  nil\n\n</code></pre> <p>Get a tuple iterator</p> <p>In Lua, <code>lua-table-value:pairs()</code> is a method which returns: <code>function</code>, <code>lua-table-value</code>, <code>nil</code>.</p> <p>Tarantool has extended this so that <code>tuple-value:pairs()</code> returns: <code>function</code>, <code>tuple-value</code>, <code>nil</code>. It is useful for Lua iterators, because Lua iterators traverse a value's components until an end marker is reached.</p> <p><code>tuple_object:ipairs()</code> is the same as <code>pairs()</code>, because tuple fields are always integers.</p> <p>In the following example, a tuple named <code>t</code> is created and then all its fields are selected using a Lua for-end loop.</p> <pre><code> tarantool&gt; t = box.tuple.new{'Fld#1', 'Fld#2', 'Fld#3', 'Fld#4', 'Fld#5'}\n ---\n ...\n tarantool&gt; tmp = ''\n ---\n ...\n tarantool&gt; for k, v in t:pairs() do\n &gt;   tmp = tmp .. v\n &gt; end\n ---\n ...\n tarantool&gt; tmp\n ---\n - Fld#1Fld#2Fld#3Fld#4Fld#5\n ...\n</code></pre> <p>@see box.tuple.pairs</p>"},{"location":"types/box.tuple/#tupletotable","title":"tuple.totable","text":"<pre><code>function tuple.totable(\n  start_field_number: number?,\n  end_field_number: number?\n) -&gt;  any[]\n</code></pre> <p>If t is a tuple instance, <code>t:totable()</code> will return all fields, <code>t:totable(1)</code> will return all fields starting with field number 1, t:totable(1,5) will return all fields between field number 1 and field number 5. It is preferable to use t:totable() rather than t:unpack().</p>"},{"location":"types/box.tuple/#tupletomap","title":"tuple.tomap","text":"<pre><code>function tuple.tomap(options: { names_only: boolean }?) -&gt;  (T &amp; U)\n</code></pre> <p>The <code>tuple_object:totable()</code> function only returns a table containing the values. But the <code>tuple_object:tomap()</code> function returns a table containing not only the values, but also the key:value pairs.</p> <p>This only works if the tuple comes from a space that has been formatted with a format clause.</p>"},{"location":"types/box.tuple/#tupleupdate","title":"tuple.update","text":"<pre><code>function tuple.update(update_operations: (box.update_operation,(number|string),tuple_type)[]) -&gt;  box.tuple\n</code></pre> <p>Update a tuple.</p> <p>This function updates a tuple which is not in a space. Compare the function <code>box.space.&lt;space-name&gt;:update(&lt;key&gt;, {{&lt;format&gt;, &lt;field_no&gt;, &lt;value&gt;}}, ...})</code> which updates a tuple in a space.</p> <p>For details: see the description for <code>operator</code>, <code>field_no</code>, and <code>value</code> in the section :ref:<code>box.space.space-name:update{key, format, {field_number, value}...) &lt;box_space-update&gt;</code>.</p> <p>If the original tuple comes from a space that has been formatted with a format clause, the formatting will be preserved for the result tuple.</p> <p>In the following example, a tuple named <code>t</code> is created and then its second field is updated to equal 'B'.</p> <pre><code> tarantool&gt; t = box.tuple.new{'Fld#1', 'Fld#2', 'Fld#3', 'Fld#4', 'Fld#5'}\n ---\n ...\n tarantool&gt; t:update({{'=', 2, 'B'}})\n ---\n - ['Fld#1', 'B', 'Fld#3', 'Fld#4', 'Fld#5']\n ...\n</code></pre> <p>Since 2.3 a tuple can also be updated via JSON paths.</p>"},{"location":"types/box.tuple/#tupleinfo","title":"tuple.info","text":"<pre><code>function tuple.info() -&gt;  { arena: (\"memtx\"|\"malloc\"|\"runtime\"), data_size: number, field_map_size: number, header_size: number, waste_size: number }\n</code></pre> <p>Get information about the tuple memory usage.</p> <p>Note: <code>waste_size</code> is provided for reference only and can be inaccurate. Avoid using it for memory usage calculations.</p> <p>Example:</p> <pre><code> tarantool&gt; box.space.tester:get('222200000'):info()\n ---\n - data_size: 55\n waste_size: 95\n arena: memtx\n field_map_size: 4\n header_size: 6\n ...\n</code></pre>"},{"location":"types/box.tuple/#tupleformat","title":"tuple.format","text":"<pre><code>function tuple.format() -&gt;  box.tuple.field_format[]\n</code></pre> <p>@return  - the tuple format.</p> <p>Get the format of a tuple.</p> <p>The resulting table lists the fields of a tuple (their names and types) if the format option was specified during the tuple creation. Otherwise, empty table is returned.</p>"},{"location":"types/box.txn_isolation/","title":"alias txn_isolation","text":"<ul> <li>namespace: box</li> </ul> <pre><code>(alias) txn_isolation = (\"best-effort\"|\"read-committed\"|\"read-confirmed\"|\"linearizable\")\n    | \"best-effort\"\n    | \"read-committed\"\n    | \"read-confirmed\"\n    | \"linearizable\"\n\n</code></pre>"},{"location":"types/box.update_operation/","title":"alias update_operation","text":"<ul> <li>namespace: box</li> </ul> <pre><code>(alias) update_operation = (\"+\"|\"-\"|\"&amp;\"|\"|\"|\"^\"|\":\"|\"!\"|\"#\"|\"=\")\n    | \"+\" -- Addition. Values must be numeric, e.g. unsigned or decimal.\n    | \"-\" -- Subtraction. Values must be numeric.\n    | \"&amp;\" -- Bitwise AND. Values must be unsigned numeric.\n    | \"|\" -- Bitwise OR. Values must be unsigned numeric.\n    | \"^\" -- Bitwise XOR. Values must be unsigned numeric.\n    | \":\" -- String splice.\n    | \"!\" -- Insertion of a new field.\n    | \"#\" -- Deletion.\n    | \"=\" -- Assignment.\n\n</code></pre>"},{"location":"types/box.watcher/","title":"class watcher","text":"<ul> <li>namespace: box</li> </ul>"},{"location":"types/box.watcher/#methods","title":"methods","text":""},{"location":"types/box.watcher/#watcherunregister","title":"watcher.unregister","text":"<pre><code>function watcher.unregister()\n</code></pre> <p>Unregisters the watcher.</p>"},{"location":"types/buffer/","title":"class buffer","text":""},{"location":"types/buffer/#methods","title":"methods","text":""},{"location":"types/buffer/#bufferalloc","title":"buffer.alloc","text":"<pre><code>function buffer.alloc(size: integer) -&gt; wpos ffi.cdata*\n</code></pre> <p>@param <code>size</code> - memory in bytes to allocate</p> <p>Allocate size bytes for buffer_object.</p>"},{"location":"types/buffer/#buffercapacity","title":"buffer.capacity","text":"<pre><code>function buffer.capacity() -&gt;  integer\n</code></pre> <p>@return  - wpos - buf</p> <p>Return the capacity of the buffer_object.</p>"},{"location":"types/buffer/#bufferchecksize","title":"buffer.checksize","text":"<pre><code>function buffer.checksize(size: integer) -&gt; rpos ffi.cdata*\n</code></pre> <p>@param <code>size</code> - memory in bytes to check</p> <p>Check if size bytes are available for reading in buffer_object.</p>"},{"location":"types/buffer/#bufferpos","title":"buffer.pos","text":"<pre><code>function buffer.pos() -&gt;  integer\n</code></pre> <p>@return  - rpos - buf</p> <p>Return the size of the range occupied by data.</p>"},{"location":"types/buffer/#bufferread","title":"buffer.read","text":"<pre><code>function buffer.read(size: integer)\n</code></pre> <p>@param <code>size</code> - Read size bytes from buffer.</p> <p>Read from buffer.</p>"},{"location":"types/buffer/#bufferrecycle","title":"buffer.recycle","text":"<pre><code>function buffer.recycle()\n</code></pre> <p>Clear the memory slots allocated by buffer_object.</p>"},{"location":"types/buffer/#bufferreset","title":"buffer.reset","text":"<pre><code>function buffer.reset()\n</code></pre> <p>Clear the memory slots used by buffer_object.</p> <p>This method allows to keep the buffer but remove data from it. It is useful when you want to use the buffer further.</p>"},{"location":"types/buffer/#bufferreserve","title":"buffer.reserve","text":"<pre><code>function buffer.reserve(size: integer)\n</code></pre> <p>Reserve memory for buffer_object.</p> <p>Check if there is enough memory to write <code>size</code> bytes after <code>wpos</code>. If not, <code>epos</code> shifts until <code>size</code> bytes will be available.</p>"},{"location":"types/buffer/#buffersize","title":"buffer.size","text":"<pre><code>function buffer.size() -&gt;  integer\n</code></pre> <p>@return  - wpos - rpos</p> <p>Return a range, available for reading data.</p>"},{"location":"types/buffer/#bufferunused","title":"buffer.unused","text":"<pre><code>function buffer.unused() -&gt;  integer\n</code></pre> <p>@return  - epos - wpos</p> <p>Return a range for writing data.</p>"},{"location":"types/buffer/#fields","title":"fields","text":""},{"location":"types/buffer/#bufferbuf","title":"buffer.buf","text":"<pre><code>buffer.buf : ffi.cdata*\n</code></pre> <p>A pointer to the beginning of the buffer</p>"},{"location":"types/buffer/#bufferrpos","title":"buffer.rpos","text":"<pre><code>buffer.rpos : ffi.cdata*\n</code></pre> <p>A pointer to the beginning of the range; available for reading data (\"read position\")</p>"},{"location":"types/buffer/#bufferwpos","title":"buffer.wpos","text":"<pre><code>buffer.wpos : ffi.cdata*\n</code></pre> <p>A pointer to the end of the range; available for reading data, and to the beginning of the range for writing new data (\"write position\")</p>"},{"location":"types/buffer/#bufferepos","title":"buffer.epos","text":"<pre><code>buffer.epos : ffi.cdata*\n</code></pre> <p>A pointer to the end of the range; available for writing new data (\"end position\")</p>"},{"location":"types/compound/","title":"alias compound","text":"<pre><code>(alias) compound = (map|array)\n    | map -- Tarantool map\n    | array -- Tarantool arr\n\n</code></pre>"},{"location":"types/config.alert/","title":"class alert","text":"<ul> <li>namespace: config</li> </ul>"},{"location":"types/config.alert/#fields","title":"fields","text":""},{"location":"types/config.alert/#alerttype","title":"alert.type","text":"<pre><code>alert.type : (\"warn\"|\"error\")\n</code></pre>"},{"location":"types/config.alert/#alertmessage","title":"alert.message","text":"<pre><code>alert.message : string\n</code></pre>"},{"location":"types/config.info/","title":"class info","text":"<ul> <li>namespace: config</li> </ul>"},{"location":"types/config.info/#fields","title":"fields","text":""},{"location":"types/config.info/#infostatus","title":"info.status","text":"<pre><code>info.status : config.info.status\n</code></pre>"},{"location":"types/config.info/#infoalerts","title":"info.alerts","text":"<pre><code>info.alerts : config.alert[]\n</code></pre>"},{"location":"types/config.info/#infometa","title":"info.meta","text":"<pre><code>info.meta : config.info.meta {\n    etcd: { mod_revision: {...}, revision: integer }?,\n    storage: { mod_revision: {...}, revision: integer }?,\n}\n</code></pre>"},{"location":"types/config.info.meta/","title":"class meta","text":"<ul> <li>namespace: config.info</li> </ul>"},{"location":"types/config.info.meta/#fields","title":"fields","text":""},{"location":"types/config.info.meta/#metaetcd","title":"meta.etcd","text":"<pre><code>meta.etcd : { mod_revision: { [string]: number }, revision: integer }?\n</code></pre>"},{"location":"types/config.info.meta/#metastorage","title":"meta.storage","text":"<pre><code>meta.storage : { mod_revision: { [string]: number }, revision: integer }?\n</code></pre>"},{"location":"types/config.info.meta.v2/","title":"class v2","text":"<ul> <li>namespace: config.info.meta</li> </ul>"},{"location":"types/config.info.meta.v2/#fields","title":"fields","text":""},{"location":"types/config.info.meta.v2/#v2last","title":"v2.last","text":"<pre><code>v2.last : config.info.meta {\n    etcd: { mod_revision: {...}, revision: integer }?,\n    storage: { mod_revision: {...}, revision: integer }?,\n}\n</code></pre>"},{"location":"types/config.info.meta.v2/#v2active","title":"v2.active","text":"<pre><code>v2.active : config.info.meta {\n    etcd: { mod_revision: {...}, revision: integer }?,\n    storage: { mod_revision: {...}, revision: integer }?,\n}\n</code></pre>"},{"location":"types/config.info.status/","title":"alias status","text":"<ul> <li>namespace: config.info</li> </ul> <pre><code>(alias) status = (\"ready\"|\"check_warnings\"|\"check_errors\")\n    | \"ready\" -- the configuration is applied successfully\n    | \"check_warnings\" -- the configuration is applied with warnings\n    | \"check_errors\" -- the configuration cannot be applied due to configuration errors\n\n</code></pre>"},{"location":"types/config.info.v2/","title":"class v2","text":"<ul> <li> <p>supers: config.info</p> </li> <li> <p>namespace: config.info</p> </li> </ul>"},{"location":"types/config.info.v2/#fields","title":"fields","text":""},{"location":"types/config.info.v2/#v2meta","title":"v2.meta","text":"<pre><code>v2.meta : config.info.meta.v2 {\n    last: config.info.meta,\n    active: config.info.meta,\n}\n</code></pre>"},{"location":"types/csv.options/","title":"class options","text":"<ul> <li>namespace: csv</li> </ul>"},{"location":"types/csv.options/#fields","title":"fields","text":""},{"location":"types/csv.options/#optionsdelimiter","title":"options.delimiter","text":"<pre><code>options.delimiter : string\n</code></pre> <p>(default: comma) single-byte character to designate encloser of string</p>"},{"location":"types/csv.options/#optionsquote_char","title":"options.quote_char","text":"<pre><code>options.quote_char : string\n</code></pre> <p>(default: quote mark) single-byte character to designate encloser of string</p>"},{"location":"types/csv.options/#optionschunk_size","title":"options.chunk_size","text":"<pre><code>options.chunk_size : integer\n</code></pre> <p>(default: 4096) number of characters to read at once (usually for file-IO efficiency)</p>"},{"location":"types/csv.options/#optionsskip_head_lines","title":"options.skip_head_lines","text":"<pre><code>options.skip_head_lines : string\n</code></pre> <p>(default: 0) number of lines to skip at the start (usually for a header)</p>"},{"location":"types/datetime.interval.adjust/","title":"alias adjust","text":"<ul> <li>namespace: datetime.interval</li> </ul> <pre><code>(alias) adjust = (\"none\"|\"last\"|\"excess\")\n</code></pre>"},{"location":"types/datetime.interval/","title":"class interval","text":"<ul> <li> <p>supers: ffi.cdata*</p> </li> <li> <p>namespace: datetime</p> </li> </ul>"},{"location":"types/datetime.interval/#methods","title":"methods","text":""},{"location":"types/datetime.interval/#intervaltotable","title":"interval.totable","text":"<pre><code>function interval.totable() -&gt; interval_obj datetime.interval\n</code></pre> <p>Convert the information from an <code>interval</code> object into the table format.</p> <p>Example:</p> <pre><code> tarantool&gt; iv = datetime.interval.new{month = 1, adjust = 'last'}\n ---\n ...\n tarantool&gt; iv:totable()\n ---\n - adjust: last\n sec: 0\n nsec: 0\n day: 0\n week: 0\n hour: 0\n month: 1\n year: 0\n min: 0\n ...\n</code></pre>"},{"location":"types/datetime.interval/#fields","title":"fields","text":""},{"location":"types/datetime.interval/#intervalnsec","title":"interval.nsec","text":"<pre><code>interval.nsec : integer\n</code></pre> <p>(Default: 0) (usec, msec) Fractional part of the last second. You can specify either nanoseconds (nsec), or microseconds (usec), or milliseconds (msec). Specifying two of these units simultaneously or all three ones lead to an error</p>"},{"location":"types/datetime.interval/#intervalsec","title":"interval.sec","text":"<pre><code>interval.sec : integer\n</code></pre> <p>(Default: 0) Seconds</p>"},{"location":"types/datetime.interval/#intervalmin","title":"interval.min","text":"<pre><code>interval.min : integer\n</code></pre> <p>(Default: 0) Minutes</p>"},{"location":"types/datetime.interval/#intervalhour","title":"interval.hour","text":"<pre><code>interval.hour : integer\n</code></pre> <p>(Default: 0) Hours</p>"},{"location":"types/datetime.interval/#intervalday","title":"interval.day","text":"<pre><code>interval.day : integer\n</code></pre> <p>(Default: 0) Day number</p>"},{"location":"types/datetime.interval/#intervalweek","title":"interval.week","text":"<pre><code>interval.week : integer\n</code></pre> <p>(Default: 0) Week number</p>"},{"location":"types/datetime.interval/#intervalmonth","title":"interval.month","text":"<pre><code>interval.month : integer\n</code></pre> <p>(Default: 0) Month number</p>"},{"location":"types/datetime.interval/#intervalyear","title":"interval.year","text":"<pre><code>interval.year : integer\n</code></pre> <p>(Default: 0) Year</p>"},{"location":"types/datetime.interval/#intervaladjust","title":"interval.adjust","text":"<pre><code>interval.adjust : datetime.interval.adjust\n</code></pre> <p>(Default: 'none') Defines how to round days in a month after an arithmetic operation</p>"},{"location":"types/datetime.interval.units/","title":"alias units","text":"<ul> <li>namespace: datetime.interval</li> </ul> <pre><code>(alias) units = { adjust: datetime.interval.adjust?, day: integer?, hour: integer?, min: integer?, nsec: integer?, sec: integer?, year: integer? }\n</code></pre>"},{"location":"types/datetime/","title":"class datetime","text":"<ul> <li>supers: ffi.cdata*</li> </ul>"},{"location":"types/datetime/#methods","title":"methods","text":""},{"location":"types/datetime/#datetimeformat","title":"datetime.format","text":"<pre><code>function datetime.format(input_string: string?) -&gt;  string\n</code></pre> <p>@param <code>input_string</code> - (Default: '%FT%T.%f%z') String consisting of zero or more conversion specifications and ordinary characters</p> <p>Convert the standard <code>datetime</code> object presentation into a formatted string.</p> <p>The conversion specifications are the same as in the strftime.</p> <p>Additional specification for nanoseconds is <code>%f</code> which also allows a modifier to control the output precision of fractional part: <code>%5f</code> (see the example below).</p> <p>If no arguments are set for the method, the default conversions are used: <code>'%FT%T.%f%z'</code> (see the example below).</p> <p>Example:</p> <pre><code> tarantool&gt; dt = datetime.new {\n nsec = 123456789,\n\n sec = 20,\n min = 25,\n hour = 18,\n\n day = 20,\n month = 8,\n year = 2021,\n\n tzoffset  = 180\n }\n ---\n ...\n\n tarantool&gt; dt:format('%d.%m.%y %H:%M:%S.%5f')\n ---\n - 20.08.21 18:25:20.12345\n ...\n\n tarantool&gt; dt:format()\n ---\n - 2021-08-20T18:25:20.123456789+0300\n ...\n\n tarantool&gt; dt:format('%FT%T.%f%z')\n ---\n - 2021-08-20T18:25:20.123456789+0300\n ...\n</code></pre>"},{"location":"types/datetime/#datetimetotable","title":"datetime.totable","text":"<pre><code>function datetime.totable() -&gt;  datetime\n</code></pre> <p>Convert the information from a <code>datetime</code> object into the table format.</p> <p>Example:</p> <pre><code> tarantool&gt; dt = datetime.new {\n   sec = 20,\n   min = 25,\n   hour = 18,\n\n   day = 20,\n   month = 8,\n   year = 2021,\n   tz = 'MAGT',\n   }\n ---\n ...\n\n tarantool&gt; dt:totable()\n ---\n - tz: 'MAGT'\n   sec: 20\n   min: 25\n   yday: 232\n   day: 20\n   nsec: 0\n   isdst: false\n   wday: 6\n   tzoffset: 600\n   month: 8\n   year: 2021\n   hour: 18\n ...\n</code></pre>"},{"location":"types/datetime/#datetimeset","title":"datetime.set","text":"<pre><code>function datetime.set(units: datetime.units) -&gt;  datetime\n</code></pre> <p>Update the field values in the existing <code>datetime</code> object.</p> <p>Example:</p> <pre><code> tarantool&gt; dt = datetime.new {\n   nsec = 123456789,\n\n   sec = 20,\n   min = 25,\n   hour = 18,\n\n   day = 20,\n   month = 8,\n   year = 2021,\n\n   tzoffset  = 180\n }\n\n tarantool&gt; dt:set {msec = 567}\n ---\n - 2021-08-20T18:25:20.567+0300\n ...\n\n tarantool&gt; dt:set {tzoffset = 60}\n ---\n - 2021-08-20T18:25:20.567+0100\n ...\n</code></pre>"},{"location":"types/datetime/#datetimeadd","title":"datetime.add","text":"<pre><code>function datetime.add(input: (datetime.interval.units|datetime.interval)) -&gt;  datetime\n</code></pre> <p>Modify an existing datetime object by adding values of the input argument.</p> <p>See also: <code>interval_arithm</code>. The addition is performed taking <code>tzdata</code> into account, when <code>tzoffset</code> or <code>tz</code> fields are set, see the <code>timezone</code>.</p> <p>Example #1:</p> <pre><code> tarantool&gt; dt = datetime.new {\n day = 26,\n month = 8,\n year = 2021,\n tzoffset  = 180\n }\n ---\n ...\n\n tarantool&gt; iv = datetime.interval.new {day = 7}\n ---\n ...\n\n tarantool&gt; dt, iv\n ---\n - 2021-08-26T00:00:00+0300\n - +7 days\n ...\n\n tarantool&gt; dt:add(iv)\n ---\n - 2021-09-02T00:00:00+0300\n ...\n\n tarantool&gt; dt:add{ day = 7 }\n ---\n - 2021-09-09T00:00:00+0300\n ...\n</code></pre> <p>Example #2:</p> <pre><code> tarantool&gt; dt = datetime.new {\n day = 29,\n month = 2,\n year = 2020\n }\n ---\n ...\n\n tarantool&gt; dt:add{month = 1, adjust = 'none'}\n ---\n - 2020-03-29T00:00:00Z\n ...\n\n tarantool&gt; dt = datetime.new {\n day = 29,\n month = 2,\n year = 2020\n }\n ---\n ...\n\n tarantool&gt; dt:add{month = 1, adjust = 'last'}\n ---\n - 2020-03-31T00:00:00Z\n ...\n\n tarantool&gt; dt = datetime.new {\n day = 31,\n month = 1,\n year = 2020\n }\n ---\n ...\n\n tarantool&gt; dt:add{month = 1, adjust = 'excess'}\n ---\n - 2020-03-02T00:00:00Z\n ...\n</code></pre>"},{"location":"types/datetime/#datetimesub","title":"datetime.sub","text":"<pre><code>function datetime.sub(input: (datetime.interval.units|datetime.interval)) -&gt;  datetime\n</code></pre> <p>Modify an existing datetime object by subtracting values of the input argument.</p> <p>See also: <code>interval_arithm</code>. The subtraction is performed taking <code>tzdata</code> into account, when <code>tzoffset</code> or <code>tz</code> fields are set, see the <code>timezone</code>.</p> <p>Example:</p> <pre><code> tarantool&gt; dt = datetime.new {\n day = 26,\n month = 8,\n year = 2021,\n tzoffset  = 180\n }\n ---\n ...\n\n tarantool&gt; iv = datetime.interval.new {day = 5}\n ---\n ...\n\n tarantool&gt; dt, iv\n ---\n - 2021-08-26T00:00:00+0300\n - +5 days\n ...\n\n tarantool&gt; dt:sub(iv)\n ---\n - 2021-08-21T00:00:00+0300\n ...\n\n tarantool&gt; dt:sub{ day = 1 }\n ---\n - 2021-08-20T00:00:00+0300\n ...\n</code></pre>"},{"location":"types/datetime/#fields","title":"fields","text":""},{"location":"types/datetime/#datetimensec","title":"datetime.nsec","text":"<pre><code>datetime.nsec : integer\n</code></pre> <p>(Default: 0) (usec, msec) Fractional part of the last second. You can specify either nanoseconds (nsec), or microseconds (usec), or milliseconds (msec). Specifying two of these units simultaneously or all three ones lead to an error</p>"},{"location":"types/datetime/#datetimesec","title":"datetime.sec","text":"<pre><code>datetime.sec : integer\n</code></pre> <p>(Default: 0) Seconds. Value range: 0 - 60</p>"},{"location":"types/datetime/#datetimemin","title":"datetime.min","text":"<pre><code>datetime.min : integer\n</code></pre> <p>(Default: 0) Minutes. Value range: 0 - 59</p>"},{"location":"types/datetime/#datetimehour","title":"datetime.hour","text":"<pre><code>datetime.hour : integer\n</code></pre> <p>(Default: 0) Hours. Value range: 0 - 23</p>"},{"location":"types/datetime/#datetimeday","title":"datetime.day","text":"<pre><code>datetime.day : integer\n</code></pre> <p>(Default: 1) Day number. Value range: 1 - 31. The special value -1 generates the last day of a particular month (see example below)</p>"},{"location":"types/datetime/#datetimemonth","title":"datetime.month","text":"<pre><code>datetime.month : integer\n</code></pre> <p>(Default: 1) Month number. Value range: 1 - 12</p>"},{"location":"types/datetime/#datetimeyear","title":"datetime.year","text":"<pre><code>datetime.year : integer\n</code></pre> <p>(Default: 1970) Year.</p>"},{"location":"types/datetime/#datetimetimestamp","title":"datetime.timestamp","text":"<pre><code>datetime.timestamp : number\n</code></pre> <p>(Default: 0) Timestamp, in seconds. Similar to the Unix timestamp, but can have a fractional part which is converted in nanoseconds in the resulting datetime object. If the fractional part for the last second is set via the nsec, usec, or msec units, the timestamp value should be integer otherwise an error occurs. Timestamp is not allowed if you already set time and/or date via specific units, namely, sec, min, hour, day, month, and year</p>"},{"location":"types/datetime/#datetimetzoffset","title":"datetime.tzoffset","text":"<pre><code>datetime.tzoffset : integer\n</code></pre> <p>(Default: 0) Time zone offset from UTC, in minutes. If both tzoffset and tz are specified, tz has the preference and the tzoffset value is ignored</p>"},{"location":"types/datetime/#datetimetz","title":"datetime.tz","text":"<pre><code>datetime.tz : string\n</code></pre> <p>Time zone name according to the tz database</p>"},{"location":"types/datetime/#datetimewday","title":"datetime.wday","text":"<pre><code>datetime.wday : integer\n</code></pre> <p>Days since the beginning of the week</p>"},{"location":"types/datetime/#datetimeyday","title":"datetime.yday","text":"<pre><code>datetime.yday : integer\n</code></pre> <p>Days since the beginning of the year</p>"},{"location":"types/datetime/#datetimeisdst","title":"datetime.isdst","text":"<pre><code>datetime.isdst : boolean\n</code></pre> <p>Is the DST (Daylight saving time) applicable for the date.</p>"},{"location":"types/datetime.units/","title":"alias units","text":"<ul> <li>namespace: datetime</li> </ul> <pre><code>(alias) units = { day: integer?, hour: integer?, min: integer?, nsec: integer?, sec: integer?, timestamp: number?, tz: string?, tzoffset: integer?, year: integer? }\n</code></pre>"},{"location":"types/decimal/","title":"class decimal","text":""},{"location":"types/decimal_like/","title":"alias decimal_like","text":"<pre><code>(alias) decimal_like = (decimal|string|number)\n</code></pre>"},{"location":"types/errno/","title":"class errno","text":"<ul> <li>supers: table</li> </ul> <p>Builtin <code>errno</code> module.</p> <p>The errno module is typically used within a function or within a Lua program, in association with a module whose functions can return operating-system errors, such as fio.</p>"},{"location":"types/errno/#methods","title":"methods","text":""},{"location":"types/errno/#errnostrerror","title":"errno.strerror","text":"<pre><code>function errno.strerror(code: integer?) -&gt;  string\n</code></pre> <p>Return a string, given an error number.</p>"},{"location":"types/errno/#fields","title":"fields","text":""},{"location":"types/errno/#errnoe2big","title":"errno.E2BIG","text":"<pre><code>errno.E2BIG : integer\n</code></pre> <p>Argument list too long (POSIX.1-2001).</p>"},{"location":"types/errno/#errnoeacces","title":"errno.EACCES","text":"<pre><code>errno.EACCES : integer\n</code></pre> <p>Permission denied (POSIX.1-2001).</p>"},{"location":"types/errno/#errnoeaddrinuse","title":"errno.EADDRINUSE","text":"<pre><code>errno.EADDRINUSE : integer\n</code></pre> <p>Address already in use (POSIX.1-2001).</p>"},{"location":"types/errno/#errnoeaddrnotavail","title":"errno.EADDRNOTAVAIL","text":"<pre><code>errno.EADDRNOTAVAIL : integer\n</code></pre> <p>Address not available (POSIX.1-2001).</p>"},{"location":"types/errno/#errnoeafnosupport","title":"errno.EAFNOSUPPORT","text":"<pre><code>errno.EAFNOSUPPORT : integer\n</code></pre> <p>Address family not supported (POSIX.1-2001).</p>"},{"location":"types/errno/#errnoeagain","title":"errno.EAGAIN","text":"<pre><code>errno.EAGAIN : integer\n</code></pre> <p>Resource temporarily unavailable (may be the same value as EWOULDBLOCK) (POSIX.1-2001).</p>"},{"location":"types/errno/#errnoealready","title":"errno.EALREADY","text":"<pre><code>errno.EALREADY : integer\n</code></pre> <p>Connection already in progress (POSIX.1-2001).</p>"},{"location":"types/errno/#errnoebadf","title":"errno.EBADF","text":"<pre><code>errno.EBADF : integer\n</code></pre> <p>Bad file descriptor (POSIX.1-2001).</p>"},{"location":"types/errno/#errnoebadmsg","title":"errno.EBADMSG","text":"<pre><code>errno.EBADMSG : integer\n</code></pre> <p>Bad message (POSIX.1-2001).</p>"},{"location":"types/errno/#errnoebusy","title":"errno.EBUSY","text":"<pre><code>errno.EBUSY : integer\n</code></pre> <p>Device or resource busy (POSIX.1-2001).</p>"},{"location":"types/errno/#errnoecanceled","title":"errno.ECANCELED","text":"<pre><code>errno.ECANCELED : integer\n</code></pre> <p>Operation canceled (POSIX.1-2001).</p>"},{"location":"types/errno/#errnoechild","title":"errno.ECHILD","text":"<pre><code>errno.ECHILD : integer\n</code></pre> <p>No child processes (POSIX.1-2001).</p>"},{"location":"types/errno/#errnoeconnaborted","title":"errno.ECONNABORTED","text":"<pre><code>errno.ECONNABORTED : integer\n</code></pre> <p>Connection aborted (POSIX.1-2001).</p>"},{"location":"types/errno/#errnoeconnrefused","title":"errno.ECONNREFUSED","text":"<pre><code>errno.ECONNREFUSED : integer\n</code></pre> <p>Connection refused (POSIX.1-2001).</p>"},{"location":"types/errno/#errnoeconnreset","title":"errno.ECONNRESET","text":"<pre><code>errno.ECONNRESET : integer\n</code></pre> <p>Connection reset (POSIX.1-2001).</p>"},{"location":"types/errno/#errnoedeadlk","title":"errno.EDEADLK","text":"<pre><code>errno.EDEADLK : integer\n</code></pre> <p>Resource deadlock avoided (POSIX.1-2001).</p>"},{"location":"types/errno/#errnoedestaddrreq","title":"errno.EDESTADDRREQ","text":"<pre><code>errno.EDESTADDRREQ : integer\n</code></pre> <p>Destination address required (POSIX.1-2001).</p>"},{"location":"types/errno/#errnoedom","title":"errno.EDOM","text":"<pre><code>errno.EDOM : integer\n</code></pre> <p>Mathematics argument out of domain of function (POSIX.1, C99).</p>"},{"location":"types/errno/#errnoedquot","title":"errno.EDQUOT","text":"<pre><code>errno.EDQUOT : integer\n</code></pre> <p>Disk quota exceeded (POSIX.1-2001).</p>"},{"location":"types/errno/#errnoeexist","title":"errno.EEXIST","text":"<pre><code>errno.EEXIST : integer\n</code></pre> <p>File exists (POSIX.1-2001).</p>"},{"location":"types/errno/#errnoefault","title":"errno.EFAULT","text":"<pre><code>errno.EFAULT : integer\n</code></pre> <p>Bad address (POSIX.1-2001).</p>"},{"location":"types/errno/#errnoefbig","title":"errno.EFBIG","text":"<pre><code>errno.EFBIG : integer\n</code></pre> <p>File too large (POSIX.1-2001).</p>"},{"location":"types/errno/#errnoehostunreach","title":"errno.EHOSTUNREACH","text":"<pre><code>errno.EHOSTUNREACH : integer\n</code></pre> <p>Host is unreachable (POSIX.1-2001).</p>"},{"location":"types/errno/#errnoeidrm","title":"errno.EIDRM","text":"<pre><code>errno.EIDRM : integer\n</code></pre> <p>Identifier removed (POSIX.1-2001).</p>"},{"location":"types/errno/#errnoeilseq","title":"errno.EILSEQ","text":"<pre><code>errno.EILSEQ : integer\n</code></pre> <p>Invalid or incomplete multibyte or wide character (POSIX.1, C99).</p>"},{"location":"types/errno/#errnoeinprogress","title":"errno.EINPROGRESS","text":"<pre><code>errno.EINPROGRESS : integer\n</code></pre> <p>Operation in progress (POSIX.1-2001).</p>"},{"location":"types/errno/#errnoeintr","title":"errno.EINTR","text":"<pre><code>errno.EINTR : integer\n</code></pre> <p>Interrupted function call (POSIX.1-2001); see signal(7).</p>"},{"location":"types/errno/#errnoeinval","title":"errno.EINVAL","text":"<pre><code>errno.EINVAL : integer\n</code></pre> <p>Invalid argument (POSIX.1-2001).</p>"},{"location":"types/errno/#errnoeio","title":"errno.EIO","text":"<pre><code>errno.EIO : integer\n</code></pre> <p>Input/output error (POSIX.1-2001).</p>"},{"location":"types/errno/#errnoeisconn","title":"errno.EISCONN","text":"<pre><code>errno.EISCONN : integer\n</code></pre> <p>Socket is connected (POSIX.1-2001).</p>"},{"location":"types/errno/#errnoeisdir","title":"errno.EISDIR","text":"<pre><code>errno.EISDIR : integer\n</code></pre> <p>Is a directory (POSIX.1-2001).</p>"},{"location":"types/errno/#errnoeloop","title":"errno.ELOOP","text":"<pre><code>errno.ELOOP : integer\n</code></pre> <p>Too many levels of symbolic links (POSIX.1-2001).</p>"},{"location":"types/errno/#errnoemfile","title":"errno.EMFILE","text":"<pre><code>errno.EMFILE : integer\n</code></pre> <p>Too many open files (POSIX.1-2001).  Commonly caused by exceeding the RLIMIT_NOFILE resource limit described in getrlimit(2).  Can also be caused by exceeding the limit specified in /proc/sys/fs/nr_open.</p>"},{"location":"types/errno/#errnoemlink","title":"errno.EMLINK","text":"<pre><code>errno.EMLINK : integer\n</code></pre> <p>Too many links (POSIX.1-2001).</p>"},{"location":"types/errno/#errnoemsgsize","title":"errno.EMSGSIZE","text":"<pre><code>errno.EMSGSIZE : integer\n</code></pre> <p>Message too long (POSIX.1-2001).</p>"},{"location":"types/errno/#errnoemultihop","title":"errno.EMULTIHOP","text":"<pre><code>errno.EMULTIHOP : integer\n</code></pre> <p>Multihop attempted (POSIX.1-2001).</p>"},{"location":"types/errno/#errnoenametoolong","title":"errno.ENAMETOOLONG","text":"<pre><code>errno.ENAMETOOLONG : integer\n</code></pre> <p>Filename too long (POSIX.1-2001).</p>"},{"location":"types/errno/#errnoenetdown","title":"errno.ENETDOWN","text":"<pre><code>errno.ENETDOWN : integer\n</code></pre> <p>Network is down (POSIX.1-2001).</p>"},{"location":"types/errno/#errnoenetreset","title":"errno.ENETRESET","text":"<pre><code>errno.ENETRESET : integer\n</code></pre> <p>Connection aborted by network (POSIX.1-2001).</p>"},{"location":"types/errno/#errnoenetunreach","title":"errno.ENETUNREACH","text":"<pre><code>errno.ENETUNREACH : integer\n</code></pre> <p>Network unreachable (POSIX.1-2001).</p>"},{"location":"types/errno/#errnoenfile","title":"errno.ENFILE","text":"<pre><code>errno.ENFILE : integer\n</code></pre> <p>Too many open files in system (POSIX.1-2001).  On Linux, this is probably a result of encountering the /proc/sys/fs/file-max limit (see proc(5)).</p>"},{"location":"types/errno/#errnoenobufs","title":"errno.ENOBUFS","text":"<pre><code>errno.ENOBUFS : integer\n</code></pre> <p>No buffer space available (POSIX.1 (XSI STREAMS option)).</p>"},{"location":"types/errno/#errnoenodata","title":"errno.ENODATA","text":"<pre><code>errno.ENODATA : integer\n</code></pre> <p>The named attribute does not exist, or the process has no access to this attribute; see xattr(7).</p>"},{"location":"types/errno/#errnoenodev","title":"errno.ENODEV","text":"<pre><code>errno.ENODEV : integer\n</code></pre> <p>No such device (POSIX.1-2001).</p>"},{"location":"types/errno/#errnoenoent","title":"errno.ENOENT","text":"<pre><code>errno.ENOENT : integer\n</code></pre> <p>No such file or directory (POSIX.1-2001).</p>"},{"location":"types/errno/#errnoenoexec","title":"errno.ENOEXEC","text":"<pre><code>errno.ENOEXEC : integer\n</code></pre> <p>Exec format error (POSIX.1-2001).</p>"},{"location":"types/errno/#errnoenolck","title":"errno.ENOLCK","text":"<pre><code>errno.ENOLCK : integer\n</code></pre> <p>No locks available (POSIX.1-2001).</p>"},{"location":"types/errno/#errnoenolink","title":"errno.ENOLINK","text":"<pre><code>errno.ENOLINK : integer\n</code></pre> <p>Link has been severed (POSIX.1-2001).</p>"},{"location":"types/errno/#errnoenomem","title":"errno.ENOMEM","text":"<pre><code>errno.ENOMEM : integer\n</code></pre> <p>Not enough space/cannot allocate memory (POSIX.1-2001).</p>"},{"location":"types/errno/#errnoenomsg","title":"errno.ENOMSG","text":"<pre><code>errno.ENOMSG : integer\n</code></pre> <p>No message of the desired type (POSIX.1-2001).</p>"},{"location":"types/errno/#errnoenoprotoopt","title":"errno.ENOPROTOOPT","text":"<pre><code>errno.ENOPROTOOPT : integer\n</code></pre> <p>Protocol not available (POSIX.1-2001).</p>"},{"location":"types/errno/#errnoenospc","title":"errno.ENOSPC","text":"<pre><code>errno.ENOSPC : integer\n</code></pre> <p>No space left on device (POSIX.1-2001).</p>"},{"location":"types/errno/#errnoenosr","title":"errno.ENOSR","text":"<pre><code>errno.ENOSR : integer\n</code></pre> <p>No STREAM resources (POSIX.1 (XSI STREAMS option)).</p>"},{"location":"types/errno/#errnoenostr","title":"errno.ENOSTR","text":"<pre><code>errno.ENOSTR : integer\n</code></pre> <p>Not a STREAM (POSIX.1 (XSI STREAMS option)).</p>"},{"location":"types/errno/#errnoenosys","title":"errno.ENOSYS","text":"<pre><code>errno.ENOSYS : integer\n</code></pre> <p>Function not implemented (POSIX.1-2001).</p>"},{"location":"types/errno/#errnoenotconn","title":"errno.ENOTCONN","text":"<pre><code>errno.ENOTCONN : integer\n</code></pre> <p>The socket is not connected (POSIX.1-2001).</p>"},{"location":"types/errno/#errnoenotdir","title":"errno.ENOTDIR","text":"<pre><code>errno.ENOTDIR : integer\n</code></pre> <p>Not a directory (POSIX.1-2001).</p>"},{"location":"types/errno/#errnoenotempty","title":"errno.ENOTEMPTY","text":"<pre><code>errno.ENOTEMPTY : integer\n</code></pre> <p>Directory not empty (POSIX.1-2001).</p>"},{"location":"types/errno/#errnoenotsock","title":"errno.ENOTSOCK","text":"<pre><code>errno.ENOTSOCK : integer\n</code></pre> <p>Not a socket (POSIX.1-2001).</p>"},{"location":"types/errno/#errnoenotsup","title":"errno.ENOTSUP","text":"<pre><code>errno.ENOTSUP : integer\n</code></pre> <p>Operation not supported (POSIX.1-2001).</p>"},{"location":"types/errno/#errnoenotty","title":"errno.ENOTTY","text":"<pre><code>errno.ENOTTY : integer\n</code></pre> <p>Inappropriate I/O control operation (POSIX.1-2001).</p>"},{"location":"types/errno/#errnoenxio","title":"errno.ENXIO","text":"<pre><code>errno.ENXIO : integer\n</code></pre> <p>No such device or address (POSIX.1-2001).</p>"},{"location":"types/errno/#errnoeopnotsupp","title":"errno.EOPNOTSUPP","text":"<pre><code>errno.EOPNOTSUPP : integer\n</code></pre> <p>Operation not supported on socket (POSIX.1-2001).</p>"},{"location":"types/errno/#errnoeoverflow","title":"errno.EOVERFLOW","text":"<pre><code>errno.EOVERFLOW : integer\n</code></pre> <p>Value too large to be stored in data type (POSIX.1-2001).</p>"},{"location":"types/errno/#errnoeperm","title":"errno.EPERM","text":"<pre><code>errno.EPERM : integer\n</code></pre> <p>Operation not permitted (POSIX.1-2001).</p>"},{"location":"types/errno/#errnoepipe","title":"errno.EPIPE","text":"<pre><code>errno.EPIPE : integer\n</code></pre> <p>Broken pipe (POSIX.1-2001).</p>"},{"location":"types/errno/#errnoeproto","title":"errno.EPROTO","text":"<pre><code>errno.EPROTO : integer\n</code></pre> <p>Protocol error (POSIX.1-2001).</p>"},{"location":"types/errno/#errnoeprotonosupport","title":"errno.EPROTONOSUPPORT","text":"<pre><code>errno.EPROTONOSUPPORT : integer\n</code></pre> <p>Protocol not supported (POSIX.1-2001).</p>"},{"location":"types/errno/#errnoeprototype","title":"errno.EPROTOTYPE","text":"<pre><code>errno.EPROTOTYPE : integer\n</code></pre> <p>Protocol wrong type for socket (POSIX.1-2001).</p>"},{"location":"types/errno/#errnoerange","title":"errno.ERANGE","text":"<pre><code>errno.ERANGE : integer\n</code></pre> <p>Result too large (POSIX.1, C99).</p>"},{"location":"types/errno/#errnoerofs","title":"errno.EROFS","text":"<pre><code>errno.EROFS : integer\n</code></pre> <p>Read-only filesystem (POSIX.1-2001).</p>"},{"location":"types/errno/#errnoespipe","title":"errno.ESPIPE","text":"<pre><code>errno.ESPIPE : integer\n</code></pre> <p>Invalid seek (POSIX.1-2001).</p>"},{"location":"types/errno/#errnoesrch","title":"errno.ESRCH","text":"<pre><code>errno.ESRCH : integer\n</code></pre> <p>No such process (POSIX.1-2001).</p>"},{"location":"types/errno/#errnoestale","title":"errno.ESTALE","text":"<pre><code>errno.ESTALE : integer\n</code></pre> <p>Stale file handle (POSIX.1-2001).</p>"},{"location":"types/errno/#errnoetime","title":"errno.ETIME","text":"<pre><code>errno.ETIME : integer\n</code></pre> <p>Timer expired (POSIX.1 (XSI STREAMS option)).</p>"},{"location":"types/errno/#errnoetimedout","title":"errno.ETIMEDOUT","text":"<pre><code>errno.ETIMEDOUT : integer\n</code></pre> <p>Connection timed out (POSIX.1-2001).</p>"},{"location":"types/errno/#errnoetxtbsy","title":"errno.ETXTBSY","text":"<pre><code>errno.ETXTBSY : integer\n</code></pre> <p>Text file busy (POSIX.1-2001).</p>"},{"location":"types/errno/#errnoewouldblock","title":"errno.EWOULDBLOCK","text":"<pre><code>errno.EWOULDBLOCK : integer\n</code></pre> <p>Operation would block (may be same value as EAGAIN) (POSIX.1-2001).</p>"},{"location":"types/errno/#errnoexdev","title":"errno.EXDEV","text":"<pre><code>errno.EXDEV : integer\n</code></pre> <p>Improper link (POSIX.1-2001).</p>"},{"location":"types/fiber.channel/","title":"class channel","text":"<ul> <li>namespace: fiber</li> </ul>"},{"location":"types/fiber.channel/#methods","title":"methods","text":""},{"location":"types/fiber.channel/#channelput","title":"channel.put","text":"<pre><code>async function channel.put(\n  message: any,\n  timeout: number?\n) -&gt; success boolean\n</code></pre> <p>@return <code>success</code> - If timeout is specified, and there is no free slot in the channel for the duration of the timeout, then the return value is false. If the channel is closed, then the return value is false. Otherwise, the return value is true, indicating success.</p> <p>Send a message using a channel.</p> <p>If the channel is full, <code>channel:put()</code> waits until there is a free slot in the channel.</p> <p>Note:</p> <p>The default <code>channel capacity</code> is <code>0</code>.</p> <p>With this default value, <code>channel:put()</code> waits infinitely until <code>channel:get()</code> is called.</p>"},{"location":"types/fiber.channel/#channelclose","title":"channel.close","text":"<pre><code>function channel.close()\n</code></pre> <p>Close the channel.</p> <p>All waiters in the channel will stop waiting.</p> <p>All following <code>channel:get()</code> operations will return <code>nil</code>, and all following <code>channel:put()</code> operations will return <code>false</code>.</p>"},{"location":"types/fiber.channel/#channelget","title":"channel.get","text":"<pre><code>async function channel.get(timeout: number?) -&gt; message any\n</code></pre> <p>@param <code>timeout</code> - maximum number of seconds to wait for a message. Default: infinity.</p> <p>Fetch and remove a message from a channel.</p> <p>If the channel is empty, <code>channel:get()</code> waits for a message.</p>"},{"location":"types/fiber.channel/#channelis_empty","title":"channel.is_empty","text":"<pre><code>function channel.is_empty() -&gt;  boolean\n</code></pre> <p>@return  - is_empty</p> <p>Check whether the channel is empty (has no messages).</p>"},{"location":"types/fiber.channel/#channelcount","title":"channel.count","text":"<pre><code>function channel.count() -&gt;  integer\n</code></pre> <p>Find out how many messages are in the channel.</p>"},{"location":"types/fiber.channel/#channelsize","title":"channel.size","text":"<pre><code>function channel.size() -&gt;  integer\n</code></pre> <p>Returns size of channel.</p>"},{"location":"types/fiber.channel/#channelis_full","title":"channel.is_full","text":"<pre><code>function channel.is_full() -&gt;  boolean\n</code></pre> <p>@return  - is_full</p> <p>Check if a channel is full.</p>"},{"location":"types/fiber.channel/#channelhas_readers","title":"channel.has_readers","text":"<pre><code>function channel.has_readers() -&gt;  boolean\n</code></pre> <p>Check whether readers are waiting for a message because they have issued <code>channel:get()</code> and the channel is empty.</p>"},{"location":"types/fiber.channel/#channelhas_writers","title":"channel.has_writers","text":"<pre><code>function channel.has_writers() -&gt;  boolean\n</code></pre> <p>Check whether writers are waiting because they have issued <code>channel:put()</code> and the channel is full.</p>"},{"location":"types/fiber.channel/#channelis_closed","title":"channel.is_closed","text":"<pre><code>function channel.is_closed() -&gt;  boolean\n</code></pre> <p>Check if a channel is closed.</p>"},{"location":"types/fiber.cond/","title":"class cond","text":"<ul> <li> <p>supers: userdata</p> </li> <li> <p>namespace: fiber</p> </li> </ul>"},{"location":"types/fiber.cond/#methods","title":"methods","text":""},{"location":"types/fiber.cond/#condwait","title":"cond.wait","text":"<pre><code>async function cond.wait(timeout: number?) -&gt; was_signalled boolean\n</code></pre> <p>@param <code>timeout</code> - number of seconds to wait, default = forever.</p> <p>@return <code>was_signalled</code> - If timeout is provided, and a signal doesn't happen for the duration of the timeout, wait() returns false. If a signal or broadcast happens, wait() returns true.</p> <p>Make the current fiber go to sleep.</p> <p>Waiting until another fiber invokes the <code>signal()</code> or <code>broadcast()</code> method on the cond object.</p> <p>The sleep causes an implicit <code>fiber.yield()</code>.</p>"},{"location":"types/fiber.cond/#condsignal","title":"cond.signal","text":"<pre><code>function cond.signal()\n</code></pre> <p>Wake up a single fiber that has executed <code>wait()</code> for the same variable.</p> <p>Does not yield.</p>"},{"location":"types/fiber.cond/#condbroadcast","title":"cond.broadcast","text":"<pre><code>function cond.broadcast()\n</code></pre> <p>Wake up all fibers that have executed <code>wait()</code> for the same variable.</p> <p>Does not yield.</p>"},{"location":"types/fiber.info/","title":"class info","text":"<ul> <li>namespace: fiber</li> </ul>"},{"location":"types/fiber.info/#fields","title":"fields","text":""},{"location":"types/fiber.info/#infocsw","title":"info.csw","text":"<pre><code>info.csw : number\n</code></pre> <p>number of context switches.</p>"},{"location":"types/fiber.info/#infomemory","title":"info.memory","text":"<pre><code>info.memory : { total: number, used: number }\n</code></pre> <p><code>total</code> is memory occupied by the fiber as a C structure, its stack, etc. <code>actual</code> is memory used by the fiber.</p>"},{"location":"types/fiber.info/#infotime","title":"info.time","text":"<pre><code>info.time : number\n</code></pre> <p>duplicates the \u201ctime\" entry from fiber.top().cpu for each fiber. (Only shown if fiber.top is enabled.)</p>"},{"location":"types/fiber.info/#infoname","title":"info.name","text":"<pre><code>info.name : string\n</code></pre> <p>name of the fiber</p>"},{"location":"types/fiber.info/#infofid","title":"info.fid","text":"<pre><code>info.fid : number\n</code></pre> <p>id of the fiber</p>"},{"location":"types/fiber.info/#infobacktrace","title":"info.backtrace","text":"<pre><code>info.backtrace : { C: string, L: string }[]\n</code></pre> <p>fiber's stack trace</p>"},{"location":"types/fiber/","title":"class fiber","text":"<ul> <li>supers: userdata</li> </ul>"},{"location":"types/fiber/#methods","title":"methods","text":""},{"location":"types/fiber/#fiberid","title":"fiber.id","text":"<pre><code>function fiber.id() -&gt;  number\n</code></pre> <p>@return  - fiber id</p> <p>Get a fiber's ID</p>"},{"location":"types/fiber/#fibername","title":"fiber.name","text":"<pre><code>function fiber.name(\n  name: string?,\n  options: { truncate: boolean }?\n) -&gt; name string\n</code></pre> <p>Get or change a fiber's name</p> <p>Change the fiber name. By default a Tarantool server's interactive-mode fiber is named 'interactive' and new fibers created due to <code>fiber.create</code> are named 'lua'.</p> <p>Giving fibers distinct names makes it easier to distinguish them when using <code>fiber.info</code> and <code>fiber.top()</code>.</p> <p>Max length is 255.</p> <p>Example:</p> <pre><code> tarantool&gt; fiber.self():name('non-interactive')\n ---\n ...\n</code></pre>"},{"location":"types/fiber/#fiberstatus","title":"fiber.status","text":"<pre><code>function fiber.status() -&gt;  (\"dead\"|\"running\"|\"suspended\")\n</code></pre> <p>Get a fiber's status.</p> <p>Example:</p> <pre><code> tarantool&gt; fiber.self():status()\n ---\n - running\n ...\n</code></pre>"},{"location":"types/fiber/#fibercancel","title":"fiber.cancel","text":"<pre><code>function fiber.cancel()\n</code></pre> <p>Send a cancellation request to the fiber.</p> <p>Running and suspended fibers can be cancelled. After a fiber has been cancelled, attempts to operate on it cause errors, for example, <code>fiber_object:name()</code> causes <code>error: the fiber is dead</code>. But a dead fiber can still report its ID and status.</p> <p>Cancellation is asynchronous.</p> <p>Use <code>fiber_object:join()</code> to wait for the cancellation to complete.</p> <p>After <code>fiber_object:cancel()</code> is called, the fiber may or may not check whether it was cancelled. If the fiber does not check it, it cannot ever be cancelled.</p> <p>Possible errors: cancel is not permitted for the specified fiber object.</p>"},{"location":"types/fiber/#fiberset_joinable","title":"fiber.set_joinable","text":"<pre><code>function fiber.set_joinable(true_or_false: boolean)\n</code></pre> <p>Make a fiber joinable.</p> <p>A joinable fiber can be waited for using <code>fiber_object:join()</code>.</p> <p>The best practice is to call <code>fiber_object:set_joinable()</code> before the fiber function begins to execute because otherwise the fiber could become <code>dead</code> before <code>fiber_object:set_joinable()</code> takes effect.</p> <p>The usual sequence could be: 1. Call <code>fiber.new()</code> instead of <code>fiber.create()</code> to create a new fiber_object. Do not yield at this point, because that will cause the fiber function to begin. 2. Call <code>fiber_object:set_joinable(true)</code> to make the new <code>fiber_object</code> joinable. Now it is safe to yield. 3. Call <code>fiber_object:join()</code>.</p> <p>Usually <code>fiber_object:join()</code> should be called, otherwise the fiber's status may become 'suspended' when the fiber function ends, instead of 'dead'.</p>"},{"location":"types/fiber/#fiberjoin","title":"fiber.join","text":"<pre><code>async function fiber.join()\n -&gt; success boolean\n -&gt;  any ...\n\n</code></pre> <p>\"Join\" a joinable fiber.</p> <p>That is, let the fiber's function run and wait until the fiber's status is \u2018dead' (normally a status becomes \u2018dead' when the function execution finishes).</p> <p>Joining will cause a yield, therefore, if the fiber is currently in a suspended state, execution of its fiber function will resume.</p> <p>This kind of waiting is more convenient than going into a loop and periodically checking the status.</p> <p>However, it works only if the fiber was created with <code>fiber.new()</code> and was made joinable with <code>fiber_object:set_joinable()</code>.</p>"},{"location":"types/fiber/#fields","title":"fields","text":""},{"location":"types/fiber/#fiberstorage","title":"fiber.storage","text":"<pre><code>fiber.storage: table\n</code></pre> <p>Local storage within the fiber.</p>"},{"location":"types/fiber.slice/","title":"class slice","text":"<ul> <li>namespace: fiber</li> </ul>"},{"location":"types/fiber.slice/#fields","title":"fields","text":""},{"location":"types/fiber.slice/#slicewarn","title":"slice.warn","text":"<pre><code>slice.warn : number\n</code></pre>"},{"location":"types/fiber.slice/#sliceerr","title":"slice.err","text":"<pre><code>slice.err : number\n</code></pre>"},{"location":"types/fiber.top/","title":"class top","text":"<ul> <li>namespace: fiber</li> </ul>"},{"location":"types/fiber.top/#fields","title":"fields","text":""},{"location":"types/fiber.top/#topinstant","title":"top.instant","text":"<pre><code>top.instant : number\n</code></pre> <p>(in percent) a number which indicates the share of time the fiber was executing during the previous event loop iteration</p>"},{"location":"types/fiber.top/#topaverage","title":"top.average","text":"<pre><code>top.average : number\n</code></pre> <p>(in percent) a number which is calculated as an exponential moving average of instant values over all the previous event loop iterations</p>"},{"location":"types/fiber.top/#toptime","title":"top.time","text":"<pre><code>top.time : number\n</code></pre> <p>(in seconds) a number which estimates how much CPU time each fiber spent processing during its lifetime</p>"},{"location":"types/fio.file/","title":"class file","text":"<ul> <li>namespace: fio</li> </ul>"},{"location":"types/fio.file/#methods","title":"methods","text":""},{"location":"types/fio.file/#fileclose","title":"file.close","text":"<pre><code>function file.close()\n -&gt; success boolean\n -&gt; error_message string?\n\n</code></pre> <p>Close a file.</p>"},{"location":"types/fio.file/#filepread","title":"file.pread","text":"<pre><code>function file.pread(\n  count: number,\n  offset: number\n) -&gt;  string\n</code></pre> <p>@param <code>count</code> - number of bytes to read</p> <p>@param <code>offset</code> - offset within file where reading begins</p> <p>Perform random-access read on a file.</p>"},{"location":"types/fio.file/#filepwrite","title":"file.pwrite","text":"<pre><code>function file.pwrite(\n  new_string: string,\n  offset: number\n)\n -&gt; success boolean\n -&gt; error_message string?\n\n</code></pre> <p>@param <code>new_string</code> - value to write (if the format is pwrite(new-string, offset))</p> <p>@param <code>offset</code> - offset within file where writing begins</p> <p>Perform random-access write on a file.</p>"},{"location":"types/fio.file/#fileread","title":"file.read","text":"<pre><code>function file.read(\n  buffer: ffi.cdata*,\n  count: number\n) -&gt;  number\n</code></pre> <p>Perform non-random-access read on a file.</p>"},{"location":"types/fio.file/#filewrite","title":"file.write","text":"<pre><code>function file.write(new_string: string) -&gt; success boolean\n</code></pre> <p>Perform non-random-access write on a file.</p>"},{"location":"types/fio.file/#filetruncate","title":"file.truncate","text":"<pre><code>function file.truncate(new_size: number)\n -&gt; success boolean\n -&gt; error_message string?\n\n</code></pre> <p>Change the size of an open file.</p>"},{"location":"types/fio.file/#fileseek","title":"file.seek","text":"<pre><code>function file.seek(\n  position: number,\n  offset_from: seek?\n) -&gt;  number\n</code></pre> <p>@param <code>position</code> - position to seek to</p> <p>@param <code>offset_from</code> - <code>SEEK_END</code> = end of file,</p> <p><code>SEEK_CUR</code> = current position,</p> <p><code>SEEK_SET</code> = start of file.</p> <p>@return  - the new position if success</p> <p>Change position in a file.</p>"},{"location":"types/fio.file/#filestat","title":"file.stat","text":"<pre><code>function file.stat() -&gt;  fio.stat\n</code></pre> <p>Get statistics about an open file.</p>"},{"location":"types/fio.file/#filefsync","title":"file.fsync","text":"<pre><code>function file.fsync()\n -&gt; success boolean\n -&gt; error_message string?\n\n</code></pre> <p>Ensure that changes made to an open file are written to disk.</p>"},{"location":"types/fio.file/#filefdatasync","title":"file.fdatasync","text":"<pre><code>function file.fdatasync()\n -&gt; success boolean\n -&gt; error_message string?\n\n</code></pre> <p>Ensure that changes made to an open file are written to disk.</p>"},{"location":"types/fio.stat/","title":"class stat","text":"<ul> <li> <p>supers: table</p> </li> <li> <p>namespace: fio</p> </li> </ul>"},{"location":"types/fio.stat/#fields","title":"fields","text":""},{"location":"types/fio.stat/#statinode","title":"stat.inode","text":"<pre><code>stat.inode : number\n</code></pre>"},{"location":"types/fio.stat/#statrdev","title":"stat.rdev","text":"<pre><code>stat.rdev : number\n</code></pre>"},{"location":"types/fio.stat/#statsize","title":"stat.size","text":"<pre><code>stat.size : number\n</code></pre>"},{"location":"types/fio.stat/#statatime","title":"stat.atime","text":"<pre><code>stat.atime : number\n</code></pre>"},{"location":"types/fio.stat/#statmode","title":"stat.mode","text":"<pre><code>stat.mode : number\n</code></pre>"},{"location":"types/fio.stat/#statmtime","title":"stat.mtime","text":"<pre><code>stat.mtime : number\n</code></pre>"},{"location":"types/fio.stat/#statnlink","title":"stat.nlink","text":"<pre><code>stat.nlink : number\n</code></pre>"},{"location":"types/fio.stat/#statuid","title":"stat.uid","text":"<pre><code>stat.uid : number\n</code></pre>"},{"location":"types/fio.stat/#statblksize","title":"stat.blksize","text":"<pre><code>stat.blksize : number\n</code></pre>"},{"location":"types/fio.stat/#statgid","title":"stat.gid","text":"<pre><code>stat.gid : number\n</code></pre>"},{"location":"types/fio.stat/#statctime","title":"stat.ctime","text":"<pre><code>stat.ctime : number\n</code></pre>"},{"location":"types/fio.stat/#statdev","title":"stat.dev","text":"<pre><code>stat.dev : number\n</code></pre>"},{"location":"types/fio.stat/#statblocks","title":"stat.blocks","text":"<pre><code>stat.blocks : number\n</code></pre>"},{"location":"types/flags/","title":"alias flags","text":"<pre><code>(alias) flags = (\"O_APPEND\"|\"O_ASYNC\"|\"O_CLOEXEC\"|\"O_CREAT\"|\"O_DIRECT\"|\"O_DIRECTORY\"|\"O_EXCL\"|\"O_LARGEFILE\"|\"O_NDELAY\"|\"O_NOATIME\"...)\n    | \"O_APPEND\" -- (start at end of file)\n    | \"O_ASYNC\" -- (signal when IO is possible)\n    | \"O_CLOEXEC\" -- (enable a flag related to closing)\n    | \"O_CREAT\" -- (create file if it doesn\u2019t exist)\n    | \"O_DIRECT\" -- (do less caching or no caching)\n    | \"O_DIRECTORY\" -- (fail if it\u2019s not a directory)\n    | \"O_EXCL\" -- (fail if file cannot be created)\n    | \"O_LARGEFILE\" -- (allow 64-bit file offsets)\n    | \"O_NDELAY\"\n    | \"O_NOATIME\" -- (no access-time updating)\n    | \"O_NOCTTY\" -- (no console tty)\n    | \"O_NOFOLLOW\" -- (no following symbolic links)\n    | \"O_NONBLOCK\" -- (no blocking)\n    | \"O_PATH\" -- (get a path for low-level use)\n    | \"O_RDONLY\" -- (read only)\n    | \"O_RDWR\" -- (either read or write)\n    | \"O_SYNC\" -- (force writing if it\u2019s possible)\n    | \"O_TMPFILE\" -- (the file will be temporary and nameless)\n    | \"O_TRUNC\" -- (truncate)\n    | \"O_WRONLY\" -- (write only)\n\n</code></pre>"},{"location":"types/float64/","title":"alias float64","text":"<pre><code>(alias) float64 = ffi.cdata*\n</code></pre>"},{"location":"types/fun.comparator/","title":"alias comparator","text":"<ul> <li>namespace: fun</li> </ul> <pre><code>(alias) comparator = fun(a: T, b: T) -&gt; T\n</code></pre>"},{"location":"types/fun.iterator/","title":"class iterator","text":"<ul> <li>namespace: fun</li> </ul>"},{"location":"types/fun.iterator/#methods","title":"methods","text":""},{"location":"types/fun.iterator/#iteratorunwrap","title":"iterator.unwrap","text":"<pre><code>function iterator.unwrap() -&gt;  any\n</code></pre> <p>Documentation is not provided yet.</p>"},{"location":"types/fun.iterator/#iteratoreach","title":"iterator.each","text":"<pre><code>function iterator.each(f: fun(a: A, b: B)) -&gt;  iterator&lt;A,B&gt;\n</code></pre>"},{"location":"types/fun.iterator/#iteratorfor_each","title":"iterator.for_each","text":"<pre><code>function iterator.for_each(f: fun(a: A, b: B)) -&gt;  iterator&lt;A,B&gt;\n</code></pre>"},{"location":"types/fun.iterator/#iteratorforeach","title":"iterator.foreach","text":"<pre><code>function iterator.foreach(f: fun(a: A, b: B)) -&gt;  iterator&lt;A,B&gt;\n</code></pre>"},{"location":"types/fun.iterator/#iteratornth","title":"iterator.nth","text":"<pre><code>function iterator.nth(n: integer)\n -&gt; nth_element A?\n -&gt; nth_element B?\n\n</code></pre> <p>@param <code>n</code> - a sequential number (indexed starting from 1, like Lua tables)</p> <p>This function returns the n-th element of iterator.</p>"},{"location":"types/fun.iterator/#iteratorhead","title":"iterator.head","text":"<pre><code>function iterator.head()\n -&gt;  A\n -&gt;  B\n\n</code></pre> <p>Extract the first element from the iterator.</p> <p>If the iterator is empty then an error is raised.</p>"},{"location":"types/fun.iterator/#iteratorcar","title":"iterator.car","text":"<pre><code>function iterator.car()\n -&gt;  A\n -&gt;  B\n\n</code></pre>"},{"location":"types/fun.iterator/#iteratortail","title":"iterator.tail","text":"<pre><code>function iterator.tail() -&gt;  iterator&lt;A,B&gt;\n</code></pre> <p>Return a copy of gen, param, state iterator without its first element.</p> <p>If the iterator is empty then an empty iterator is returned.</p>"},{"location":"types/fun.iterator/#iteratorcdr","title":"iterator.cdr","text":"<pre><code>function iterator.cdr() -&gt;  iterator&lt;A,B&gt;\n</code></pre>"},{"location":"types/fun.iterator/#iteratortake_n","title":"iterator.take_n","text":"<pre><code>function iterator.take_n(n: integer) -&gt;  iterator&lt;A,B&gt;\n</code></pre> <p>@param <code>n</code> - a number of elements to take</p>"},{"location":"types/fun.iterator/#iteratortake_while","title":"iterator.take_while","text":"<pre><code>function iterator.take_while(predicate: predicate&lt;A,B&gt;) -&gt;  iterator&lt;A,B&gt;\n</code></pre> <p>Returns an iterator on the longest prefix of the iterator's elements that satisfy predicate.</p>"},{"location":"types/fun.iterator/#iteratortake","title":"iterator.take","text":"<pre><code>function iterator.take(n_or_predicate: (fun(...) -&gt; ...|integer)) -&gt;  iterator&lt;A,B&gt;\n</code></pre> <p>Alias for <code>i:take_while</code> and <code>i:take_n</code>.</p>"},{"location":"types/fun.iterator/#iteratordrop_n","title":"iterator.drop_n","text":"<pre><code>function iterator.drop_n(n: integer) -&gt;  iterator&lt;A,B&gt;\n</code></pre> <p>@param <code>n</code> - a number of elements to drop</p> <p>Drop n elements out of an iterator.</p>"},{"location":"types/fun.iterator/#iteratordrop_while","title":"iterator.drop_while","text":"<pre><code>function iterator.drop_while(predicate: predicate&lt;A,B&gt;) -&gt;  iterator&lt;A,B&gt;\n</code></pre> <p>Returns an iterator of gen, param, state after skipping the longest prefix of elements that satisfy predicate.</p>"},{"location":"types/fun.iterator/#iteratordrop","title":"iterator.drop","text":"<pre><code>function iterator.drop(n_or_predicate: (fun(...) -&gt; ...|integer)) -&gt;  iterator&lt;A,B&gt;\n</code></pre> <p>Alias for <code>fun.iterator:drop_while</code> and <code>fun.iterator:drop_n</code></p>"},{"location":"types/fun.iterator/#iteratorindex","title":"iterator.index","text":"<pre><code>function iterator.index(x: A) -&gt; position integer?\n</code></pre> <p>@param <code>x</code> - a value to find</p> <p>Find an index of an element.</p> <p>The function returns the position of the first element in the given iterator which is equal (using ==) to the query element, or nil if there is no such element.</p>"},{"location":"types/fun.iterator/#iteratorindexes","title":"iterator.indexes","text":"<pre><code>function iterator.indexes(x: A) -&gt;  iterator&lt;integer,nil&gt;\n</code></pre> <p>@param <code>x</code> - a value to find</p> <p>The function returns an iterator to positions of elements which equals to the query element.</p>"},{"location":"types/fun.iterator/#iteratorelem_indexes","title":"iterator.elem_indexes","text":"<pre><code>function iterator.elem_indexes(x: A) -&gt;  iterator&lt;integer,nil&gt;\n</code></pre> <p>@param <code>x</code> - a value to find</p>"},{"location":"types/fun.iterator/#iteratorindices","title":"iterator.indices","text":"<pre><code>function iterator.indices(x: A) -&gt;  iterator&lt;integer,nil&gt;\n</code></pre> <p>@param <code>x</code> - a value to find</p>"},{"location":"types/fun.iterator/#iteratorelem_indices","title":"iterator.elem_indices","text":"<pre><code>function iterator.elem_indices(x: A) -&gt;  iterator&lt;integer,nil&gt;\n</code></pre> <p>@param <code>x</code> - a value to find</p>"},{"location":"types/fun.iterator/#iteratorfilter","title":"iterator.filter","text":"<pre><code>function iterator.filter(predicate: predicate&lt;A,B&gt;) -&gt;  iterator&lt;A,B&gt;\n</code></pre> <p>Return a new iterator of those elements that satisfy the predicate.</p>"},{"location":"types/fun.iterator/#iteratorremove_if","title":"iterator.remove_if","text":"<pre><code>function iterator.remove_if(predicate: predicate&lt;A,B&gt;) -&gt;  iterator&lt;A,B&gt;\n</code></pre>"},{"location":"types/fun.iterator/#iteratorgrep","title":"iterator.grep","text":"<pre><code>function iterator.grep(regex_or_predicate: (string|fun(...) -&gt; ...)) -&gt;  iterator&lt;A,B&gt;\n</code></pre> <p>Return a new iterator of those elements that satisfy the predicate.</p>"},{"location":"types/fun.iterator/#iteratorpartition","title":"iterator.partition","text":"<pre><code>function iterator.partition(predicate: predicate&lt;A,B&gt;)\n -&gt;  iterator&lt;A,B&gt;\n -&gt;  iterator&lt;A,B&gt;\n\n</code></pre> <p>The function returns two iterators where elements do and do not satisfy the predicate.</p> <p>The function make a clone of the source iterator. Iterators especially returned in tables to work with zip() and other functions.</p>"},{"location":"types/fun.iterator/#iteratorreduce","title":"iterator.reduce","text":"<pre><code>function iterator.reduce(\n  acc: fun(acc: R, a: A, b: B) -&gt; R,\n  initval: R\n) -&gt;  R\n</code></pre> <p>@param <code>acc</code> - an accumulating function</p> <p>@param <code>initval</code> - an initial value that passed to accfun on the first iteration</p> <p>The function reduces the iterator from left to right using the binary operator accfun and the initial value initval</p>"},{"location":"types/fun.iterator/#iteratorfoldl","title":"iterator.foldl","text":"<pre><code>function iterator.foldl(\n  acc: fun(acc: R, a: A, b: B) -&gt; R,\n  initval: R\n) -&gt;  R\n</code></pre> <p>@param <code>acc</code> - an accumulating function</p> <p>@param <code>initval</code> - an initial value that passed to accfun on the first iteration</p>"},{"location":"types/fun.iterator/#iteratorlength","title":"iterator.length","text":"<pre><code>function iterator.length() -&gt; length integer\n</code></pre> <p>Returns a number of elements in iterator.</p>"},{"location":"types/fun.iterator/#iteratoris_null","title":"iterator.is_null","text":"<pre><code>function iterator.is_null() -&gt; is_empty boolean\n</code></pre> <p>Checks whether iterator has any elements inside.</p>"},{"location":"types/fun.iterator/#iteratorall","title":"iterator.all","text":"<pre><code>function iterator.all(predicate: predicate&lt;A,B&gt;) -&gt; satisfied boolean\n</code></pre> <p>Returns true if all return values of iterator satisfy the predicate.</p>"},{"location":"types/fun.iterator/#iteratorevery","title":"iterator.every","text":"<pre><code>function iterator.every(predicate: predicate&lt;A,B&gt;) -&gt; satisfied boolean\n</code></pre>"},{"location":"types/fun.iterator/#iteratorany","title":"iterator.any","text":"<pre><code>function iterator.any(predicate: predicate&lt;A,B&gt;) -&gt; one_is_satisfied boolean\n</code></pre> <p>Returns true if at least one return values of iterator satisfy the predicate.</p>"},{"location":"types/fun.iterator/#iteratorsome","title":"iterator.some","text":"<pre><code>function iterator.some(predicate: predicate&lt;A,B&gt;) -&gt; one_is_satisfied boolean\n</code></pre>"},{"location":"types/fun.iterator/#iteratorsum","title":"iterator.sum","text":"<pre><code>function iterator.sum() -&gt; sum number\n</code></pre> <p>Sum up all iteration values.</p>"},{"location":"types/fun.iterator/#iteratorproduct","title":"iterator.product","text":"<pre><code>function iterator.product() -&gt; product number\n</code></pre> <p>Multiply all iteration values.</p>"},{"location":"types/fun.iterator/#iteratormin","title":"iterator.min","text":"<pre><code>function iterator.min() -&gt; minimal A\n</code></pre> <p>Return a minimum value from the iterator using operator.min() or &lt; for numbers and other types respectively.</p> <p>The iterator must be non-null, otherwise an error is raised.</p>"},{"location":"types/fun.iterator/#iteratorminimum","title":"iterator.minimum","text":"<pre><code>function iterator.minimum() -&gt; minimal A\n</code></pre>"},{"location":"types/fun.iterator/#iteratormax","title":"iterator.max","text":"<pre><code>function iterator.max() -&gt; maximal A\n</code></pre> <p>Return a minimum value from the iterator using operator.min() or &lt; for numbers and other types respectively.</p> <p>The iterator must be non-null, otherwise an error is raised.</p>"},{"location":"types/fun.iterator/#iteratormaximum","title":"iterator.maximum","text":"<pre><code>function iterator.maximum() -&gt; maximal A\n</code></pre>"},{"location":"types/fun.iterator/#iteratormax_by","title":"iterator.max_by","text":"<pre><code>function iterator.max_by(cmp: comparator&lt;A&gt;) -&gt; maximal A\n</code></pre> <p>Return a maximum value from the iterator using the cmp as a &gt; operator.</p> <p>The iterator must be non-null, otherwise an error is raised.</p>"},{"location":"types/fun.iterator/#iteratormaximum_by","title":"iterator.maximum_by","text":"<pre><code>function iterator.maximum_by(cmp: comparator&lt;A&gt;) -&gt; maximal A\n</code></pre>"},{"location":"types/fun.iterator/#iteratormin_by","title":"iterator.min_by","text":"<pre><code>function iterator.min_by(cmp: comparator&lt;A&gt;) -&gt; maximal A\n</code></pre> <p>Return a maximum value from the iterator using the cmp as a &gt; operator.</p> <p>The iterator must be non-null, otherwise an error is raised.</p>"},{"location":"types/fun.iterator/#iteratorminimum_by","title":"iterator.minimum_by","text":"<pre><code>function iterator.minimum_by(cmp: comparator&lt;A&gt;) -&gt; maximal A\n</code></pre>"},{"location":"types/fun.iterator/#iteratortotable","title":"iterator.totable","text":"<pre><code>function iterator.totable() -&gt;  A[]\n</code></pre> <p>Returns a new table (array) from iterated values.</p>"},{"location":"types/fun.iterator/#iteratortomap","title":"iterator.tomap","text":"<pre><code>function iterator.tomap() -&gt;  table&lt;A,B&gt;\n</code></pre> <p>Returns a new table (map) from iterated values.</p>"},{"location":"types/fun.iterator/#iteratormap","title":"iterator.map","text":"<pre><code>function iterator.map(f: fun(a: A, b: B) -&gt; (C,D)) -&gt;  iterator&lt;C,D&gt;\n</code></pre> <p>return a new iterator by applying the fun to each element of gen, param, state iterator.</p> <p>the mapping is performed on the fly and no values are buffered.</p>"},{"location":"types/fun.iterator/#iteratorenumerate","title":"iterator.enumerate","text":"<pre><code>function iterator.enumerate() -&gt;  iterator&lt;integer,A&gt;\n</code></pre> <p>Return a new iterator by enumerating all elements of the gen, param, state iterator starting from 1.</p> <p>The mapping is performed on the fly and no values are buffered.</p>"},{"location":"types/fun.iterator/#iteratorintersperse","title":"iterator.intersperse","text":"<pre><code>function iterator.intersperse(x)\n</code></pre> <p>Return a new iterator where the x value is interspersed between the elements of the source iterator.</p> <p>The x value can also be added as a last element of returning iterator if the source iterator contains the odd number of elements.</p>"},{"location":"types/fun.iterator/#iteratorzip","title":"iterator.zip","text":"<pre><code>function iterator.zip(...)\n</code></pre> <p>Return a new iterator where i-th return value contains the i-th element from each of the iterators.</p> <p>The returned iterator is truncated in length to the length of the shortest iterator.</p> <p>For multi-return iterators only the first variable is used.</p>"},{"location":"types/fun.iterator/#iteratorcycle","title":"iterator.cycle","text":"<pre><code>function iterator.cycle(g)\n</code></pre> <p>Make a new iterator that returns elements from {gen, param, state} iterator until the end and then \u201crestart\u201d iteration using a saved clone of {gen, param, state}.</p> <p>The returned iterator is constant space and no return values are buffered.</p> <p>Instead of that the function make a clone of the source {gen, param, state} iterator.</p> <p>Therefore, the source iterator must be pure functional to make an identical clone.</p> <p>Infinity iterators are supported, but are not recommended.</p>"},{"location":"types/fun.iterator/#iteratorchain","title":"iterator.chain","text":"<pre><code>function iterator.chain(...)\n</code></pre> <p>Make an iterator that returns elements from the first iterator until it is exhausted, then proceeds to the next iterator, until all of the iterators are exhausted.</p> <p>Used for treating consecutive iterators as a single iterator.</p> <p>Infinity iterators are supported, but are not recommended.</p>"},{"location":"types/fun.predicate/","title":"alias predicate","text":"<ul> <li>namespace: fun</li> </ul> <pre><code>(alias) predicate = fun(a: A, b: B) -&gt; boolean?\n</code></pre>"},{"location":"types/http.client.options/","title":"class options","text":"<ul> <li>namespace: http.client</li> </ul>"},{"location":"types/http.client.options/#fields","title":"fields","text":""},{"location":"types/http.client.options/#optionsmax_connections","title":"options.max_connections","text":"<pre><code>options.max_connections : integer?\n</code></pre> <p>is the maximum number of entries in the cache. It affects libcurl CURLMOPT_MAXCONNECTS. The default is -1.</p>"},{"location":"types/http.client.options/#optionsmax_total_connections","title":"options.max_total_connections","text":"<pre><code>options.max_total_connections : integer?\n</code></pre> <p>is the maximum number of active connections. It affects libcurl CURLMOPT_MAX_TOTAL_CONNECTIONS. It is ignored if the curl version is less than 7.30. The default is 0, which allows libcurl to scale accordingly to easily handles count.</p>"},{"location":"types/http.client.request.options/","title":"class options","text":"<ul> <li>namespace: http.client.request</li> </ul>"},{"location":"types/http.client.request.options/#fields","title":"fields","text":""},{"location":"types/http.client.request.options/#optionsca_file","title":"options.ca_file","text":"<pre><code>options.ca_file : string?\n</code></pre> <p>path to an SSL certificate file to verify the peer with.</p>"},{"location":"types/http.client.request.options/#optionsca_path","title":"options.ca_path","text":"<pre><code>options.ca_path : string?\n</code></pre> <p>path to a directory holding one or more certificates to verify the peer with.</p>"},{"location":"types/http.client.request.options/#optionsheaders","title":"options.headers","text":"<pre><code>options.headers : table&lt;string,any&gt;?\n</code></pre> <p>table of HTTP headers.</p>"},{"location":"types/http.client.request.options/#optionskeepalive_idle","title":"options.keepalive_idle","text":"<pre><code>options.keepalive_idle : number?\n</code></pre> <p>delay, in seconds, that the operating system will wait while the connection is idle before sending keepalive probes. See also CURLOPT_TCP_KEEPIDLE and the note below about keepalive_interval.</p>"},{"location":"types/http.client.request.options/#optionskeepalive_interval","title":"options.keepalive_interval","text":"<pre><code>options.keepalive_interval : number?\n</code></pre> <p>the interval, in seconds, that the operating system will wait between sending keepalive probes. See also CURLOPT_TCP_KEEPINTVL. If both keepalive_idle and keepalive_interval are set, then Tarantool will also set HTTP keepalive headers: Connection:Keep-Alive and Keep-Alive:timeout=. Otherwise Tarantool will send Connection:close."},{"location":"types/http.client.request.options/#optionslow_speed_limit","title":"options.low_speed_limit","text":"<pre><code>options.low_speed_limit : number?\n</code></pre> <p>set the \"low speed limit\" \u2013 the average transfer speed in bytes per second that the transfer should be below during \"low speed time\" seconds for the library to consider it to be too slow and abort. See also CURLOPT_LOW_SPEED_LIMIT.</p>"},{"location":"types/http.client.request.options/#optionslow_speed_time","title":"options.low_speed_time","text":"<pre><code>options.low_speed_time : number?\n</code></pre> <p>set the \"low speed time\" \u2013 the time that the transfer speed should be below the \"low speed limit\" for the library to consider it too slow and abort. See also CURLOPT_LOW_SPEED_TIME.</p>"},{"location":"types/http.client.request.options/#optionsmax_header_name_len","title":"options.max_header_name_len","text":"<pre><code>options.max_header_name_len : integer?\n</code></pre> <p>the maximal length of a header name. If a header name is bigger than this value, it is truncated to this length. The default value is \u201832\u2019.</p>"},{"location":"types/http.client.request.options/#optionsfollow_location","title":"options.follow_location","text":"<pre><code>options.follow_location : boolean?\n</code></pre> <p>(Default: true) when the option is set to true (default) and the response has a 3xx code, the HTTP client will automatically issue another request to a location that a server sends in the Location header.</p>"},{"location":"types/http.client.request.options/#optionsno_proxy","title":"options.no_proxy","text":"<pre><code>options.no_proxy : string?\n</code></pre> <p>a comma-separated list of hosts that do not require proxies, or \u2018*\u2019, or \u2018\u2019. Set no_proxy = host [, host ...] to specify hosts that can be reached without requiring a proxy</p>"},{"location":"types/http.client.request.options/#optionsproxy","title":"options.proxy","text":"<pre><code>options.proxy : string?\n</code></pre> <p>a proxy server host or IP address, or \u2018\u2019. If proxy is a host or IP address, then it may begin with a scheme, for example https:// for an https proxy or http:// for an http proxy.</p>"},{"location":"types/http.client.request.options/#optionsproxy_port","title":"options.proxy_port","text":"<pre><code>options.proxy_port : integer?\n</code></pre> <p>a proxy server port. The default is 443 for an https proxy and 1080 for a non-https proxy. See also CURLOPT_PROXYPORT.</p>"},{"location":"types/http.client.request.options/#optionsproxy_user_pwd","title":"options.proxy_user_pwd","text":"<pre><code>options.proxy_user_pwd : string?\n</code></pre> <p>a proxy server user name and/or password. Format: proxy_user_pwd = user_name: or proxy_user_pwd = :password or proxy_user_pwd = user_name:password</p>"},{"location":"types/http.client.request.options/#optionsssl_cert","title":"options.ssl_cert","text":"<pre><code>options.ssl_cert : string?\n</code></pre> <p>path to a SSL client certificate file. See also CURLOPT_SSLCERT.</p>"},{"location":"types/http.client.request.options/#optionsssl_key","title":"options.ssl_key","text":"<pre><code>options.ssl_key : string?\n</code></pre> <p>path to a private key file for a TLS and SSL client certificate. See also CURLOPT_SSLKEY.</p>"},{"location":"types/http.client.request.options/#optionstimeout","title":"options.timeout","text":"<pre><code>options.timeout : number?\n</code></pre> <p>(Default: 36586400100) number of seconds to wait for a curl API read request before timing out</p>"},{"location":"types/http.client.request.options/#optionsunix_socket","title":"options.unix_socket","text":"<pre><code>options.unix_socket : string?\n</code></pre> <p>a socket name to use instead of an Internet address, for a local connection. The Tarantool server must be built with libcurl 7.40 or later. See the second example later in this section.</p>"},{"location":"types/http.client.request.options/#optionsverbose","title":"options.verbose","text":"<pre><code>options.verbose : boolean?\n</code></pre> <p>set on/off verbose mode.</p>"},{"location":"types/http.client.request.options/#optionsverify_host","title":"options.verify_host","text":"<pre><code>options.verify_host : boolean?\n</code></pre> <p>set on/off verification of the certificate\u2019s name (CN) against host. See also CURLOPT_SSL_VERIFYHOST.</p>"},{"location":"types/http.client.request.options/#optionsverify_peer","title":"options.verify_peer","text":"<pre><code>options.verify_peer : boolean?\n</code></pre> <p>set on/off verification of the peer\u2019s SSL certificate. See also CURLOPT_SSL_VERIFYPEER.</p>"},{"location":"types/http.client.request.options/#optionsaccept_encoding","title":"options.accept_encoding","text":"<pre><code>options.accept_encoding : string?\n</code></pre> <p>enables automatic decompression of HTTP responses by setting the contents of the Accept-Encoding: header sent in an HTTP request and enabling decoding of a response when the Content-Encoding: header is received.</p>"},{"location":"types/http.client.stat/","title":"class stat","text":"<ul> <li>namespace: http.client</li> </ul>"},{"location":"types/http.client.stat/#fields","title":"fields","text":""},{"location":"types/http.client.stat/#statactive_requests","title":"stat.active_requests","text":"<pre><code>stat.active_requests : number\n</code></pre> <p>number of currently executing requests</p>"},{"location":"types/http.client.stat/#statsockets_added","title":"stat.sockets_added","text":"<pre><code>stat.sockets_added : number\n</code></pre> <p>total number of sockets added into an event loop</p>"},{"location":"types/http.client.stat/#statsockets_deleted","title":"stat.sockets_deleted","text":"<pre><code>stat.sockets_deleted : number\n</code></pre> <p>total number of sockets sockets from an event loop</p>"},{"location":"types/http.client.stat/#stattotal_requests","title":"stat.total_requests","text":"<pre><code>stat.total_requests : number\n</code></pre> <p>total number of requests</p>"},{"location":"types/http.client.stat/#stathttp_200_responses","title":"stat.http_200_responses","text":"<pre><code>stat.http_200_responses : number\n</code></pre> <p>total number of requests which have returned code HTTP 200</p>"},{"location":"types/http.client.stat/#stathttp_other_responses","title":"stat.http_other_responses","text":"<pre><code>stat.http_other_responses : number\n</code></pre> <p>total number of requests which have not returned code HTTP 200</p>"},{"location":"types/http.client.stat/#statfailed_requests","title":"stat.failed_requests","text":"<pre><code>stat.failed_requests : number\n</code></pre> <p>total number of requests which have failed including system errors, curl errors, and HTTP errors</p>"},{"location":"types/http.response/","title":"class response","text":"<ul> <li>namespace: http</li> </ul>"},{"location":"types/http.response/#fields","title":"fields","text":""},{"location":"types/http.response/#responsestatus","title":"response.status","text":"<pre><code>response.status : integer\n</code></pre> <p>HTTP response status</p>"},{"location":"types/http.response/#responsereason","title":"response.reason","text":"<pre><code>response.reason : string\n</code></pre> <p>HTTP response status text</p>"},{"location":"types/http.response/#responseheaders","title":"response.headers","text":"<pre><code>response.headers : table&lt;string,any&gt;\n</code></pre> <p>a Lua table with normalized HTTP headers</p>"},{"location":"types/http.response/#responsebody","title":"response.body","text":"<pre><code>response.body : string?\n</code></pre> <p>response body</p>"},{"location":"types/http.response/#responseproto","title":"response.proto","text":"<pre><code>response.proto : number\n</code></pre> <p>protocol version</p>"},{"location":"types/iconv/","title":"class iconv","text":""},{"location":"types/iconv/#methods","title":"methods","text":""},{"location":"types/iconv/#iconvconverter","title":"iconv.converter","text":"<pre><code>function iconv.converter(input_string: string) -&gt; res_string string\n</code></pre> <p>@param <code>input_string</code> - the string to be converted (the \"from\" string)</p> <p>@return <code>res_string</code> - the string that results from the conversion (the \"to\" string)</p> <p>Convert.</p> <p>If anything in input-string cannot be converted, there will be an error message and the result string will be unchanged.</p> <p>Example:</p> <p>We know that the Unicode code point for \"\u0414\" (CYRILLIC CAPITAL LETTER DE) is hexadecimal 0414 according to the character database of <code>Unicode &lt;http://www.unicode.org/Public/UCD/latest/ucd/UnicodeData.txt&gt;</code>_. Therefore that is what it will look like in UTF-16. We know that Tarantool typically uses the UTF-8 character set. So make a from-UTF-8-to-UTF-16 converter, use string.hex('\u0414') to show what \u0414's encoding looks like in the UTF-8 source, and use string.hex('\u0414'-after-conversion) to show what it looks like in the UTF-16 target. Since the result is 0414, we see that iconv conversion works. (Different iconv implementations might use different names, for example UTF-16BE instead of UTF16BE.)</p> <pre><code> tarantool&gt; string.hex('\u0414')\n ---\n - d094\n ...\n\n tarantool&gt; converter = require('iconv').new('UTF16BE', 'UTF8')\n ---\n ...\n\n tarantool&gt; utf16_string = converter('\u0414')\n ---\n ...\n\n tarantool&gt; string.hex(utf16_string)\n ---\n - '0414'\n ...\n</code></pre>"},{"location":"types/int64_t/","title":"class int64_t","text":"<ul> <li>supers: ffi.cdata*</li> </ul>"},{"location":"types/integer64/","title":"alias integer64","text":"<pre><code>(alias) integer64 = ffi.cdata*\n</code></pre>"},{"location":"types/json.cfg/","title":"class cfg","text":"<ul> <li>namespace: json</li> </ul>"},{"location":"types/json.cfg/#fields","title":"fields","text":""},{"location":"types/json.cfg/#cfgencode_max_depth","title":"cfg.encode_max_depth","text":"<pre><code>cfg.encode_max_depth : number?\n</code></pre> <p>(default: 128) Max recursion depth for encoding</p>"},{"location":"types/json.cfg/#cfgencode_deep_as_nil","title":"cfg.encode_deep_as_nil","text":"<pre><code>cfg.encode_deep_as_nil : boolean?\n</code></pre> <p>(default: false) A flag saying whether to crop tables with nesting level deeper than cfg.encode_max_depth. Not-encoded fields are replaced with one null. If not set, too deep nesting is considered an error.</p>"},{"location":"types/json.cfg/#cfgencode_invalid_numbers","title":"cfg.encode_invalid_numbers","text":"<pre><code>cfg.encode_invalid_numbers : boolean?\n</code></pre> <p>(default: true) A flag saying whether to enable encoding of NaN and Inf numbers</p>"},{"location":"types/json.cfg/#cfgencode_number_precision","title":"cfg.encode_number_precision","text":"<pre><code>cfg.encode_number_precision : number?\n</code></pre> <p>(default: 14) Precision of floating point numbers</p>"},{"location":"types/json.cfg/#cfgencode_load_metatables","title":"cfg.encode_load_metatables","text":"<pre><code>cfg.encode_load_metatables : boolean?\n</code></pre> <p>(default: true) A flag saying whether the serializer will follow __serialize metatable field</p>"},{"location":"types/json.cfg/#cfgencode_use_tostring","title":"cfg.encode_use_tostring","text":"<pre><code>cfg.encode_use_tostring : boolean?\n</code></pre> <p>(default: false) A flag saying whether to use tostring() for unknown types</p>"},{"location":"types/json.cfg/#cfgencode_invalid_as_nil","title":"cfg.encode_invalid_as_nil","text":"<pre><code>cfg.encode_invalid_as_nil : boolean?\n</code></pre> <p>(default: false) A flag saying whether use NULL for non-recognized types</p>"},{"location":"types/json.cfg/#cfgencode_sparse_convert","title":"cfg.encode_sparse_convert","text":"<pre><code>cfg.encode_sparse_convert : boolean?\n</code></pre> <p>(default: true) A flag saying whether to handle excessively sparse arrays as maps. See detailed description below.</p>"},{"location":"types/json.cfg/#cfgencode_sparse_ratio","title":"cfg.encode_sparse_ratio","text":"<pre><code>cfg.encode_sparse_ratio : number?\n</code></pre> <p>(default: 2) 1/encode_sparse_ratio is the permissible percentage of missing values in a sparse array.</p>"},{"location":"types/json.cfg/#cfgencode_sparse_safe","title":"cfg.encode_sparse_safe","text":"<pre><code>cfg.encode_sparse_safe : number?\n</code></pre> <p>(default: 10) A limit ensuring that small Lua arrays are always encoded as sparse arrays (instead of generating an error or encoding as a map)</p>"},{"location":"types/json.cfg/#cfgdecode_invalid_numbers","title":"cfg.decode_invalid_numbers","text":"<pre><code>cfg.decode_invalid_numbers : boolean?\n</code></pre> <p>(default: true) A flag saying whether to enable decoding of NaN and Inf numbers</p>"},{"location":"types/json.cfg/#cfgdecode_save_metatables","title":"cfg.decode_save_metatables","text":"<pre><code>cfg.decode_save_metatables : boolean?\n</code></pre> <p>(default: true) A flag saying whether to set metatables for all arrays and maps</p>"},{"location":"types/json.cfg/#cfgdecode_max_depth","title":"cfg.decode_max_depth","text":"<pre><code>cfg.decode_max_depth : number?\n</code></pre> <p>(default: 128) Max recursion depth for decoding</p>"},{"location":"types/log/","title":"class log","text":""},{"location":"types/log/#methods","title":"methods","text":""},{"location":"types/log/#logwarn","title":"log.warn","text":"<pre><code>function log.warn(\n  s: any,\n  ...: any\n)\n</code></pre> <p>Log a message with the warn level.</p> <ul> <li>A message can be a string.</li> <li>A message may contain C-style format specifiers <code>%d</code> or <code>%s</code>. Example:</li> <li>A message may be a scalar data type or a table. Example:</li> </ul> <p>The actual output will be a line in the log, containing: * The current timestamp * A module name * 'E', 'W', 'I', 'V' or 'D' depending on the called function. * <code>message</code>.</p> <p>Example:</p> <pre><code> local log = require('log')\n log.cfg { level = 'verbose' }\n log.warn('Warning message')\n log.info('Tarantool version: %s', box.info.version)\n log.error({ 500, 'Internal error' })\n log.debug('Debug message')\n</code></pre> <p>Note that the message will not be logged if the severity level corresponding to the called function is less than <code>log.level</code>.</p>"},{"location":"types/log/#loginfo","title":"log.info","text":"<pre><code>function log.info(\n  s: any,\n  ...: any\n)\n</code></pre> <p>Log a message with the info level.</p> <ul> <li>A message can be a string.</li> <li>A message may contain C-style format specifiers <code>%d</code> or <code>%s</code>. Example:</li> <li>A message may be a scalar data type or a table. Example:</li> </ul> <p>The actual output will be a line in the log, containing: * The current timestamp * A module name * 'E', 'W', 'I', 'V' or 'D' depending on the called function. * <code>message</code>.</p> <p>Example:</p> <pre><code> local log = require('log')\n log.cfg { level = 'verbose' }\n log.warn('Warning message')\n log.info('Tarantool version: %s', box.info.version)\n log.error({ 500, 'Internal error' })\n log.debug('Debug message')\n</code></pre> <p>Note that the message will not be logged if the severity level corresponding to the called function is less than <code>log.level</code>.</p>"},{"location":"types/log/#logerror","title":"log.error","text":"<pre><code>function log.error(\n  s: any,\n  ...: any\n)\n</code></pre> <p>Log a message with the error level.</p> <ul> <li>A message can be a string.</li> <li>A message may contain C-style format specifiers <code>%d</code> or <code>%s</code>. Example:</li> <li>A message may be a scalar data type or a table. Example:</li> </ul> <p>The actual output will be a line in the log, containing: * The current timestamp * A module name * 'E', 'W', 'I', 'V' or 'D' depending on the called function. * <code>message</code>.</p> <p>Example:</p> <pre><code> local log = require('log')\n log.cfg { level = 'verbose' }\n log.warn('Warning message')\n log.info('Tarantool version: %s', box.info.version)\n log.error({ 500, 'Internal error' })\n log.debug('Debug message')\n</code></pre> <p>Note that the message will not be logged if the severity level corresponding to the called function is less than <code>log.level</code>.</p>"},{"location":"types/log/#logverbose","title":"log.verbose","text":"<pre><code>function log.verbose(\n  s: any,\n  ...: any\n)\n</code></pre> <p>Log a message with the verbose level.</p> <ul> <li>A message can be a string.</li> <li>A message may contain C-style format specifiers <code>%d</code> or <code>%s</code>. Example:</li> <li>A message may be a scalar data type or a table. Example:</li> </ul> <p>The actual output will be a line in the log, containing: * The current timestamp * A module name * 'E', 'W', 'I', 'V' or 'D' depending on the called function. * <code>message</code>.</p> <p>Example:</p> <pre><code> local log = require('log')\n log.cfg { level = 'verbose' }\n log.warn('Warning message')\n log.info('Tarantool version: %s', box.info.version)\n log.error({ 500, 'Internal error' })\n log.debug('Debug message')\n</code></pre> <p>Note that the message will not be logged if the severity level corresponding to the called function is less than <code>log.level</code>.</p>"},{"location":"types/log/#logdebug","title":"log.debug","text":"<pre><code>function log.debug(\n  s: any,\n  ...: any\n)\n</code></pre> <p>Log a message with the debug level.</p> <ul> <li>A message can be a string.</li> <li>A message may contain C-style format specifiers <code>%d</code> or <code>%s</code>. Example:</li> <li>A message may be a scalar data type or a table. Example:</li> </ul> <p>The actual output will be a line in the log, containing: * The current timestamp * A module name * 'E', 'W', 'I', 'V' or 'D' depending on the called function. * <code>message</code>.</p> <p>Example:</p> <pre><code> local log = require('log')\n log.cfg { level = 'verbose' }\n log.warn('Warning message')\n log.info('Tarantool version: %s', box.info.version)\n log.error({ 500, 'Internal error' })\n log.debug('Debug message')\n</code></pre> <p>Note that the message will not be logged if the severity level corresponding to the called function is less than <code>log.level</code>.</p>"},{"location":"types/log/#loglevel","title":"log.level","text":"<pre><code>function log.level(lvl: number?)\n</code></pre> <p>Set log level.</p>"},{"location":"types/log/#lognew","title":"log.new","text":"<pre><code>function log.new(name: string) -&gt;  log\n</code></pre> <p>Create a new logger with the specified name.</p> <p>Since 2.11.0</p> <p>You can configure a specific log level for a new logger using the <code>log.modules</code> configuration property.</p>"},{"location":"types/map/","title":"alias map","text":"<pre><code>(alias) map = table&lt;string,tuple_type&gt;\n</code></pre> <p>Tarantool kv map, keys are always strings</p>"},{"location":"types/mode/","title":"alias mode","text":"<pre><code>(alias) mode = (\"S_IWGRP\"|\"S_IXGRP\"|\"S_IROTH\"|\"S_IXOTH\"|\"S_IRUSR\"|\"S_IXUSR\"|\"S_IRWXU\"|\"S_IRWXG\"|\"S_IWOTH\"|\"S_IRWXO\"...)\n    | \"S_IWGRP\"\n    | \"S_IXGRP\"\n    | \"S_IROTH\"\n    | \"S_IXOTH\"\n    | \"S_IRUSR\"\n    | \"S_IXUSR\"\n    | \"S_IRWXU\"\n    | \"S_IRWXG\"\n    | \"S_IWOTH\"\n    | \"S_IRWXO\"\n    | \"S_IWUSR\"\n    | \"S_IRGRP\"\n\n</code></pre>"},{"location":"types/net.box.call_options/","title":"class call_options","text":"<ul> <li>namespace: net.box</li> </ul>"},{"location":"types/net.box.call_options/#fields","title":"fields","text":""},{"location":"types/net.box.call_options/#call_optionstimeout","title":"call_options.timeout","text":"<pre><code>call_options.timeout : number?\n</code></pre> <p>Timeout of Call</p>"},{"location":"types/net.box.call_options/#call_optionsis_async","title":"call_options.is_async","text":"<pre><code>call_options.is_async : boolean?\n</code></pre> <p>makes request asynchronous</p>"},{"location":"types/net.box.call_options/#call_optionsreturn_raw","title":"call_options.return_raw","text":"<pre><code>call_options.return_raw : boolean?\n</code></pre> <p>returns raw msgpack (since version 2.10.0)</p>"},{"location":"types/net.box.call_options/#call_optionson_push","title":"call_options.on_push","text":"<pre><code>call_options.on_push : fun(ctx: any, msg: any)?\n</code></pre> <p>callback for each inbound message</p>"},{"location":"types/net.box.call_options/#call_optionson_push_ctx","title":"call_options.on_push_ctx","text":"<pre><code>call_options.on_push_ctx : any\n</code></pre> <p>ctx for on_push callback</p>"},{"location":"types/net.box.conn/","title":"class conn","text":"<ul> <li>namespace: net.box</li> </ul>"},{"location":"types/net.box.conn/#methods","title":"methods","text":""},{"location":"types/net.box.conn/#conncall","title":"conn.call","text":"<pre><code>async function conn.call(\n  func: string,\n  args: any[]?,\n  opts: net.box.call_options?\n) -&gt;  table\n</code></pre> <p>Execute a remote call.</p> <p><code>conn:call('func', {'1', '2', '3'})</code> is the remote-call equivalent of <code>func('1', '2', '3')</code>. That is, <code>conn:call</code> is a remote stored-procedure call. The return from <code>conn:call</code> is whatever the function returns.</p> <p>Limitation: the called function cannot return a function, for example if <code>func2</code> is defined as <code>function func2 () return func end</code> then <code>conn:call(func2)</code> will return \"error: unsupported Lua type 'function'\".</p> <p>Examples:</p> <pre><code> tarantool&gt; -- create 2 functions with conn:eval()\n tarantool&gt; conn:eval('function f1() return 5+5 end;')\n tarantool&gt; conn:eval('function f2(x,y) return x,y end;')\n tarantool&gt; -- call first function with no parameters and no options\n tarantool&gt; conn:call('f1')\n ---\n - 10\n ...\n tarantool&gt; -- call second function with two parameters and one option\n tarantool&gt; conn:call('f2',{1,'B'},{timeout=99})\n ---\n - 1\n - B\n ...\n</code></pre>"},{"location":"types/net.box.conn/#conneval","title":"conn.eval","text":"<pre><code>async function conn.eval(\n  expression: string,\n  args: any[]?,\n  opts: net.box.call_options?\n) -&gt;  table\n</code></pre> <p>Execute Lua code remotely.</p> <p><code>conn:eval({Lua-string})</code> evaluates and executes the expression in Lua-string, which may be any statement or series of statements. An execute privilege is required; if the user does not have it, an administrator may grant it with <code>box.schema.user.grant({username}, 'execute', 'universe')</code>.</p> <p>To ensure hat the return from <code>conn:eval</code> is whatever the Lua expression returns, begin the Lua-string with the word \"return\".</p> <p>Examples:</p> <pre><code> tarantool&gt; --Lua-string\n tarantool&gt; conn:eval('function f5() return 5+5 end; return f5();')\n ---\n - 10\n ...\n tarantool&gt; --Lua-string, {arguments}\n tarantool&gt; conn:eval('return ...', {1,2,{3,'x'}})\n ---\n - 1\n - 2\n - [3, 'x']\n ...\n tarantool&gt; --Lua-string, {arguments}, {options}\n tarantool&gt; conn:eval('return {nil,5}', {}, {timeout=0.1})\n ---\n - [null, 5]\n ...\n</code></pre>"},{"location":"types/net.box.conn/#connping","title":"conn.ping","text":"<pre><code>async function conn.ping(opts: { timeout: number }?) -&gt;  boolean\n</code></pre> <p>Execute a PING command.</p>"},{"location":"types/net.box.conn/#connon_connect","title":"conn.on_connect","text":"<pre><code>function conn.on_connect(\n  new_callback: fun(conn: net.box.conn),\n  old_callback: fun(conn: net.box.conn)?\n)\n</code></pre> <p>Define a trigger for execution when a new connection is established, and authentication and schema fetch are completed due to an event such as <code>net_box.connect</code>.</p> <p>If a trigger function issues <code>net_box</code> requests, they must be asynchronous (<code>{is_async = true}</code>). An attempt to wait for request completion with <code>future:pairs()</code> or <code>future:wait_result()</code> in the trigger function will result in an error.</p> <p>If the trigger execution fails and an exception happens, the connection's state changes to 'error'. In this case, the connection is terminated, regardless of the <code>reconnect_after</code> option's value. Can be called as many times as reconnection happens, if <code>reconnect_after</code> is greater than zero.</p>"},{"location":"types/net.box.conn/#connon_disconnect","title":"conn.on_disconnect","text":"<pre><code>function conn.on_disconnect(\n  new_callback: fun(conn: net.box.conn),\n  old_callback: fun(conn: net.box.conn)?\n)\n</code></pre> <p>Define a trigger for execution after a connection is closed.</p> <p>If the trigger function causes an error, the error is logged but otherwise is ignored.</p> <p>Execution stops after a connection is explicitly closed, or once the Lua garbage collector removes it.</p>"},{"location":"types/net.box.conn/#connwait_connected","title":"conn.wait_connected","text":"<pre><code>async function conn.wait_connected(wait_timeout: number) -&gt; is_connected boolean\n</code></pre> <p>@return <code>is_connected</code> - true when connected, false on failure.</p> <p>Wait for connection to be active or closed.</p> <p>Example:</p> <pre><code> net_box.self:wait_connected()\n</code></pre>"},{"location":"types/net.box.conn/#connclose","title":"conn.close","text":"<pre><code>function conn.close()\n</code></pre> <p>Close a connection.</p> <p>Connection objects are destroyed by the Lua garbage collector, just like any other objects in Lua, so an explicit destruction is not mandatory. However, since <code>close()</code> is a system call, it is good programming practice to close a connection explicitly when it is no longer needed, to avoid lengthy stalls of the garbage collector.</p> <p>Example:</p> <pre><code> conn:close()\n</code></pre>"},{"location":"types/net.box.conn/#connis_connected","title":"conn.is_connected","text":"<pre><code>function conn.is_connected() -&gt;  boolean\n</code></pre> <p>Show whether connection is active or closed.</p>"},{"location":"types/net.box.conn/#fields","title":"fields","text":""},{"location":"types/net.box.conn/#connhost","title":"conn.host","text":"<pre><code>conn.host : string\n</code></pre>"},{"location":"types/net.box.conn/#connport","title":"conn.port","text":"<pre><code>conn.port : string\n</code></pre>"},{"location":"types/net.box.conn/#connstate","title":"conn.state","text":"<pre><code>conn.state : (\"active\"|\"fetch_schema\"|\"error\"|\"error_reconnect\"|\"closed\"|\"initial\"|\"graceful_shutdown\")\n</code></pre>"},{"location":"types/net.box.conn/#connerror","title":"conn.error","text":"<pre><code>conn.error : string\n</code></pre>"},{"location":"types/net.box.conn/#connpeer_uuid","title":"conn.peer_uuid","text":"<pre><code>conn.peer_uuid : string?\n</code></pre>"},{"location":"types/net.box.conn/#conn_fiber","title":"conn._fiber","text":"<pre><code>conn._fiber : Fiber?\n</code></pre>"},{"location":"types/net.box.connect_options/","title":"class connect_options","text":"<ul> <li>namespace: net.box</li> </ul>"},{"location":"types/net.box.connect_options/#fields","title":"fields","text":""},{"location":"types/net.box.connect_options/#connect_optionswait_connected","title":"connect_options.wait_connected","text":"<pre><code>connect_options.wait_connected : (boolean|number)?\n</code></pre>"},{"location":"types/net.box.connect_options/#connect_optionsreconnect_after","title":"connect_options.reconnect_after","text":"<pre><code>connect_options.reconnect_after : number?\n</code></pre>"},{"location":"types/net.box.connect_options/#connect_optionsuser","title":"connect_options.user","text":"<pre><code>connect_options.user : string?\n</code></pre>"},{"location":"types/net.box.connect_options/#connect_optionspassword","title":"connect_options.password","text":"<pre><code>connect_options.password : string?\n</code></pre>"},{"location":"types/net.box.connect_options/#connect_optionsconnect_timeout","title":"connect_options.connect_timeout","text":"<pre><code>connect_options.connect_timeout : number?\n</code></pre>"},{"location":"types/net.box.request_options/","title":"class request_options","text":"<ul> <li>namespace: net.box</li> </ul>"},{"location":"types/net.box.request_options/#fields","title":"fields","text":""},{"location":"types/net.box.request_options/#request_optionsis_async","title":"request_options.is_async","text":"<pre><code>request_options.is_async : boolean?\n</code></pre>"},{"location":"types/net.box.request_options/#request_optionstimeout","title":"request_options.timeout","text":"<pre><code>request_options.timeout : number?\n</code></pre>"},{"location":"types/scalar/","title":"alias scalar","text":"<pre><code>(alias) scalar = (nil|boolean|string|integer|integer64|number|float64|decimal|datetime|interval...)\n    | nil -- box.NULL or Lua nil\n    | boolean -- true/false\n    | string -- lua string\n    | integer -- lua number\n    | integer64 -- luajit cdata\n    | number -- lua number\n    | float64 -- luajit cdata\n    | decimal -- Tarantool decimal\n    | datetime -- Tarantool datetime\n    | interval -- Tarantool interval\n    | uuid -- Tarantool uuid\n\n</code></pre>"},{"location":"types/seek/","title":"alias seek","text":"<pre><code>(alias) seek = (\"SEEK_SET\"|\"SEEK_DATA\"|\"SEEK_HOLE\"|\"SEEK_END\"|\"SEEK_CUR\")\n    | \"SEEK_SET\"\n    | \"SEEK_DATA\"\n    | \"SEEK_HOLE\"\n    | \"SEEK_END\"\n    | \"SEEK_CUR\"\n\n</code></pre>"},{"location":"types/socket/","title":"class socket","text":"<ul> <li>supers: table</li> </ul>"},{"location":"types/socket/#methods","title":"methods","text":""},{"location":"types/socket/#socketfd","title":"socket.fd","text":"<pre><code>function socket.fd() -&gt; fd number\n</code></pre> <p>@return <code>fd</code> - file descriptor</p> <p>Returns file descriptor of the socket.</p> <p>The <code>socket</code> module allows exchanging data via BSD sockets with a local or remote host in connection-oriented (TCP) or datagram-oriented (UDP) mode. Semantics of the calls in the <code>socket</code> API closely follow semantics of the corresponding POSIX calls.</p> <p>The functions for setting up and connecting are <code>socket</code>, <code>sysconnect</code>, <code>tcp_connect</code>. The functions for sending data are <code>send</code>, <code>sendto</code>, <code>write</code>, <code>syswrite</code>. The functions for receiving data are <code>recv</code>, <code>recvfrom</code>, <code>read</code>. The functions for waiting before sending/receiving data are <code>wait</code>, <code>readable</code>, <code>writable</code>. The functions for setting flags are <code>nonblock</code>, <code>setsockopt</code>. The functions for stopping and disconnecting are <code>shutdown</code>, <code>close</code>. The functions for error checking are <code>errno</code>, <code>error</code>.</p>"},{"location":"types/socket/#socketsysconnect","title":"socket.sysconnect","text":"<pre><code>function socket.sysconnect(\n  host: (string|number),\n  port: (number|string)\n) -&gt; success boolean\n</code></pre> <p>@param <code>host</code> - representation of an IPv4 address or an IPv6 address; or \u201cunix/\u201d; or number, 0 (zero), meaning \u201call local interfaces\u201d;</p> <p>@param <code>port</code> - port number; or path to a unix socket.; or If a port number is 0 (zero), the socket will be bound to a random local port.</p> <p>Connect an existing socket to a remote host. The argument values are the same as in tcp_connect(). The host must be an IP address.</p>"},{"location":"types/socket/#socketsend","title":"socket.send","text":"<pre><code>function socket.send(data: string)\n -&gt;  number\n -&gt;  nil\n\n</code></pre> <p>@param <code>data</code> - what is to be sent</p> <p>@return  - number of bytes send</p> <p>@return  - on error</p> <p>Send data over a connected socket.</p>"},{"location":"types/socket/#socketwrite","title":"socket.write","text":"<pre><code>function socket.write(data: string)\n -&gt;  number\n -&gt;  nil\n\n</code></pre> <p>@param <code>data</code> - what is to be sent</p> <p>@return  - number of bytes send</p> <p>@return  - on error</p> <p>Send data over a connected socket.</p>"},{"location":"types/socket/#socketsyswrite","title":"socket.syswrite","text":"<pre><code>function socket.syswrite(data: string)\n -&gt;  number\n -&gt;  nil\n\n</code></pre> <p>@param <code>data</code> - what is to be sent</p> <p>@return  - number of bytes send</p> <p>@return  - on error</p> <p>Write as much data as possible to the socket buffer if non-blocking.</p> <p>Rarely used.</p>"},{"location":"types/socket/#socketrecv","title":"socket.recv","text":"<pre><code>function socket.recv(size: integer)\n -&gt; result string\n -&gt; empty_string string\n -&gt; status integer\n -&gt; errno integer\n -&gt; errstr string\n\n</code></pre> <p>@param <code>size</code> - maximum number of bytes to receive.</p> <p>@return <code>result</code> - string of the requested length on success.</p> <p>@return <code>empty_string</code> - on error</p> <p>@return <code>status</code> - on error</p> <p>@return <code>errno</code> - on error</p> <p>@return <code>errstr</code> - on error</p> <p>Read size bytes from a connected socket. An internal read-ahead buffer is used to reduce the cost of this call.</p> <p>For recv and recvfrom: use the optional size parameter to limit the number of bytes to receive. A fixed size such as 512 is often reasonable; a pre-calculated size that depends on context \u2013 such as the message format or the state of the network \u2013 is often better. For recvfrom, be aware that a size greater than the Maximum Transmission Unit can cause inefficient transport. For Mac OS X, be aware that the size can be tuned by changing sysctl net.inet.udp.maxdgram.</p> <p>If size is not stated: Tarantool will make an extra call to calculate how many bytes are necessary. This extra call takes time, therefore not stating size may be inefficient.</p> <p>If size is stated: on a UDP socket, excess bytes are discarded. On a TCP socket, excess bytes are not discarded and can be received by the next call.</p>"},{"location":"types/socket/#socketread","title":"socket.read","text":"<pre><code>async function socket.read(\n  limit: integer,\n  timeout: number?\n)\n -&gt; data string\n -&gt; empty_string string\n -&gt;  nil\n\n</code></pre> <p>@param <code>limit</code> - maximum number of bytes to read, for example 50 means \u201cstop after 50 bytes\u201d</p> <p>@param <code>timeout</code> - maximum number of seconds to wait, for example 50 means \u201cstop after 50 seconds\u201d</p> <p>@return <code>data</code> - in case of success</p> <p>@return <code>empty_string</code> - if there is nothing more to read</p> <p>@return  - if error</p> <p>Read from a connected socket until some condition is true, and return the bytes that were read</p> <p>Unlike socket_object:recv (which uses an internal read-ahead buffer), socket_object:read depends on the socket's buffer.</p>"},{"location":"types/socket/#socketread_1","title":"socket.read","text":"<pre><code>async function socket.read(\n  delimiter: string,\n  timeout: number?\n)\n -&gt; data string\n -&gt; empty_string string\n -&gt;  nil\n\n</code></pre> <p>@param <code>delimiter</code> - separator for example '?' means \u201cstop after a question mark\u201d</p> <p>@param <code>timeout</code> - maximum number of seconds to wait, for example 50 means \u201cstop after 50 seconds\u201d.</p> <p>@return <code>data</code> - in case of success</p> <p>@return <code>empty_string</code> - if there is nothing more to read</p> <p>@return  - if error</p> <p>Read from a connected socket until some condition is true, and return the bytes that were read</p> <p>Unlike socket_object:recv (which uses an internal read-ahead buffer), socket_object:read depends on the socket's buffer.</p>"},{"location":"types/socket/#socketread_2","title":"socket.read","text":"<pre><code>async function socket.read(\n  options: { chunk: integer?, delimiter: string? },\n  timeout: number?\n)\n -&gt; data string\n -&gt; empty_string string\n -&gt;  nil\n\n</code></pre> <p>@param <code>options</code> - chunk=limit and/or delimiter=delimiter, for example {chunk=5,delimiter='x'}</p> <p>@param <code>timeout</code> - maximum number of seconds to wait, for example 50 means \u201cstop after 50 seconds\u201d.</p> <p>@return <code>data</code> - in case of success</p> <p>@return <code>empty_string</code> - if there is nothing more to read</p> <p>@return  - if error</p> <p>Read from a connected socket until some condition is true, and return the bytes that were read.</p> <p>Unlike socket_object:recv (which uses an internal read-ahead buffer), socket_object:read depends on the socket's buffer.</p>"},{"location":"types/socket/#socketsysread","title":"socket.sysread","text":"<pre><code>function socket.sysread(size: integer)\n -&gt; data string\n -&gt; empty_string string\n -&gt;  nil\n\n</code></pre> <p>@return <code>data</code> - in case of success</p> <p>@return <code>empty_string</code> - if there is nothing more to read</p> <p>@return  - if error</p> <p>Return data from the socket buffer if non-blocking. In case the socket is blocking, sysread() can block the calling process. Rarely used.</p>"},{"location":"types/socket/#socketbind","title":"socket.bind","text":"<pre><code>function socket.bind(\n  host: string,\n  port: integer?\n) -&gt; success boolean\n</code></pre> <p>@param <code>host</code> - URL or IP address</p> <p>@param <code>port</code> - port number</p> <p>@return <code>success</code> - true for success, false for error. If return is false, use socket_object:errno() or socket_object:error() to see details.</p> <p>Bind a socket to the given host/port.</p> <p>A UDP socket after binding can be used to receive data (see socket_object.recvfrom).</p> <p>A TCP socket can be used to accept new connections, after it has been put in listen mode.</p>"},{"location":"types/socket/#socketlisten","title":"socket.listen","text":"<pre><code>function socket.listen(backlog: number) -&gt; success boolean\n</code></pre> <p>@param <code>backlog</code> - on Linux the listen backlog backlog may be from /proc/sys/net/core/somaxconn, on BSD the backlog may be SOMAXCONN</p> <p>@return <code>success</code> - true for success, false for error.</p> <p>Start listening for incoming connections.</p>"},{"location":"types/socket/#socketaccept","title":"socket.accept","text":"<pre><code>function socket.accept()\n -&gt; client socket\n -&gt;  nil\n\n</code></pre> <p>@return <code>client</code> - new socket if success.</p> <p>@return  - if error</p> <p>Accept a new client connection and create a new connected socket.</p> <p>It is good practice to set the socket's blocking mode explicitly after accepting.</p>"},{"location":"types/socket/#socketsendto","title":"socket.sendto","text":"<pre><code>function socket.sendto(\n  host: string,\n  port: number,\n  data: string\n)\n -&gt; bytes number\n -&gt;  nil\n -&gt; status number?\n -&gt; errno number?\n -&gt; errstr string?\n\n</code></pre> <p>@param <code>host</code> - URL or IP address</p> <p>@param <code>port</code> - port number</p> <p>@param <code>data</code> - what is to be sent</p> <p>@return <code>bytes</code> - the number of bytes sent.</p> <p>@return  - on error, returns nil and may return status, errno, errstr.</p> <p>@return <code>status</code> - on error, returns nil and may return status, errno, errstr.</p> <p>@return <code>errno</code> - on error, returns nil and may return status, errno, errstr.</p> <p>@return <code>errstr</code> - on error, returns nil and may return status, errno, errstr.</p> <p>Send a message on a UDP socket to a specified host.</p>"},{"location":"types/socket/#socketrecvfrom","title":"socket.recvfrom","text":"<pre><code>function socket.recvfrom(size: number?)\n -&gt; message string\n -&gt; source { family: string, host: string, port: number }\n -&gt;  nil\n -&gt; status number\n -&gt; errno number\n -&gt; errstr string\n\n</code></pre> <p>@param <code>size</code> - maximum number of bytes to receive.</p> <p>@return <code>message</code> - on success</p> <p>@return <code>source</code> - on success</p> <p>@return  - on error</p> <p>@return <code>status</code> - on error</p> <p>@return <code>errno</code> - on error</p> <p>@return <code>errstr</code> - on error</p> <p>Receive a message on a UDP socket.</p>"},{"location":"types/socket/#socketshutdown","title":"socket.shutdown","text":"<pre><code>function socket.shutdown(how: number) -&gt; success boolean\n</code></pre> <p>@param <code>how</code> - socket.SHUT_RD, socket.SHUT_WR, or socket.SHUT_RDWR.</p> <p>Shutdown a reading end, a writing end, or both ends of a socket.</p>"},{"location":"types/socket/#socketclose","title":"socket.close","text":"<pre><code>function socket.close() -&gt; success boolean\n</code></pre> <p>@return <code>success</code> - true on success, false on error. For example, if sock is already closed, sock:close() returns false.</p> <p>Close (destroy) a socket.</p> <p>A closed socket should not be used any more.</p> <p>A socket is closed automatically when the Lua garbage collector removes its user data.</p>"},{"location":"types/socket/#socketerrno","title":"socket.errno","text":"<pre><code>function socket.errno() -&gt; errno number\n</code></pre> <p>@return <code>errno</code> - if no error 0 is returned</p> <p>Retrieve information about the last error that occurred on a socket, if any.</p> <p>Errors do not cause throwing of exceptions so these functions are usually necessary.</p>"},{"location":"types/socket/#socketerror","title":"socket.error","text":"<pre><code>function socket.error() -&gt; errstr string\n</code></pre> <p>Retrieve information about the last error that occurred on a socket, if any.</p> <p>Errors do not cause throwing of exceptions so these functions are usually necessary.</p>"},{"location":"types/socket/#socketsetsockopt","title":"socket.setsockopt","text":"<pre><code>function socket.setsockopt(\n  level: any,\n  name: any,\n  value: any\n)\n</code></pre> <p>Set socket flags.</p>"},{"location":"types/socket/#socketgetsockopt","title":"socket.getsockopt","text":"<pre><code>function socket.getsockopt(\n  level: any,\n  name: any\n)\n</code></pre> <p>Get socket flags.</p>"},{"location":"types/socket/#socketlinger","title":"socket.linger","text":"<pre><code>function socket.linger(active: boolean)\n</code></pre> <p>Set or clear the SO_LINGER flag.</p>"},{"location":"types/socket/#socketnonblock","title":"socket.nonblock","text":"<pre><code>function socket.nonblock() -&gt; nonblock_flag boolean\n</code></pre> <p>Returns the current O_NONBLOCK value.</p>"},{"location":"types/socket/#socketnonblock_1","title":"socket.nonblock","text":"<pre><code>function socket.nonblock(flag: boolean) -&gt; new_flag_value boolean\n</code></pre> <p>Sets O_NONBLOCK flag.</p>"},{"location":"types/socket/#socketreadable","title":"socket.readable","text":"<pre><code>async function socket.readable(timeout: number?) -&gt; is_readable boolean\n</code></pre> <p>@param <code>timeout</code> - timeout in seconds</p> <p>@return <code>is_readable</code> - true if the socket is now readable, false if timeout expired;</p> <p>Wait until something is readable, or until a timeout value expires.</p>"},{"location":"types/socket/#socketwritable","title":"socket.writable","text":"<pre><code>async function socket.writable(timeout: number?) -&gt; is_writable boolean\n</code></pre> <p>@param <code>timeout</code> - timeout in seconds</p> <p>@return <code>is_writable</code> - true if the socket is now writable, false if timeout expired;</p> <p>Wait until something is writable, or until a timeout value expires.</p>"},{"location":"types/socket/#socketwait","title":"socket.wait","text":"<pre><code>async function socket.wait(timeout: number?) -&gt;  (\"R\"|\"W\"|\"RW\"|\"\")\n</code></pre> <p>@param <code>timeout</code> - timeout</p> <p>@return  - 'R' if the socket is now readable, 'W' if the socket is now writable, 'RW' if the socket is now both readable and writable, '' (empty string) if timeout expired;</p> <p>Wait until something is either readable or writable, or until a timeout value expires.</p>"},{"location":"types/socket/#socketname","title":"socket.name","text":"<pre><code>function socket.name() -&gt;  { family: string, host: string, port: number, protocol: string, type: string }\n</code></pre> <p>Get information about the near side of the connection.</p> <p>The equivalent POSIX function is <code>getsockname()</code>.</p>"},{"location":"types/socket/#socketpeer","title":"socket.peer","text":"<pre><code>function socket.peer() -&gt;  { family: string, host: string, port: number, protocol: string, type: string }\n</code></pre> <p>Get information about the far side of a connection.</p> <p>The equivalent POSIX function is <code>getpeername()</code>.</p>"},{"location":"types/socket.tcp_server_handler/","title":"class tcp_server_handler","text":"<ul> <li>namespace: socket</li> </ul>"},{"location":"types/socket.tcp_server_handler/#methods","title":"methods","text":""},{"location":"types/socket.tcp_server_handler/#tcp_server_handlerhandler","title":"tcp_server_handler.handler","text":"<pre><code>function tcp_server_handler.handler(client: socket)-&gt; nil\n</code></pre>"},{"location":"types/socket.tcp_server_handler/#tcp_server_handlerprepare","title":"tcp_server_handler.prepare","text":"<pre><code>function tcp_server_handler.prepare(server: socket)-&gt; number?\n</code></pre>"},{"location":"types/socket.tcp_server_handler/#fields","title":"fields","text":""},{"location":"types/socket.tcp_server_handler/#tcp_server_handlername","title":"tcp_server_handler.name","text":"<pre><code>tcp_server_handler.name : string\n</code></pre>"},{"location":"types/socket_module/","title":"class socket_module","text":"<p>Builtin <code>socket</code> module.</p> <p>The <code>socket</code> module allows exchanging data via BSD sockets with a local or remote host in connection-oriented (TCP) or datagram-oriented (UDP) mode. Semantics of the calls in the <code>socket</code> API closely follow semantics of the corresponding POSIX calls.</p>"},{"location":"types/socket_module/#methods","title":"methods","text":""},{"location":"types/socket_module/#socket_moduletcp_connect","title":"socket_module.tcp_connect","text":"<pre><code>async function socket_module.tcp_connect(\n  host: string,\n  port: (number|string)?,\n  timeout: number?\n)\n -&gt;  socket\n -&gt;  nil\n -&gt; error_message string\n\n</code></pre> <p>@param <code>host</code> - URL or IP address</p> <p>@param <code>port</code> - port number string for unix socket</p> <p>@param <code>timeout</code> - number of seconds to wait</p> <p>Connect a socket to a remote host.</p>"},{"location":"types/socket_module/#socket_modulegetaddrinfo","title":"socket_module.getaddrinfo","text":"<pre><code>async function socket_module.getaddrinfo(\n  host: string,\n  port: (number|string),\n  timeout: number?,\n  options: { family: string, flags: any, ... }?\n)\n -&gt;  {...}[]?\n -&gt; error_message string\n\n</code></pre> <p>@param <code>host</code> - URL or IP address</p> <p>@param <code>port</code> - port number as a numeric or string</p> <p>@param <code>timeout</code> - maximum number of seconds to wait</p> <p>The socket.getaddrinfo() function is useful for finding information about a remote site so that the correct arguments for sock:sysconnect() can be passed. This function may use the worker_pool_threads configuration parameter.</p>"},{"location":"types/socket_module/#socket_moduletcp_server","title":"socket_module.tcp_server","text":"<pre><code>async function socket_module.tcp_server(\n  host: string,\n  port: number,\n  handler: (fun(client: socket)|socket.tcp_server_handler),\n  timeout: number?\n)\n -&gt;  socket\n -&gt;  nil\n -&gt; error_message string\n\n</code></pre> <p>@param <code>host</code> - host name or IP</p> <p>@param <code>port</code> - host port, may be 0</p> <p>@param <code>handler</code> - what to execute when a connection occurs</p> <p>@param <code>timeout</code> - host resolving timeout in seconds</p> <p>The socket.tcp_server() function makes Tarantool act as a server that can accept connections.</p>"},{"location":"types/socket_module/#socket_modulebind","title":"socket_module.bind","text":"<pre><code>function socket_module.bind(\n  host: string,\n  port: number\n)\n -&gt;  socket\n -&gt;  nil\n -&gt; error_message string\n\n</code></pre> <p>@param <code>host</code> - URL or IP address</p> <p>@param <code>port</code> - port number</p> <p>Bind a socket to the given host/port.</p>"},{"location":"types/socket_module/#socket_moduleiowait","title":"socket_module.iowait","text":"<pre><code>async function socket_module.iowait(\n  fd: number,\n  read_or_write_flags: (\"R\"|\"W\"|\"RW\"|1|2|3),\n  timeout: number?\n)\n</code></pre> <p>@param <code>fd</code> - file descriptor</p> <p>@param <code>read_or_write_flags</code> - 'R' or 1 = read, 'W' or 2 = write, 'RW' or 3 = read|write.</p> <p>@param <code>timeout</code> - number of seconds to wait</p> <p>Wait until read-or-write activity occurs for a file descriptor.</p> <p>If the fd parameter is nil, then there will be a sleep until the timeout.</p> <p>If the timeout parameter is nil or unspecified, then timeout is infinite.</p>"},{"location":"types/tuple_type/","title":"alias tuple_type","text":"<pre><code>(alias) tuple_type = (scalar|compound)\n</code></pre>"},{"location":"types/tuple_type_name/","title":"alias tuple_type_name","text":"<pre><code>(alias) tuple_type_name = (\"unsigned\"|\"string\"|\"boolean\"|\"number\"|\"double\"|\"integer\"|\"decimal\"|\"varbinary\"...)\n</code></pre>"},{"location":"types/uint64_t/","title":"class uint64_t","text":"<ul> <li>supers: ffi.cdata*</li> </ul>"},{"location":"types/uri.encoding_opt/","title":"class encoding_opt","text":"<ul> <li>namespace: uri</li> </ul>"},{"location":"types/uri/","title":"class uri","text":""},{"location":"types/uri/#fields","title":"fields","text":""},{"location":"types/uri/#urifragment","title":"uri.fragment","text":"<pre><code>uri.fragment : string?\n</code></pre> <p>string after #</p>"},{"location":"types/uri/#urihost","title":"uri.host","text":"<pre><code>uri.host : string?\n</code></pre> <p>host (same as Host header in HTTP)</p>"},{"location":"types/uri/#uriipv4","title":"uri.ipv4","text":"<pre><code>uri.ipv4 : string?\n</code></pre> <p>ipv4 address if was parsed</p>"},{"location":"types/uri/#uriipv6","title":"uri.ipv6","text":"<pre><code>uri.ipv6 : string?\n</code></pre> <p>ipv6 address if was parsed</p>"},{"location":"types/uri/#urilogin","title":"uri.login","text":"<pre><code>uri.login : string?\n</code></pre> <p>login as for basic auth if was parsed</p>"},{"location":"types/uri/#uripassword","title":"uri.password","text":"<pre><code>uri.password : string?\n</code></pre> <p>password as for basic auth if was parsed</p>"},{"location":"types/uri/#uripath","title":"uri.path","text":"<pre><code>uri.path : string?\n</code></pre> <p>path in HTTP URI if was parsed</p>"},{"location":"types/uri/#uriquery","title":"uri.query","text":"<pre><code>uri.query : table&lt;string,string[]&gt;?\n</code></pre> <p>query of arguments, values are a list of strings</p>"},{"location":"types/uri/#urischeme","title":"uri.scheme","text":"<pre><code>uri.scheme : string?\n</code></pre> <p>scheme</p>"},{"location":"types/uri/#uriservice","title":"uri.service","text":"<pre><code>uri.service : string?\n</code></pre> <p>port if was given</p>"},{"location":"types/uri/#uriunix","title":"uri.unix","text":"<pre><code>uri.unix : string?\n</code></pre> <p>path to unix socket if was parsed</p>"},{"location":"types/uri_like/","title":"alias uri_like","text":"<pre><code>(alias) uri_like = (uri|string)\n</code></pre>"},{"location":"types/uuid.byte_order/","title":"alias byte_order","text":"<ul> <li>namespace: uuid</li> </ul> <pre><code>(alias) byte_order = (\"l\"|\"b\"|\"h\"|\"n\"|\"host\"|\"network\")\n    | \"l\" -- little-endian\n    | \"b\" -- big-endian\n    | \"h\" -- host (endianness depends on host)\n    | \"n\" -- network (endianness depends on network)\n    | \"host\" -- host (endianness depends on host)\n    | \"network\" -- network (endianness depends on network)\n\n</code></pre>"},{"location":"types/uuid/","title":"class uuid","text":"<ul> <li>supers: ffi.cdata*</li> </ul>"},{"location":"types/uuid/#methods","title":"methods","text":""},{"location":"types/uuid/#uuidbin","title":"uuid.bin","text":"<pre><code>function uuid.bin(byte_order: uuid.byte_order?) -&gt; uuid string\n</code></pre> <p>@param <code>byte_order</code> - Byte order of the resulting UUID</p> <p>@return <code>uuid</code> - 16-byte string</p> <p>Convert UUID to a 16-byte string.</p>"},{"location":"types/uuid/#uuidstr","title":"uuid.str","text":"<pre><code>function uuid.str() -&gt; uuid string\n</code></pre> <p>@return <code>uuid</code> - 36-byte binary string</p> <p>Convert UUID to a 36-byte hexadecimal string.</p>"},{"location":"types/yaml.cfg/","title":"class cfg","text":"<ul> <li>namespace: yaml</li> </ul>"},{"location":"types/yaml.cfg/#fields","title":"fields","text":""},{"location":"types/yaml.cfg/#cfgencode_max_depth","title":"cfg.encode_max_depth","text":"<pre><code>cfg.encode_max_depth : number?\n</code></pre> <p>(default: 128) Max recursion depth for encoding</p>"},{"location":"types/yaml.cfg/#cfgencode_deep_as_nil","title":"cfg.encode_deep_as_nil","text":"<pre><code>cfg.encode_deep_as_nil : boolean?\n</code></pre> <p>(default: false) A flag saying whether to crop tables with nesting level deeper than cfg.encode_max_depth. Not-encoded fields are replaced with one null. If not set, too deep nesting is considered an error.</p>"},{"location":"types/yaml.cfg/#cfgencode_invalid_numbers","title":"cfg.encode_invalid_numbers","text":"<pre><code>cfg.encode_invalid_numbers : boolean?\n</code></pre> <p>(default: true) A flag saying whether to enable encoding of NaN and Inf numbers</p>"},{"location":"types/yaml.cfg/#cfgencode_number_precision","title":"cfg.encode_number_precision","text":"<pre><code>cfg.encode_number_precision : number?\n</code></pre> <p>(default: 14) Precision of floating point numbers</p>"},{"location":"types/yaml.cfg/#cfgencode_load_metatables","title":"cfg.encode_load_metatables","text":"<pre><code>cfg.encode_load_metatables : boolean?\n</code></pre> <p>(default: true) A flag saying whether the serializer will follow __serialize metatable field</p>"},{"location":"types/yaml.cfg/#cfgencode_use_tostring","title":"cfg.encode_use_tostring","text":"<pre><code>cfg.encode_use_tostring : boolean?\n</code></pre> <p>(default: false) A flag saying whether to use tostring() for unknown types</p>"},{"location":"types/yaml.cfg/#cfgencode_invalid_as_nil","title":"cfg.encode_invalid_as_nil","text":"<pre><code>cfg.encode_invalid_as_nil : boolean?\n</code></pre> <p>(default: false) A flag saying whether use NULL for non-recognized types</p>"},{"location":"types/yaml.cfg/#cfgencode_sparse_convert","title":"cfg.encode_sparse_convert","text":"<pre><code>cfg.encode_sparse_convert : boolean?\n</code></pre> <p>(default: true) A flag saying whether to handle excessively sparse arrays as maps. See detailed description below.</p>"},{"location":"types/yaml.cfg/#cfgencode_sparse_ratio","title":"cfg.encode_sparse_ratio","text":"<pre><code>cfg.encode_sparse_ratio : number?\n</code></pre> <p>(default: 2) 1/encode_sparse_ratio is the permissible percentage of missing values in a sparse array.</p>"},{"location":"types/yaml.cfg/#cfgencode_sparse_safe","title":"cfg.encode_sparse_safe","text":"<pre><code>cfg.encode_sparse_safe : number?\n</code></pre> <p>(default: 10) A limit ensuring that small Lua arrays are always encoded as sparse arrays (instead of generating an error or encoding as a map)</p>"},{"location":"types/yaml.cfg/#cfgdecode_invalid_numbers","title":"cfg.decode_invalid_numbers","text":"<pre><code>cfg.decode_invalid_numbers : boolean?\n</code></pre> <p>(default: true) A flag saying whether to enable decoding of NaN and Inf numbers</p>"},{"location":"types/yaml.cfg/#cfgdecode_save_metatables","title":"cfg.decode_save_metatables","text":"<pre><code>cfg.decode_save_metatables : boolean?\n</code></pre> <p>(default: true) A flag saying whether to set metatables for all arrays and maps</p>"}]}